// fn0C00_0000
// Return size: 0
void fn0C00_0000(selector ds)
fn0C00_0000_entry:
	Mem12[ds:0x64<16>:word16] = fn0C00_000B(5<16>)
	return
	// succ:  fn0C00_0000_exit
l0C00_0000:
fn0C00_0000_exit:

void fn0C00_0000(selector ds)
{
	Mem12[ds:0x64<16>:word16] = fn0C00_000B(5<16>);
}
===========================
// fn0C00_000B
// Return size: 0
word16 fn0C00_000B(word16 cx)
fn0C00_000B_entry:
	// succ:  l0C00_000B
l0C00_000B:
	word16 ax_11
	branch cx <= 1<16> l0C00_001C
	// succ:  l0C00_0011 l0C00_001C
l0C00_0011:
	ax_11 = SLICE(cx *s32 fn0C00_000B(cx - 1<16>), word16, 0) (alias)
	goto l0C00_001F
	// succ:  l0C00_001F
l0C00_001C:
	ax_11 = 1<16>
	// succ:  l0C00_001F
l0C00_001F:
	return ax_11
	// succ:  fn0C00_000B_exit
fn0C00_000B_exit:

word16 fn0C00_000B(word16 cx)
{
	word16 ax_11;
	if (cx > 1<16>)
		ax_11 = SLICE(cx *s32 fn0C00_000B(cx - 1<16>), word16, 0);
	else
		ax_11 = 1<16>;
	return ax_11;
}
===========================
