fp:fp
sp_2: orig: sp
Top_3: orig: Top
sp_4: orig: sp
si:si
ss:ss
Mem7: orig: Mem0
cx:cx
    def:  def cx
    uses: dx_ax_20 = cx *s32 ax_17
          branch cx <= 1<16> l0C00_001C
          ax_17 = fn0C00_000B(cx - 1<16>)
SCZO_9: orig: SCZO
SZO_10: orig: SZO
ax_11: orig: ax
    def:  ax_11 = 1<16>
    uses: ax_31 = PHI((ax_22, l0C00_0011), (ax_11, l0C00_001C))
si_12: orig: si
cx_13: orig: cx
SZO_14: orig: SZO
sp_15: orig: sp
cx_16: orig: cx
ax_17: orig: ax
    def:  ax_17 = fn0C00_000B(cx - 1<16>)
    uses: dx_ax_20 = cx *s32 ax_17
Top_18: orig: Top
SCZO_19: orig: SCZO
dx_ax_20: orig: dx_ax
    def:  dx_ax_20 = cx *s32 ax_17
    uses: ax_22 = SLICE(dx_ax_20, word16, 0) (alias)
dx_21: orig: dx
ax_22: orig: ax
    def:  ax_22 = SLICE(dx_ax_20, word16, 0) (alias)
    uses: ax_31 = PHI((ax_22, l0C00_0011), (ax_11, l0C00_001C))
SCZO_23: orig: SCZO
dx_30: orig: dx
sp_25: orig: sp
wLoc02_29: orig: wLoc02
si_27: orig: si
sp_28: orig: sp
ax_31: orig: ax
    def:  ax_31 = PHI((ax_22, l0C00_0011), (ax_11, l0C00_001C))
    uses: return ax_31
C_32: orig: C
C_33: orig: C
C_34: orig: C
cx_35: orig: cx
dx_36: orig: dx
dx:dx
O_38: orig: O
O_39: orig: O
O_40: orig: O
S_41: orig: S
S_42: orig: S
S_43: orig: S
Top_44: orig: Top
Z_45: orig: Z
Z_46: orig: Z
Z_47: orig: Z
sp_48: orig: sp
Top_49: orig: Top
// fn0C00_000B
// Return size: 0
word16 fn0C00_000B(word16 cx)
fn0C00_000B_entry:
	def cx
	// succ:  l0C00_000B
l0C00_000B:
	branch cx <= 1<16> l0C00_001C
	// succ:  l0C00_0011 l0C00_001C
l0C00_0011:
	ax_17 = fn0C00_000B(cx - 1<16>)
	dx_ax_20 = cx *s32 ax_17
	ax_22 = SLICE(dx_ax_20, word16, 0) (alias)
	goto l0C00_001F
	// succ:  l0C00_001F
l0C00_001C:
	ax_11 = 1<16>
	// succ:  l0C00_001F
l0C00_001F:
	ax_31 = PHI((ax_22, l0C00_0011), (ax_11, l0C00_001C))
	return ax_31
	// succ:  fn0C00_000B_exit
fn0C00_000B_exit:
fp:fp
sp_2: orig: sp
Top_3: orig: Top
cx_4: orig: cx
ax_5: orig: ax
    def:  ax_5 = fn0C00_000B(5<16>)
    uses: Mem12[ds:0x64<16>:word16] = ax_5
cx_6: orig: cx
S_7: orig: S
C_8: orig: C
Z_9: orig: Z
O_10: orig: O
ds:ds
    def:  def ds
    uses: Mem12[ds:0x64<16>:word16] = ax_5
Mem12: orig: Mem0
    def:  Mem12[ds:0x64<16>:word16] = ax_5
// fn0C00_0000
// Return size: 0
void fn0C00_0000(selector ds)
fn0C00_0000_entry:
	def ds
	// succ:  l0C00_0000
l0C00_0000:
	ax_5 = fn0C00_000B(5<16>)
	Mem12[ds:0x64<16>:word16] = ax_5
	return
	// succ:  fn0C00_0000_exit
fn0C00_0000_exit:
