// .EventVectors
// Return size: 0
define .EventVectors
.EventVectors_entry:
	r29 = fp
	// succ:  l00005000
l00005000:
	// succ:  l00005000_thunk_event_handle_reset
l00005000_thunk_event_handle_reset:
	call event_handle_reset (retsize: 0;)
	return
	// succ:  .EventVectors_exit
.EventVectors_exit:


// strict_aliasing_workaround
// Return size: 0
void strict_aliasing_workaround(uint16 * r0)
_ZL26strict_aliasing_workaroundPt_entry:
	r29 = fp
	// succ:  l000050C0
l000050C0:
	v3 = r29 - 8<i32>
	Mem0[v3:word32] = r30
	Mem0[v3 + 4<i32>:word32] = r31
	r30 = v3
	r29 = v3 - 16<i32>
	Mem0[r30 - 12<i32>:word32] = r0
	r0 = Mem0[r30 - 12<i32>:word32]
	Mem0[r30 - 4<i32>:word32] = r0
	r0 = Mem0[r30 - 4<i32>:word32]
	v7 = r30
	r31 = Mem0[v7 + 4<i32>:word32]
	r30 = Mem0[v7:word32]
	r29 = v7 + 8<i32>
	return
	// succ:  _ZL26strict_aliasing_workaroundPt_exit
_ZL26strict_aliasing_workaroundPt_exit:


// fact
// Return size: 0
void fact(int32 r0)
_Z4facti_entry:
	r29 = fp
	// succ:  l000050DC
l000050DC:
	v3 = r29 - 8<i32>
	Mem0[v3:word32] = r30
	Mem0[v3 + 4<i32>:word32] = r31
	r30 = v3
	r29 = v3 - 8<i32>
	Mem0[r30 - 4<i32>:word32] = r0
	r0 = Mem0[r30 - 4<i32>:word32]
	p0 = r0 > 1<32>
	r0 = p0 ? 1<32> : 0<32>
	p0 = tstbit(r0, 0<32>)
	branch p0 l00005100
	// succ:  l000050F8 l00005100
l000050F8:
	r0 = 1<32>
	goto l00005118
	// succ:  l00005118
l00005100:
	r0 = Mem0[r30 - 4<i32>:word32]
	r0 = r0 + 0xFFFFFFFF<32>
	fact(r0)
	r29 = r29 + 0xFFFFFFFC<32>
	r1 = r0
	r0 = Mem0[r30 - 4<i32>:word32]
	r0 = r1 * r0
	// succ:  l00005118
l00005118:
	v9 = r30
	r31 = Mem0[v9 + 4<i32>:word32]
	r30 = Mem0[v9:word32]
	r29 = v9 + 8<i32>
	return
	// succ:  _Z4facti_exit
_Z4facti_exit:


// main
// Return size: 0
define main
main_entry:
	r29 = fp
	// succ:  l00005120
l00005120:
	v3 = r29 - 8<i32>
	Mem0[v3:word32] = r30
	Mem0[v3 + 4<i32>:word32] = r31
	r30 = v3
	r29 = v3 - 24<i32>
	Mem0[r30 - 12<i32>:word32] = r0
	Mem0[r30 - 16<i32>:word32] = r1
	r0 = Mem0[r30 - 12<i32>:word32]
	p0 = r0 == 2<32>
	r0 = p0 ? 1<32> : 0<32>
	p0 = tstbit(r0, 0<32>)
	branch p0 l00005180
	// succ:  l00005140 l00005180
l00005140:
	r0 = Mem0[r30 - 16<i32>:word32]
	r0 = r0 + 4<32>
	r0 = Mem0[r0:word32]
	call atoi (retsize: 0;)
	Mem0[r30 - 4<i32>:word32] = r0
	r0 = Mem0[r30 - 4<i32>:word32]
	Mem0[r29:word32] = r0
	r0 = 0xD000<32>
	call printf (retsize: 0;)
	r0 = Mem0[r30 - 4<i32>:word32]
	p0 = r0 > 0xFFFFFFFF<32>
	r0 = p0 ? 1<32> : 0<32>
	p0 = tstbit(r0, 0<32>)
	branch p0 l00005194
	// succ:  l0000517C l00005194
l0000517C:
	goto l000051A8
	// succ:  l000051A8
l00005180:
	r0 = 0xD013<32>
	call printf (retsize: 0;)
	r0 = 0xFFFFFFFF<32>
	goto l000051D4
	// succ:  l000051D4
l00005194:
	r0 = 0xD02F<32>
	call printf (retsize: 0;)
	r0 = 0xFFFFFFFF<32>
	goto l000051D4
	// succ:  l000051D4
l000051A8:
	r0 = Mem0[r30 - 4<i32>:word32]
	fact(r0)
	Mem0[r30 - 8<i32>:word32] = r0
	r0 = Mem0[r30 - 4<i32>:word32]
	Mem0[r29:word32] = r0
	r0 = Mem0[r30 - 8<i32>:word32]
	Mem0[r29 + 4<i32>:word32] = r0
	r0 = 0xD050<32>
	call printf (retsize: 0;)
	r0 = 0<32>
	// succ:  l000051D4
l000051D4:
	v9 = r30
	r31 = Mem0[v9 + 4<i32>:word32]
	r30 = Mem0[v9:word32]
	r29 = v9 + 8<i32>
	return
	// succ:  main_exit
main_exit:


// atoi
// Return size: 0
define atoi
atoi_entry:
	r29 = fp
	// succ:  l000051DC
l000051DC:
	v3 = r29 - 8<i32>
	Mem0[v3:word32] = r30
	Mem0[v3 + 4<i32>:word32] = r31
	r30 = v3
	r29 = v3 - 8<i32>
	Mem0[r30 - 4<i32>:word32] = r0
	r0 = Mem0[r30 - 4<i32>:word32]
	r1 = 0<32>
	r2 = 0xA<32>
	call _Stoul (retsize: 0;)
	v9 = r30
	r31 = Mem0[v9 + 4<i32>:word32]
	r30 = Mem0[v9:word32]
	r29 = v9 + 8<i32>
	return
	// succ:  atoi_exit
atoi_exit:


// thread_create
// Return size: 0
define thread_create
thread_create_entry:
	r29 = fp
	// succ:  l00005200
l00005200:
	r6 = SEQ(0<16>, SLICE(r6, word16, 0))
	r5 = SEQ(0<16>, SLICE(r5, word16, 0))
	r7 = r2 << 2<32>
	r4 = SEQ(0<16>, SLICE(r4, word16, 0))
	r8 = 1<32>
	r6 = SEQ(SLICE(r6, word16, 16), 0x6C50<16>)
	r5 = SEQ(SLICE(r5, word16, 16), 0x6BF0<16>)
	r4 = SEQ(SLICE(r4, word16, 16), 0x6B90<16>)
	r6 = r6 + r7
	r4 = r4 + r7
	r8 = r8 & r8 << r2
	r5 = r7 + r5
	Mem0[r4:word32] = r0
	Mem0[r5:word32] = r1
	Mem0[r6:word32] = r3
	start(r8)
	return
	// succ:  thread_create_exit
thread_create_exit:


// thread_stop
// Return size: 0
define thread_stop
thread_stop_entry:
	r29 = fp
	// succ:  l00005240
l00005240:
	r1 = 1<32>
	r0 = htid
	r1 = r1 & r1 << r0
	stop(r1)
	r28 = SEQ(0<16>, SLICE(r28, word16, 0))
	r28 = SEQ(SLICE(r28, word16, 16), 0x1DC0<16>)
	call r28 (retsize: 0;)
	return
	// succ:  thread_stop_exit
thread_stop_exit:


// thread_join
// Return size: 0
define thread_join
thread_join_entry:
	r29 = fp
	// succ:  l00005260
l00005260:
	r3 = 1<32>
	r1 = htid
	r1 = r1 & r3 << r1
	r1 = 0xFFFFFFFF<32> - r1
	r0 = r0 & r1
	r0 = SEQ(SLICE(r0, word16, 0), SLICE(r0, word16, 0))
	r2 = modectl
	r2 = r0 & r2
	return
	// succ:  thread_join_exit
thread_join_exit:


// thread_get_tnum
// Return size: 0
define thread_get_tnum
thread_get_tnum_entry:
	r29 = fp
	// succ:  l00005290
l00005290:
	return
	// succ:  thread_get_tnum_exit
thread_get_tnum_exit:


// thread_stack_size
// Return size: 0
define thread_stack_size
thread_stack_size_entry:
	r29 = fp
	// succ:  l000052A0
l000052A0:
	r2 = SEQ(0<16>, SLICE(r2, word16, 0))
	r3 = r0 << 2<32>
	r2 = SEQ(SLICE(r2, word16, 16), 0x6CB0<16>)
	r4 = r2 + r3
	Mem0[r4:word32] = r1
	return
	// succ:  thread_stack_size_exit
thread_stack_size_exit:


// __sys_get_cmdline
// Return size: 0
define __sys_get_cmdline
__sys_get_cmdline_entry:
	r29 = fp
	// succ:  l000052C0
l000052C0:
	v3 = r29 - 8<i32>
	Mem0[v3:word32] = r30
	Mem0[v3 + 4<i32>:word32] = r31
	r30 = v3
	r29 = v3 - 16<i32>
	r3 = Mem0[gp + 224<i32>:word32]
	r2 = 0<32>
	Mem0[r29 + 8<i32>:word64] = r17_r16
	branch p0 l00005300
	// succ:  l000052D8 l00005300
l000052D8:
	p0 = r3 == 0<32>
	Mem0[r29:word32] = r0
	r16 = r29 + 0<32>
	r2 = setbit(r16, 4<32>)
	Mem0[r2:word32] = r1
	call hexagon_cache_cleaninv (retsize: 0;)
	r0 = r29 + 0<32>
	r1 = 8<32>
	call hexagon_cache_cleaninv (retsize: 0;)
	r0 = 0x15<32>
	r1 = r16
	trap0(0<32>)
	r2 = r0
	// succ:  l00005300
l00005300:
	v14 = r30
	r31 = Mem0[v14 + 4<i32>:word32]
	r30 = Mem0[v14:word32]
	r29 = v14 + 8<i32>
	return
	// succ:  __sys_get_cmdline_exit
__sys_get_cmdline_exit:


// printf
// Return size: 0
define printf
printf_entry:
	r29 = fp
	// succ:  l00005310
l00005310:
	v3 = r29 - 8<i32>
	Mem0[v3:word32] = r30
	Mem0[v3 + 4<i32>:word32] = r31
	r30 = v3
	r29 = v3 - 16<i32>
	Mem0[r29 + 496<i32>:word64] = r17_r16
	r16 = r0
	r0 = 0xE498<32>
	r1 = r29 + 0x18<32>
	call _Lockfilelock (retsize: 0;)
	r3 = Mem0[r29 + 4<i32>:word64]
	r1 = 0x18<32>
	r2 = r16
	r0 = 0x5360<32>
	call _Printf (retsize: 0;)
	r16 = r0
	r0 = 0x18<32>
	call _Unlockfilelock (retsize: 0;)
	v12 = r30
	r31 = Mem0[v12 + 4<i32>:word32]
	r30 = Mem0[v12:word32]
	r29 = v12 + 8<i32>
	return
	// succ:  printf_exit
printf_exit:


// prout
// Return size: 0
define prout
prout_entry:
	r29 = fp
	// succ:  l00005360
l00005360:
	v3 = r29 - 8<i32>
	Mem0[v3:word32] = r30
	Mem0[v3 + 4<i32>:word32] = r31
	r30 = v3
	r29 = v3 - 8<i32>
	Mem0[r29 + 496<i32>:word64] = r17_r16
	r17_r16 = r0_r2
	r4 = r1
	call fwrite (retsize: 0;)
	r3 = r17
	r17_r16 = Mem0[r29:word64]
	r0 = -1<i32>
	r0 = r17 + 0<32>
	p0 = r0 == r16
	v16 = r30
	r31 = Mem0[v16 + 4<i32>:word32]
	r30 = Mem0[v16:word32]
	r29 = v16 + 8<i32>
	return
	// succ:  prout_exit
prout_exit:


// memset
// Return size: 0
define memset
memset_entry:
	r29 = fp
	// succ:  l00005390
l00005390:
	r6 = r0
	r7 = vsplatb(r1)
	branch r2 == 0<32> l00005490
	// succ:  l0000539C l00005490
l0000539C:
	branch p0 l000053C0
	// succ:  l000053A4 l000053C0
l000053A4:
	p0 = r2 >u -1<i32>
	r5_r4 = r7_r7
	r3 = r0
	__nyi_loop0(0x000053B0<p32>, r2)
	Mem0[r3:byte] = r1
	r3 = r3 + 1<i32>
	return
	// succ:  memset_exit
l000053C0:
	p1 = r2 == 1<32>
	Mem0[r0:byte] = r1
	r6 = r0
	branch p1 l00005494
	// succ:  l000053D0 l00005494
l000053D0:
	r2 = r2 + 0xFFFFFFFF<32>
	branch p0 l000053E8
	// succ:  l000053D8 l000053E8
l000053D8:
	p0 = tstbit(r6, 1<32>)
	Mem0[r6:word16] = r7
	r6 = r6 + 2<i32>
	branch p0 l00005494
	// succ:  l000053E4 l00005494
l000053E4:
	p0 = r2 == 4<32>
	r2 = r2 + 0xFFFFFFFE<32>
	branch p0 l000053FC
	goto l000053EC
	// succ:  l000053EC l000053FC
l000053E8:
	branch p0 l000053FC
	// succ:  l000053EC l000053FC
l000053EC:
	p0 = tstbit(r6, 2<32>)
	Mem0[r6:word32] = r7
	r6 = r6 + 4<i32>
	branch p0 l00005494
	// succ:  l000053F8 l00005494
l000053F8:
	p0 = r2 == 8<32>
	r2 = r2 + 0xFFFFFFFC<32>
	branch p0 l00005454
	goto l00005400
	// succ:  l00005400 l00005454
l000053FC:
	branch p0 l00005454
	// succ:  l00005400 l00005454
l00005400:
	p0 = r2 >u 0x7F<32>
	r3 = r6 & 0x1F<32>
	branch r3 == 0<32> l00005430
	// succ:  l00005408 l00005430
l00005408:
	Mem0[r6:word64] = r5_r4
	r6 = r6 + 8<i32>
	r2 = r2 + 0xFFFFFFF8<32>
	r3 = r6 & 0x1F<32>
	branch r3 == 0<32> l00005430
	// succ:  l00005418 l00005430
l00005418:
	Mem0[r6:word64] = r5_r4
	r6 = r6 + 8<i32>
	r2 = r2 + 0xFFFFFFF8<32>
	r3 = r6 & 0x1F<32>
	branch r3 == 0<32> l00005430
	// succ:  l00005428 l00005430
l00005428:
	Mem0[r6:word64] = r5_r4
	r6 = r6 + 8<i32>
	r2 = r2 + 0xFFFFFFF8<32>
	// succ:  l00005430
l00005430:
	r3 = r2 >>u 5<32>
	branch r1 != 0<32> l00005494
	// succ:  l00005438 l00005494
l00005438:
	r3 = r6
	r8 = r3
	__nyi_loop0(0x00005444<p32>, r3)
	dczeroa(r6)
	r2 = r2 + 0xFFFFFFE0<32>
	r6 = r6 + 0x20<32>
	// succ:  l00005450
l00005450:
	r8 = r2 >>u 3<32>
	branch p0 l00005468
	goto l00005458
	// succ:  l00005458 l00005468
l00005454:
	r8 = r2 >>u 3<32>
	// succ:  l00005458
l00005458:
	p0 = r2 >u -1<i32>
	__nyi_loop0(0x00005460<p32>, r8)
	Mem0[r6:word64] = r5_r4
	r6 = r6 + 8<i32>
	r2 = r2 + 0xFFFFFFF8<32>
	// succ:  l00005468
l00005468:
	branch p0 l0000547C
	// succ:  l00005470 l0000547C
l00005470:
	p0 = tstbit(r2, 2<32>)
	Mem0[r6:word32] = r7
	r6 = r6 + 4<i32>
	r2 = r2 + 0xFFFFFFFC<32>
	branch p0 l0000548C
	goto l00005480
	// succ:  l00005480 l0000548C
l0000547C:
	branch p0 l0000548C
	// succ:  l00005480 l0000548C
l00005480:
	p0 = tstbit(r2, 1<32>)
	Mem0[r6:word16] = r7
	r6 = r6 + 2<i32>
	r2 = r2 + 0xFFFFFFFE<32>
	p0 = r2 == 1<32>
	// succ:  l0000548C
l0000548C:
	Mem0[r6:byte] = r1
	// succ:  l00005490
l00005490:
	return
	// succ:  memset_exit
l00005494:
	__nyi_loop0(0x00005498<p32>, r3)
	dczeroa(r6)
	Mem0[r6 + 8<i32>:word64] = r5_r4
	Mem0[r6:word64] = r5_r4
	r6 = r6 + 16<i32>
	r2 = r2 + 0xFFFFFFE0<32>
	Mem0[r6 + 8<i32>:word64] = r5_r4
	Mem0[r6:word64] = r5_r4
	r6 = r6 + 16<i32>
	goto l00005450
	// succ:  l00005450
memset_exit:


// __libc_start_main
// Return size: 0
define __libc_start_main
__libc_start_main_entry:
	r29 = fp
	// succ:  l000054C0
l000054C0:
	v3 = r29 - 8<i32>
	Mem0[v3:word32] = r30
	Mem0[v3 + 4<i32>:word32] = r31
	r30 = v3
	r29 = v3 - 8<i32>
	Mem0[r29 + 496<i32>:word64] = r17_r16
	r16 = r3
	p0 = r1 > 0xFFFFFFFF<32>
	branch p0 l000055FC
	// succ:  l000054D0 l000055FC
l000054D0:
	branch p0 l00005500
	// succ:  l000054D4 l00005500
l000054D4:
	p0 = r1 > 0<32>
	branch p0 l00005500
	// succ:  l000054D8 l00005500
l000054D8:
	p0 = r0 == 0<32>
	r3 = Mem0[r0:byte]
	p0 = r3 == 0x20<32>
	branch p0 l00005500
	// succ:  l000054E8 l00005500
l000054E8:
	r1 = r1 + 0xFFFFFFFF<32>
	r3 = r0 + 1<32>
	r0 = r3
	branch p0 l000054D8
	// succ:  l000054FC l000054D8
l000054FC:
	p0 = r0 == -1<i32>
	goto l00005504
	// succ:  l00005504
l00005500:
	r3 = r0
	// succ:  l00005504
l00005504:
	r17 = 0<32>
	r0 = 0<32>
	branch p0 l000055C8
	// succ:  l0000550C l000055C8
l0000550C:
	p0 = r1 > 0<32>
	r5_r4 = 1<64>
	r17 = 0<32>
	r6 = 0<32>
	branch p0 l000055C8
	// succ:  l00005518 l000055C8
l00005518:
	p0 = r4 == 0<32>
	p0 = r17 > 0x63<32>
	branch p0 l000055C8
	// succ:  l00005520 l000055C8
l00005520:
	r7 = Mem0[r4:byte]
	branch p0 l0000554C
	// succ:  l0000552C l0000554C
l0000552C:
	p0 = r7 == 0<32>
	branch p0 l0000554C
	// succ:  l00005530 l0000554C
l00005530:
	p0 = r7 == 0x12<32>
	goto l000055BC
	// succ:  l000055BC
l0000554C:
	branch p0 l00005570
	// succ:  l00005550 l00005570
l00005550:
	p0 = r6 == 0<32>
	Mem0[r4:byte] = 0<32>
	p0 = r7 == 0<32>
	p1 = r4 == r3
	r6 = 0<32>
	r5 = 1<32>
	branch p1 l000055A0
	// succ:  l00005564 l000055A0
l00005564:
	p0 = !(r7 == 0<32>)
	branch p0 l000055A0
	// succ:  l0000556C l000055A0
l0000556C:
	goto l000055BC
	// succ:  l000055BC
l00005570:
	branch p0 l000055C8
	// succ:  l00005574 l000055C8
l00005574:
	p0 = r7 == 0<32>
	r3 = r4 + 1<32>
	goto l000055BC
	// succ:  l000055BC
l000055A0:
	r7 = Mem0[r3:byte]
	Mem0[0x0000E700<p32> + r17:word32] = r3
	r17 = r17 + 1<32>
	branch p0 l000055C8
	// succ:  l000055B8 l000055C8
l000055B8:
	p0 = r5 == 0<32>
	r3 = r4
	r5 = 0<32>
	// succ:  l000055BC
l000055BC:
	r1 = r1 + 0xFFFFFFFF<32>
	r4 = r4 + 1<32>
	// succ:  l000055C8
l000055C8:
	Mem0[0x0000E700<p32> + r17:word32] = r0
	branch p0 l000055D8
	// succ:  l000055D4 l000055D8
l000055D4:
	p0 = r2 == 0<32>
	call r2 (retsize: 0;)
	// succ:  l000055D8
l000055D8:
	r0 = r16 + 0<32>
	branch p0 l000055E4
	// succ:  l000055E0 l000055E4
l000055E0:
	p0 = r8 == 0<32>
	call atexit (retsize: 0;)
	// succ:  l000055E4
l000055E4:
	r2 = 0xE440<32>
	call main (retsize: 0;)
	call exit (retsize: 0;)
	// succ:  l000055FC
l000055FC:
	v12 = r30
	r31 = Mem0[v12 + 4<i32>:word32]
	r30 = Mem0[v12:word32]
	r29 = v12 + 8<i32>
	return
	// succ:  __libc_start_main_exit
__libc_start_main_exit:


// hexagon_cache_cleaninv
// Return size: 0
define hexagon_cache_cleaninv
hexagon_cache_cleaninv_entry:
	r29 = fp
	// succ:  l00005610
l00005610:
	r2 = r0 & 0x1F<32>
	r2 = r2 + (r1 + 0x1F<32>)
	r1 = r2 >>u 5<32>
	r4 = r0
	r3 = 0<32>
	r1 = r1 << 5<32>
	r3 = r3 - (r2 >>u 5<32>)
	r2 = 0<32> - r3
	__nyi_loop0(0x00005634<p32>, r2)
	r2 = r4 + 0x20<32>
	dccleaninva(r4)
	r4 = r2
	r0 = r0 + r1
	r0 = r0 + 0xFFFFFFE0<32>
	r1 = Mem0[r0:int8]
	dccleaninva(r0)
	return
	// succ:  hexagon_cache_cleaninv_exit
hexagon_cache_cleaninv_exit:


// hexagon_cache_inva
// Return size: 0
define hexagon_cache_inva
hexagon_cache_inva_entry:
	r29 = fp
	// succ:  l00005658
l00005658:
	r2 = r0 & 0x1F<32>
	r2 = r2 + (r1 + 0x1F<32>)
	r1 = r2 >>u 5<32>
	r1 = 0<32>
	r1 = r1 - (r2 >>u 5<32>)
	r1 = 0<32> - r1
	__nyi_loop0(0x00005678<p32>, r1)
	r1 = r0 + 0x20<32>
	dcinva(r0)
	r0 = r1
	return
	// succ:  hexagon_cache_inva_exit
hexagon_cache_inva_exit:


// __registerx
// Return size: 0
define __registerx
__registerx_entry:
	r29 = fp
	// succ:  l00005690
l00005690:
	v3 = r29 - 8<i32>
	Mem0[v3:word32] = r30
	Mem0[v3 + 4<i32>:word32] = r31
	r30 = v3
	r29 = v3 - 16<i32>
	Mem0[r29 + 496<i32>:word64] = r17_r16
	r17_r16 = r1_r0
	Mem0[r29:word64] = r19_r18
	p0 = r16 == 0<32>
	r19_r18 = r4_r3
	branch p0 l000056D0
	// succ:  l000056A4 l000056D0
l000056A4:
	branch r0 == 0<32> l000056D4
	// succ:  l000056B0 l000056D4
l000056B0:
	r0 = Mem0[r16:word32]
	r1_r0 = 0x1800000001<64>
	Mem0[r0 + 12<i32>:word32] = r18
	branch p0 l000056D8
	// succ:  l000056BC l000056D8
l000056BC:
	p0 = r0 == 0<32>
	Mem0[r0 + 20<i32>:word32] = 0<32>
	Mem0[r0 + 8<i32>:word32] = r17
	Mem0[r0 + 16<i32>:word32] = r19
	Mem0[r0 + 4<i32>:word32] = r16
	r1 = Mem0[gp + 116<i32>:word32]
	Mem0[gp:word32] = r0
	// succ:  l000056D0
l000056D0:
	r19_r18 = Mem0[r29:word64]
	r17_r16 = Mem0[r29 + 8<i32>:word64]
	// succ:  l000056D4
l000056D4:
	v20 = r30
	r31 = Mem0[v20 + 4<i32>:word32]
	r30 = Mem0[v20:word32]
	r29 = v20 + 8<i32>
	return
	// succ:  __registerx_exit
l000056D8:
	call abort (retsize: 0;)
	// succ:  l000056D8_thunk___register_frame_info_bases
l000056D8_thunk___register_frame_info_bases:
	call __register_frame_info_bases (retsize: 0;)
	return
	// succ:  __registerx_exit
__registerx_exit:


// __register_frame_info_bases
// Return size: 0
define __register_frame_info_bases
__register_frame_info_bases_entry:
	r29 = fp
	// succ:  l000056E0
l000056E0:
	v3 = r29 - 8<i32>
	Mem0[v3:word32] = r30
	Mem0[v3 + 4<i32>:word32] = r31
	r30 = v3
	r29 = v3 - 16<i32>
	Mem0[r29 + 496<i32>:word64] = r17_r16
	r17_r16 = r2_r0
	Mem0[r29:word64] = r19_r18
	p0 = r16 == 0<32>
	r18 = r3
	branch p0 l00005720
	// succ:  l000056F4 l00005720
l000056F4:
	branch r0 == 0<32> l00005724
	// succ:  l00005700 l00005724
l00005700:
	r0 = Mem0[r16:word32]
	r1_r0 = 0x1800000001<64>
	Mem0[r0 + 12<i32>:word32] = r17
	branch p0 l00005728
	// succ:  l0000570C l00005728
l0000570C:
	p0 = r0 == 0<32>
	Mem0[r0 + 20<i32>:word32] = 0<32>
	Mem0[r0 + 8<i32>:word32] = 0<32>
	Mem0[r0 + 16<i32>:word32] = r18
	Mem0[r0 + 4<i32>:word32] = r16
	r1 = Mem0[gp + 116<i32>:word32]
	Mem0[gp:word32] = r0
	// succ:  l00005720
l00005720:
	r19_r18 = Mem0[r29:word64]
	r17_r16 = Mem0[r29 + 8<i32>:word64]
	// succ:  l00005724
l00005724:
	v19 = r30
	r31 = Mem0[v19 + 4<i32>:word32]
	r30 = Mem0[v19:word32]
	r29 = v19 + 8<i32>
	return
	// succ:  __register_frame_info_bases_exit
l00005728:
	call abort (retsize: 0;)
	// succ:  l00005728_thunk___deregister_frame_info_bases
l00005728_thunk___deregister_frame_info_bases:
	call __deregister_frame_info_bases (retsize: 0;)
	return
	// succ:  __register_frame_info_bases_exit
__register_frame_info_bases_exit:


// __deregister_frame_info_bases
// Return size: 0
define __deregister_frame_info_bases
__deregister_frame_info_bases_entry:
	r29 = fp
	// succ:  l00005730
l00005730:
	v3 = r29 - 8<i32>
	Mem0[v3:word32] = r30
	Mem0[v3 + 4<i32>:word32] = r31
	r30 = v3
	r29 = v3 - 0<i32>
	branch p0 l0000576C
	// succ:  l00005738 l0000576C
l00005738:
	p0 = r0 == 0<32>
	r1 = Mem0[r0:word32]
	r1 = 0x10074<32>
	r2 = r1
	r1 = Mem0[r2:word32]
	r3 = Mem0[r1 + 4<i32>:word32]
	r3 = Mem0[r1:word32]
	r0 = r1
	call free (retsize: 0;)
	// succ:  l0000576C
l0000576C:
	v11 = r30
	r31 = Mem0[v11 + 4<i32>:word32]
	r30 = Mem0[v11:word32]
	r29 = v11 + 8<i32>
	return
	// succ:  __deregister_frame_info_bases_exit
__deregister_frame_info_bases_exit:


// _Printf
// Return size: 0
define _Printf
_Printf_entry:
	r29 = fp
	// succ:  l00005770
l00005770:
	v3 = r29 - 8<i32>
	Mem0[v3:word32] = r30
	Mem0[v3 + 4<i32>:word32] = r31
	r30 = v3
	r29 = v3 - 200<i32>
	call __save_r16_through_r25 (retsize: 0;)
	r5_r4 = 0<64>
	r1 = r3
	r0 = r29 + 0x54<32>
	r19_r18 = r1_r0
	Mem0[r29 + 88<i32>:word64] = r5_r4
	r21 = r29 + 0x60<32>
	r24 = 0x3E8<32>
	r23 = 0x3E7<32>
	r22 = r29 + 0x50<32>
	call _Vacopy (retsize: 0;)
	Mem0[r21 + 12<i32>:word32] = r19
	Mem0[r21 + 8<i32>:word32] = r18
	r25 = 0xD088<32>
	Mem0[r21 + 52<i32>:word32] = 0xFFFFFF80<32>
	// succ:  l000057B8
l000057B8:
	r1 = r17
	r0 = r29 + 0x50<32>
	r2 = r16
	r3 = r29 + 0x58<32>
	Mem0[r22:word32] = 0<32>
	call _Mbtowc (retsize: 0;)
	branch r18 > 0<32> l000057E0
	// succ:  l000057D8 l000057E0
l000057D8:
	r18 = r0
	r18 = !(r0 == 0<32>)
	r0 = Mem0[r29 + 80<i32>:word32]
	// succ:  l000057E0
l000057E0:
	r1 = 0<32>
	r1 = 0xFFFFFFFF<32>
	p0 = r0 == 0x25<32>
	r19 = r1 + r18
	r3 = Mem0[r21 + 8<i32>:word32]
	r0 = Mem0[r21 + 12<i32>:word32]
	r2 = r19
	r1 = r17
	call r3 (retsize: 0;)
	r20 = 0xFFFFFFFF<32>
	Mem0[r21 + 12<i32>:word32] = r0
	branch p0 l00005ABC
	// succ:  l00005810 l00005ABC
l00005810:
	p0 = r16 == 0<32>
	r0 = Mem0[r21 + 52<i32>:word32]
	Mem0[r21 + 13<i32>:byte] = r0
	r0 = r0 + r19
	p0 = r0 == 0x25<32>
	r17 = r17 + r18
	branch p0 l00005AA4
	// succ:  l0000582C l00005AA4
l0000582C:
	Mem0[r21 + 44<i32>:word32] = 0<32>
	r19_r18 = 0<64>
	// succ:  l00005830
l00005830:
	r20 = Mem0[r18:byte]
	call _Getpctype (retsize: 0;)
	r0 = Mem0[r13 + r20 * 2<32>:byte]
	branch r0 == 0<32> l00005860
	// succ:  l00005848 l00005860
l00005848:
	r0 = r0 & 0x20<32>
	r18 = r18 + 1<i32>
	r19 = Mem0[r18:byte]
	r19 = r19 + (r0 + 0xFFFFFFD0<32>)
	Mem0[r21 + 44<i32>:word32] = r19
	p0 = r24 > r19
	branch p0 l00005830
	// succ:  l0000585C l00005830
l0000585C:
	r0 = Mem0[r18:byte]
	// succ:  l00005860
l00005860:
	p0 = r0 == 0x24<32>
	branch p0 l0000587C
	// succ:  l00005868 l0000587C
l00005868:
	r0 = r19
	r18 = r18
	Mem0[r21 + 44<i32>:word32] = 0<32>
	r18 = r17 + 0<32>
	p0 = r23 >u r0
	goto l00005880
	// succ:  l00005880
l0000587C:
	Mem0[r21 + 44<i32>:word32] = 0<32>
	r18 = r17
	// succ:  l00005880
l00005880:
	Mem0[r21 + 60<i32>:word16] = 0<16>
	Mem0[r21 + 36<i32>:word32] = 0xFFFFFF80<32>
	r2 = 5<32>
	Mem0[r21 + 20<i32>:word32] = 0<32>
	Mem0[r21 + 40<i32>:word32] = 0<32>
	r0 = 0xD088<32>
	Mem0[r21 + 28<i32>:word32] = 0<32>
	Mem0[r21 + 24<i32>:word32] = 0<32>
	Mem0[r21 + 32<i32>:word32] = 0<32>
	r1 = Mem0[r18:byte]
	call memchr (retsize: 0;)
	branch p0 l000058E4
	// succ:  l000058AC l000058E4
l000058AC:
	p0 = r0 == 0<32>
	r18 = r18 + 1<32>
	goto l000058BC
	// succ:  l000058BC
l000058B4:
	r1 = Mem0[r21 + 60<i32>:word16]
	r18 = r18 + 1<32>
	// succ:  l000058BC
l000058BC:
	r2 = 5<32>
	r0 = r0 - r25
	r0 = Mem0[0x0000D098<p32> + r0:word32]
	Mem0[r21 + 30<i32>:byte] = r0
	r0 = r1 | r0
	r1 = Mem0[r18:byte]
	r0 = 8<32>
	branch p0 l000058B4
	// succ:  l000058E4 l000058B4
l000058E4:
	p0 = r16 == 1<32>
	r0 = Mem0[r18:byte]
	Mem0[r21 + 56<i32>:word32] = 0<32>
	p0 = r0 == 0x2A<32>
	branch p0 l00005928
	// succ:  l000058F4 l00005928
l000058F4:
	r0 = Mem0[r29 + 84<i32>:word32]
	r1 = r0 + 4<32>
	r0 = Mem0[r0:word32]
	Mem0[r21 + 56<i32>:word32] = r0
	r1 = Mem0[r21 + 60<i32>:int16]
	branch p0 l00005920
	// succ:  l00005910 l00005920
l00005910:
	p0 = tstbit(r0, 0<32>)
	r0 = 0<32> - r0
	r1 = setbit(r1, 4<32>)
	Mem0[r21 + 56<i32>:word32] = r0
	Mem0[r21 + 60<i32>:word16] = r1
	// succ:  l00005920
l00005920:
	r18 = r18 + 1<32>
	goto l00005964
	// succ:  l00005964
l00005928:
	r17 = Mem0[r18:byte]
	call _Getpctype (retsize: 0;)
	goto l0000593C
	// succ:  l0000593C
l00005938:
	r17 = Mem0[r18 + 1<i32>:byte]
	r18 = r18
	// succ:  l0000593C
l0000593C:
	r0 = Mem0[r13 + r17 * 2<32>:byte]
	branch r0 == 0<32> l00005968
	// succ:  l0000594C l00005968
l0000594C:
	r0 = r0 & 0x20<32>
	branch r0 == r16 l00005938
	// succ:  l00005954 l00005938
l00005954:
	r1 = Mem0[r18:byte]
	goto l00005938
	// succ:  l00005938
l00005964:
	r0 = Mem0[r18:byte]
	// succ:  l00005968
l00005968:
	Mem0[r21 + 48<i32>:word32] = 0xFFFFFFFF<32>
	p0 = r0 == 0x2E<32>
	branch p0 l0000599C
	// succ:  l00005974 l0000599C
l00005974:
	r0 = Mem0[r18 + 1<i32>:byte]
	Mem0[r21 + 48<i32>:word32] = 0<32>
	p0 = r0 == 0x2A<32>
	branch p0 l000059A0
	// succ:  l00005984 l000059A0
l00005984:
	r0 = Mem0[r29 + 84<i32>:word64]
	r18 = r18 + 2<32>
	r1 = r0 + 4<32>
	Mem0[r21 + 12<i32>:byte] = r0
	r0 = Mem0[r0:word32]
	goto l000059E4
	// succ:  l000059E4
l0000599C:
	goto l000059E4
	// succ:  l000059E4
l000059A0:
	r17 = Mem0[r18 + 1<i32>:byte]
	call _Getpctype (retsize: 0;)
	r0 = Mem0[r13 + r17 * 2<32>:byte]
	r18 = r18 + 1<32>
	goto l000059C0
	// succ:  l000059C0
l000059B8:
	r17 = Mem0[r18 + 1<i32>:byte]
	r18 = r18
	r0 = Mem0[r13 + r17 * 2<32>:byte]
	// succ:  l000059C0
l000059C0:
	branch r0 == 0<32> l000059E8
	// succ:  l000059CC l000059E8
l000059CC:
	r0 = r0 & 0x20<32>
	branch r0 == r16 l000059B8
	// succ:  l000059D4 l000059B8
l000059D4:
	r1 = Mem0[r18:byte]
	goto l000059B8
	// succ:  l000059B8
l000059E4:
	r1 = Mem0[r18:byte]
	r0 = 0x30<32>
	call strchr (retsize: 0;)
	// succ:  l000059E8
l000059E8:
	Mem0[r21 - 2<i32>:byte] = 0<8>
	r17 = r18 + 0<32>
	branch p0 l00005A00
	// succ:  l000059FC l00005A00
l000059FC:
	p0 = r0 == 0<32>
	goto l00005A50
	// succ:  l00005A50
l00005A00:
	Mem0[r21 + 62<i32>:byte] = r0
	r17 = r17 + 1<i32>
	r0 = Mem0[r17:byte]
	r0 = Mem0[r17:byte]
	p0 = r0 == 0x6C<32>
	p0 = r0 == 0x6C<32>
	r17 = r18 + 2<32>
	branch p0 l00005A50
	// succ:  l00005A20 l00005A50
l00005A20:
	Mem0[r21 - 2<i32>:byte] = 0x71<8>
	// succ:  l00005A50
l00005A50:
	branch r0 > 0<32> l00005A84
	// succ:  l00005A5C l00005A84
l00005A5C:
	r0 = Mem0[r21 + 44<i32>:word32]
	r0 = r29 + 4<32>
	r1 = Mem0[r29 + 84<i32>:word32]
	call _Vacopy (retsize: 0;)
	r2 = Mem0[r17:byte]
	r0 = r29 + 0x60<32>
	r3 = r29 + 8<32>
	r1 = r29 + 4<32>
	goto l00005A8C
	// succ:  l00005A8C
l00005A84:
	r2 = Mem0[r17:byte]
	r3 = r29 + 8<32>
	r0 = r29 + 0x60<32>
	// succ:  l00005A8C
l00005A8C:
	call _Putfld (retsize: 0;)
	branch p0 l00005AB8
	// succ:  l00005A94 l00005AB8
l00005A94:
	p0 = r0 == 0<32>
	r0 = r29 + 0x60<32>
	r1 = r29 + 8<32>
	call _Puttxt (retsize: 0;)
	goto l00005AB8
	// succ:  l00005AB8
l00005AA4:
	r0 = r29 + 0x60<32>
	branch p0 l000057B8
	// succ:  l00005AAC l000057B8
l00005AAC:
	p0 = r0 == 1<32>
	r20 = Mem0[r0 + 52<i32>:word32]
	// succ:  l00005AB0_thunk_fn00005B40
l00005AB0_thunk_fn00005B40:
	call fn00005B40 (retsize: 0;)
	return
	// succ:  _Printf_exit
l00005AB8:
	r20 = 0xFFFFFFFF<32>
	// succ:  l00005ABC
l00005ABC:
	// succ:  l00005ABC_thunk_fn00005B1C
l00005ABC_thunk_fn00005B1C:
	call fn00005B1C (retsize: 0;)
	return
	// succ:  _Printf_exit
_Printf_exit:


// _Putfld
// Return size: 0
define _Putfld
_Putfld_entry:
	r29 = fp
	// succ:  l00005AD0
l00005AD0:
	v3 = r29 - 8<i32>
	Mem0[v3:word32] = r30
	Mem0[v3 + 4<i32>:word32] = r31
	r30 = v3
	r29 = v3 - 16<i32>
	Mem0[r29 + 496<i32>:word64] = r17_r16
	r16 = r0
	p0 = r2 >u 0x40<32>
	branch p0 l00005B00
	// succ:  l00005AE0 l00005B00
l00005AE0:
	r0 = Mem0[r16 + 20<i32>:word32]
	p0 = r2 == 0x25<32>
	branch p0 l00005C48
	// succ:  l00005AEC l00005C48
l00005AEC:
	r0 = r3 + r0
	r1 = r0 + 1<32>
	Mem0[r0:byte] = 0x25<8>
	// succ:  l00005AF8_thunk_fn00005B1C
l00005AF8_thunk_fn00005B1C:
	call fn00005B1C (retsize: 0;)
	return
	// succ:  _Putfld_exit
l00005B00:
	p0 = r2 >u 0x52<32>
	branch p0 l00005B60
	// succ:  l00005B08 l00005B60
l00005B08:
	branch r0 >u 0xD<32> l00005C4C
	goto l00005B14
	// succ:  l00005B14 l00005B08_thunk_fn00005B1C
l00005B08_thunk_fn00005B1C:
	call fn00005B1C (retsize: 0;)
	return
	// succ:  _Putfld_exit
l00005B14:
	r0 = r2 + 0xFFFFFFBF<32>
	branch r0 == 1<32> l00005C4C
l00005B60:
	p0 = r2 >u 0x57<32>
	r0 = r2 + 0xFFFFFFA8<32>
	branch p0 l00005B8C
	// succ:  l00005B6C l00005B8C
l00005B6C:
	p0 = r2 == 0x53<32>
	r2 = r16 + 0x2C<32>
	branch p0 l00005C48
	// succ:  l00005B78 l00005C48
l00005B78:
	Mem0[r16 - 2<i32>:byte] = 0x6C<8>
	r3 = Mem0[r16 + 44<i32>:word32]
	r0 = 0<32>
	goto l00005EC4
	// succ:  l00005EC4
l00005B8C:
	p0 = r0 >u 0x20<32>
	branch p0 l00005C48
	// succ:  l00005B94 l00005C48
l00005B94:
	r4 = Mem0[gp + 120<i32>:word32]
	r0 = Mem0[r14 + r0 * 4<32>:word32]
	call r0 (retsize: 0;)
	return
	// succ:  _Putfld_exit
l00005C48:
	r0 = Mem0[r16 + 20<i32>:word32]
	p0 = r2 == 0<32>
	// succ:  l00005C48_thunk_fn00005B1C
l00005C48_thunk_fn00005B1C:
	call fn00005B1C (retsize: 0;)
	return
	// succ:  _Putfld_exit
l00005EC4:
	r1_r0 = r0_r16
	call _Putstr (retsize: 0;)
	p0 = r0 > 0xFFFFFFFF<32>
	r1 = 0xFFFFFFFF<32>
	r1 = 0<32>
	// succ:  l00005ED4_thunk_fn00005B24
l00005ED4_thunk_fn00005B24:
	call fn00005B24 (retsize: 0;)
	return
	// succ:  _Putfld_exit
_Putfld_exit:


// fn00005B1C
// Return size: 0
define fn00005B1C
fn00005B1C_entry:
	r29 = fp
	// succ:  l00005B1C
l00005B1C:
	branch tstbit(r0, -1<i32>) l00005B1C_thunk_fn00005C7C
	goto l00005B1C_thunk_fn00005B28
	// succ:  l00005B1C_thunk_fn00005B28 l00005B1C_thunk_fn00005C7C
l00005B1C:
	// succ:  l00005B20 l00005C4C
l00005B1C_thunk_fn00005B28:
	call fn00005B28 (retsize: 0;)
	return
	// succ:  fn00005B1C_exit
l00005B1C_thunk_fn00005C7C:
	call fn00005C7C (retsize: 0;)
	return
	// succ:  fn00005B1C_exit
l00005B20:
	r0 = r0 & 0x71<32>
	branch tstbit(r0, -1<i32>) l00005C7C
l00005C4C:
	r0 = r3 + r0
	r1 = r0 + 1<32>
	Mem0[r0:byte] = 0x25<8>
	branch p0 l00005CFC
	// succ:  l00005C60 l00005CFC
l00005C60:
	r0 = Mem0[r16 + 20<i32>:word32]
	r0 = r3 + r0
	r1 = r0 + 1<32>
	Mem0[r0:byte] = r2
	// succ:  l00005CFC
l00005CFC:
	r1 = 0<32>
	// succ:  l00005CFC_thunk_fn00005B24
l00005CFC_thunk_fn00005B24:
	call fn00005B24 (retsize: 0;)
	return
	// succ:  fn00005B1C_exit
fn00005B1C_exit:


// fn00005B24
// Return size: 0
define fn00005B24
fn00005B24_entry:
	r29 = fp
	// succ:  l00005B24
l00005B24:
	r0 = Mem0[r1:word32]
	// succ:  l00005B24_thunk_fn00005B28 l00005B24_thunk_fn00005C7C
l00005B24_thunk_fn00005B28:
	call fn00005B28 (retsize: 0;)
	return
	// succ:  fn00005B24_exit
l00005B24_thunk_fn00005C7C:
	call fn00005C7C (retsize: 0;)
	return
	// succ:  fn00005B24_exit
fn00005B24_exit:


// fn00005B28
// Return size: 0
define fn00005B28
fn00005B28_entry:
	r29 = fp
	// succ:  l00005B28
l00005B28:
	r0 = r0 + 7<32>
	r0 = r0 & 0xFFFFFFF8<32>
	Mem0[r1:byte] = r4
	r4 = r0 + 8<32>
	r5_r4 = Mem0[r0:word64]
	// succ:  l00005B3C_thunk_fn00005B40
l00005B3C_thunk_fn00005B40:
	call fn00005B40 (retsize: 0;)
	return
	// succ:  fn00005B28_exit
fn00005B28_exit:


// fn00005B40
// Return size: 0
define fn00005B40
fn00005B40_entry:
	r29 = fp
	// succ:  l00005B40
l00005B40:
	Mem0[r16:word64] = r5_r4
	p0 = r6 > 0<32>
	r0 = r6 + 0xFFFFFFFF<32>
	Mem0[r16 + 44<i32>:word32] = r0
	branch p0 l00005B4C_thunk_fn00005B24
	goto l00005B4C_thunk_fn00005B54
	// succ:  l00005B4C_thunk_fn00005B54 l00005B4C_thunk_fn00005B24
l00005B40:
	Mem0[r16:word64] = r5_r4
	p0 = r6 > 0<32>
	r0 = r6 + 0xFFFFFFFF<32>
	Mem0[r16 + 44<i32>:word32] = r0
	branch p0 l00005B24
	goto l00005B4C_thunk_fn00005B54
	// succ:  l00005B4C_thunk_fn00005B54 l00005B4C_thunk_fn00005B24
l00005B4C_thunk_fn00005B24:
	call fn00005B24 (retsize: 0;)
	return
	// succ:  fn00005B40_exit
l00005B4C_thunk_fn00005B24:
	call fn00005B24 (retsize: 0;)
	return
	// succ:  fn00005B40_exit
l00005B4C_thunk_fn00005B54:
	call fn00005B54 (retsize: 0;)
	return
	// succ:  fn00005B40_exit
l00005B4C_thunk_fn00005B54:
	call fn00005B54 (retsize: 0;)
	return
	// succ:  fn00005B40_exit
fn00005B40_exit:


// fn00005B54
// Return size: 0
define fn00005B54
fn00005B54_entry:
	r29 = fp
	goto l00005B54_thunk_fn00005B24
	// succ:  l00005B54_thunk_fn00005B24
l00005B54:
	r1_r0 = r5_r4
	goto l00005C80
	// succ:  l00005C80
l00005B54_thunk_fn00005B24:
	call fn00005B24 (retsize: 0;)
	return
	// succ:  fn00005B54_exit
l00005C80:
	branch tstbit(r0, -1<i32>) l00005CB4
	// succ:  l00005C88 l00005CB4
l00005C88:
	branch r0 == 0<32> l00005CD4
	// succ:  l00005C98 l00005CD4
l00005C98:
	r0 = r1 & 2<32>
	p0 = tstbit(r1, 0<32>)
	r1 = Mem0[r16 + 20<i32>:word32]
	Mem0[r16 + 5<i32>:byte] = r4
	r1 = r3 + r1
	r4 = r1 + 1<32>
	Mem0[r1:byte] = 0x2B<8>
	r1 = Mem0[r16 + 20<i32>:word32]
	r0 = r16 + 0x14<32>
	goto l00005CB8
	// succ:  l00005CB8
l00005CB4:
	r1 = Mem0[r16 + 20<i32>:word32]
	// succ:  l00005CB8
l00005CB8:
	Mem0[r16 + 5<i32>:byte] = r4
	r1 = r3 + r1
	r4 = r1 + 1<32>
	Mem0[r1:byte] = 0x2D<8>
	r1 = Mem0[r16 + 20<i32>:word32]
	r0 = r16 + 0x14<32>
	branch p0 l00005CE8
	goto l00005CD8
	// succ:  l00005CD8 l00005CE8
l00005CD4:
	r1 = Mem0[r16 + 20<i32>:word32]
	// succ:  l00005CD8
l00005CD8:
	Mem0[r16 + 5<i32>:byte] = r4
	r1 = r3 + r1
	r4 = r1 + 1<32>
	// succ:  l00005CE8
l00005CE8:
	r4 = Mem0[r0:word32]
	r1_r0 = r2_r16
	Mem0[r16 + 4<i32>:byte] = r2
	r2 = r3 + r4
	call _Ldtob (retsize: 0;)
	// succ:  l00005D00
l00005D00:
	v14 = r30
	r31 = Mem0[v14 + 4<i32>:word32]
	r30 = Mem0[v14:word32]
	r29 = v14 + 8<i32>
	return
	// succ:  fn00005B54_exit
fn00005B54_exit:


// fn00005C7C
// Return size: 0
define fn00005C7C
fn00005C7C_entry:
	r29 = fp
	// succ:  l00005C7C
l00005C7C:
	branch tstbit(r0, -1<i32>) l00005CB4
	// succ:  l00005C7C_thunk_fn00005B54 l00005C7C_thunk_fn00005B54
l00005C7C_thunk_fn00005B54:
	call fn00005B54 (retsize: 0;)
	return
	// succ:  fn00005C7C_exit
l00005C7C_thunk_fn00005B54:
	call fn00005B54 (retsize: 0;)
	return
	// succ:  fn00005C7C_exit
fn00005C7C_exit:


// _Putstr
// Return size: 0
define _Putstr
_Putstr_entry:
	r29 = fp
	// succ:  l00006200
l00006200:
	v3 = r29 - 8<i32>
	Mem0[v3:word32] = r30
	Mem0[v3 + 4<i32>:word32] = r31
	r30 = v3
	r29 = v3 - 112<i32>
	call __save_r16_through_r23 (retsize: 0;)
	r23_r22 = 0<64>
	r18 = r1
	r17 = r0
	r19 = Mem0[r17 + 24<i32>:word32]
	r20 = Mem0[r17 + 16<i32>:word32]
	call _Getmbcurmax (retsize: 0;)
	Mem0[r29:word64] = r23_r22
	r19 = r19 + r0
	r22 = 0x40<32>
	r16 = r29 + 0x10<32>
	r1 = Mem0[r17 + 60<i32>:byte]
	r1 = r1 & 4<32>
	r1 = 0x41<32>
	r22 = r19
	r0 = r19
	r21 = 0xFFFFFFFF<32>
	call malloc (retsize: 0;)
	branch r16 == 0<32> l00006314
	// succ:  l00006250 l00006314
l00006250:
	r16 = r0
	r0 = 0x7FFFFFFF<32>
	r23 = p0 ? r20 : r0
	r21 = -1<i32>
	r19 = 0<32>
	r1 = Mem0[r18:word32]
	r0 = r29 + 8<32>
	r2 = r29 + 0<32>
	call _Wctomb (retsize: 0;)
	branch tstbit(r20, -1<i32>) l00006304
	// succ:  l0000627C l00006304
l0000627C:
	r20 = r0
	branch r0 == 0<32> l0000628C
	// succ:  l00006284 l0000628C
l00006284:
	branch tstbit(r20, -1<i32>) l00006304
	// succ:  l0000628C l00006304
l0000628C:
	r0 = Mem0[r17 + 20<i32>:word32]
	r1 = r0 + r20
	Mem0[r17 + 56<i32>:word32] = 0<32>
	r1_r0 = r16_r17
	call _Puttxt (retsize: 0;)
	r19 = r0
	Mem0[r17 + 20<i32>:word32] = 0<32>
	r0 = 0<32>
	r0 = r0 + r16
	r1 = r29 + 8<32>
	r2 = r20
	call memcpy (retsize: 0;)
	r0 = Mem0[r17 + 20<i32>:word32]
	Mem0[r17 + 5<i32>:byte] = r0
	r0 = r0 + r20
	branch r0 == 0<32> l000062E4
	// succ:  l000062D8 l000062E4
l000062D8:
	r0 = Mem0[r18:word32]
	r21 = r19
	branch p0 l00006300
	// succ:  l000062E4 l00006300
l000062E4:
	p0 = r11 == 0<32>
	r1_r0 = r16_r17
	call _Puttxt (retsize: 0;)
	r21 = r0
	Mem0[r17 + 20<i32>:word32] = 0<32>
	Mem0[r17 + 56<i32>:word32] = 0<32>
	r21 = 0<32>
	p0 = r21 == 0<32>
	// succ:  l00006300
l00006300:
	branch r0 == r16 l00006314
	goto l0000630C
	// succ:  l0000630C l00006314
l00006304:
	branch r0 == r16 l00006314
	// succ:  l0000630C l00006314
l0000630C:
	r0 = r29 + 0x10<32>
	r0 = r16
	// succ:  l00006310_thunk_fn000063D0
l00006310_thunk_fn000063D0:
	call fn000063D0 (retsize: 0;)
	return
	// succ:  _Putstr_exit
l00006314:
	// succ:  l00006314_thunk_fn000063D4
l00006314_thunk_fn000063D4:
	call fn000063D4 (retsize: 0;)
	return
	// succ:  _Putstr_exit
_Putstr_exit:


// _Puttxt
// Return size: 0
define _Puttxt
_Puttxt_entry:
	r29 = fp
	// succ:  l00006320
l00006320:
	v3 = r29 - 8<i32>
	Mem0[v3:word32] = r30
	Mem0[v3 + 4<i32>:word32] = r31
	r30 = v3
	r29 = v3 - 32<i32>
	call __save_r16_through_r23 (retsize: 0;)
	r17_r16 = r1_r0
	r2 = Mem0[r16 + 20<i32>:word32]
	r3 = Mem0[r16 + 24<i32>:word32]
	r4 = Mem0[r16 + 28<i32>:word32]
	r0 = Mem0[r16 + 24<i32>:word32]
	r3 = r3 - r2
	r0 = Mem0[r16 + 4<i32>:word32]
	r3 = Mem0[r16:word32]
	r5 = r3 - r0
	r5 = Mem0[r16 + 60<i32>:word16]
	r4 = r5 - r4
	r3 = Mem0[r16 + 40<i32>:word32]
	r4 = r4 - r3
	r0 = r4 - r0
	r5 = r5 & 4<32>
	r20 = r0 - r3
	branch p0 l000063A4
	// succ:  l00006364 l000063A4
l00006364:
	p0 = r12 > 0<32>
	r22 = r20
	r21 = 0x20<32>
	r19 = minu(r22, r21)
	// succ:  l0000636C
l0000636C:
	r3 = Mem0[r16 + 8<i32>:word32]
	r0 = Mem0[r16 + 12<i32>:word32]
	r1 = 0xD140<32>
	r18 = -1<i32>
	r2 = r19
	call r3 (retsize: 0;)
	Mem0[r16 + 12<i32>:word32] = r0
	branch p0 l0000654C
	goto l0000638C
	// succ:  l0000638C l00006380_thunk_fn000063D8
l00006380_thunk_fn000063D8:
	call fn000063D8 (retsize: 0;)
	return
	// succ:  _Puttxt_exit
l0000638C:
	p0 = r0 == 1<32>
	r0 = Mem0[r16 + 52<i32>:word32]
	Mem0[r16 + 13<i32>:byte] = r0
	r0 = r0 + r19
	branch r22 > 1<32> l0000636C
	// succ:  l000063A4 l0000636C
l000063A4:
	branch p0 l000063CC
	// succ:  l000063A8 l000063CC
l000063A8:
	p0 = r2 > 0<32>
	r3 = Mem0[r16 + 8<i32>:word32]
	r0 = Mem0[r16 + 12<i32>:word32]
	r18 = 0xFFFFFFFF<32>
	r1 = r17
	call r3 (retsize: 0;)
	Mem0[r16 + 12<i32>:word32] = r0
	branch p0 l0000654C
	goto l000063C0
	// succ:  l000063C0 l000063BC_thunk_fn000063D8
l000063BC_thunk_fn000063D8:
	call fn000063D8 (retsize: 0;)
	return
	// succ:  _Puttxt_exit
l000063C0:
	p0 = r0 == 1<32>
	r1 = Mem0[r16 + 20<i32>:word32]
	r0 = Mem0[r16 + 20<i32>:word32]
	Mem0[r16 + 13<i32>:byte] = r0
	r0 = r0 + r1
	goto l000063CC_thunk_fn000063D0
	// succ:  l000063CC_thunk_fn000063D0
l000063CC:
	r19 = Mem0[r16 + 24<i32>:word32]
	r21 = 0x20<32>
	goto l000063CC_thunk_fn000063D8
	// succ:  l000063CC_thunk_fn000063D8
l000063CC_thunk_fn000063D0:
	call fn000063D0 (retsize: 0;)
	return
	// succ:  _Puttxt_exit
l000063CC_thunk_fn000063D8:
	call fn000063D8 (retsize: 0;)
	return
	// succ:  _Puttxt_exit
_Puttxt_exit:


// fn000063D0
// Return size: 0
define fn000063D0
fn000063D0_entry:
	r29 = fp
	// succ:  l000063D0
l000063D0:
	r19 = Mem0[r16 + 24<i32>:word32]
fn000063D0_exit:


// fn000063D4
// Return size: 0
define fn000063D4
fn000063D4_entry:
	r29 = fp
	// succ:  l000063D4
l000063D4:
	goto l000063D4_thunk_fn000063D8
	// succ:  l000063D4_thunk_fn000063D8
l000063D4:
	call fn000063D8 (retsize: 0;)
	return
	// succ:  l000063D4_thunk_fn000063D8 fn000063D4_exit
l000063D4_thunk_fn000063D8:
	call fn000063D8 (retsize: 0;)
	return
	// succ:  fn000063D4_exit
l000063D4_thunk_fn000063D8:
	call fn000063D8 (retsize: 0;)
	return
	// succ:  fn000063D4_exit
fn000063D4_exit:


// fn000063D8
// Return size: 0
define fn000063D8
fn000063D8_entry:
	r29 = fp
	// succ:  l000063D8
l000063D8:
	r17 = minu(r19, r21)
	r3 = Mem0[r16 + 8<i32>:word32]
	r0 = Mem0[r16 + 12<i32>:word32]
	r1 = 0xD168<32>
	r18 = -1<i32>
	r2 = r17
	call r3 (retsize: 0;)
	Mem0[r16 + 12<i32>:word32] = r0
	branch p0 l0000654C
	// succ:  l000063FC l0000654C
l000063FC:
	p0 = r0 == 1<32>
	r0 = Mem0[r16 + 52<i32>:word32]
	Mem0[r16 + 13<i32>:byte] = r0
	r0 = r0 + r17
	branch r2 > 0<32> l00006440
	// succ:  l0000641C l00006440
l0000641C:
	r2 = Mem0[r16 + 28<i32>:word32]
	r1 = Mem0[r16 + 16<i32>:word32]
	r0 = Mem0[r16 + 12<i32>:word32]
	r3 = Mem0[r16 + 8<i32>:word32]
	call r3 (retsize: 0;)
	Mem0[r16 + 12<i32>:word32] = r0
	branch p0 l0000654C
	// succ:  l00006430 l0000654C
l00006430:
	p0 = r0 == 1<32>
	r1 = Mem0[r16 + 28<i32>:word32]
	r0 = Mem0[r16 + 20<i32>:word32]
	Mem0[r16 + 13<i32>:byte] = r0
	r0 = r0 + r1
	// succ:  l00006440
l00006440:
	r19 = Mem0[r16 + 32<i32>:word32]
	r17 = minu(r19, r21)
	r3 = Mem0[r16 + 8<i32>:word32]
	r0 = Mem0[r16 + 12<i32>:word32]
	r1 = 0xD168<32>
	r18 = -1<i32>
	r2 = r17
	call r3 (retsize: 0;)
	Mem0[r16 + 12<i32>:word32] = r0
	branch p0 l0000654C
	// succ:  l0000646C l0000654C
l0000646C:
	p0 = r0 == 0<32>
	r0 = Mem0[r16 + 52<i32>:word32]
	Mem0[r16 + 13<i32>:byte] = r0
	r0 = r0 + r17
	branch r2 > 0<32> l000064B4
	// succ:  l0000648C l000064B4
l0000648C:
	r2 = Mem0[r16 + 36<i32>:word32]
	r3 = Mem0[r16 + 28<i32>:word32]
	r1 = Mem0[r16 + 16<i32>:word32]
	r3 = Mem0[r16 + 8<i32>:word32]
	r0 = Mem0[r16 + 12<i32>:word32]
	r1 = r1 + r3
	call r3 (retsize: 0;)
	Mem0[r16 + 12<i32>:word32] = r0
	branch p0 l0000654C
	// succ:  l000064A4 l0000654C
l000064A4:
	p0 = r0 == 0<32>
	r1 = Mem0[r16 + 4<i32>:word32]
	r0 = Mem0[r16 + 20<i32>:word32]
	Mem0[r16 + 13<i32>:byte] = r0
	r0 = r0 + r1
	// succ:  l000064B4
l000064B4:
	r19 = Mem0[r16 + 40<i32>:word32]
	r17 = minu(r19, r21)
	r3 = Mem0[r16 + 8<i32>:word32]
	r0 = Mem0[r16 + 12<i32>:word32]
	r1 = 0xD168<32>
	r18 = -1<i32>
	r2 = r17
	call r3 (retsize: 0;)
	Mem0[r16 + 12<i32>:word32] = r0
	branch p0 l0000654C
	// succ:  l000064E4 l0000654C
l000064E4:
	p0 = r0 == 0<32>
	r0 = Mem0[r16 + 52<i32>:word32]
	Mem0[r16 + 13<i32>:byte] = r0
	r0 = r0 + r17
	r0 = Mem0[r16 + 60<i32>:byte]
	p0 = r20 > 0<32>
	branch r0 == 0<32> l0000654C
	// succ:  l0000650C l0000654C
l0000650C:
	r0 = r0 & 4<32>
	r19 = 0x20<32>
	r17 = minu(r20, r19)
	// succ:  l00006514
l00006514:
	r3 = Mem0[r16 + 8<i32>:word32]
	r0 = Mem0[r16 + 12<i32>:word32]
	r1 = 0xD140<32>
	r18 = -1<i32>
	r2 = r17
	call r3 (retsize: 0;)
	Mem0[r16 + 12<i32>:word32] = r0
	branch p0 l0000654C
	// succ:  l00006534 l0000654C
l00006534:
	p0 = r0 == 0<32>
	r0 = Mem0[r16 + 52<i32>:word32]
	Mem0[r16 + 13<i32>:byte] = r0
	r0 = r0 + r17
	branch r20 > 1<32> l00006514
	// succ:  l0000654C l00006514
l0000654C:
	// succ:  l0000654C_thunk_fn0000661C
l0000654C_thunk_fn0000661C:
	call fn0000661C (retsize: 0;)
	return
	// succ:  fn000063D8_exit
fn000063D8_exit:


// _Tls_get__Mbcurmax
// Return size: 0
define _Tls_get__Mbcurmax
_Tls_get__Mbcurmax_entry:
	r29 = fp
	// succ:  l00006560
l00006560:
	v3 = r29 - 8<i32>
	Mem0[v3:word32] = r30
	Mem0[v3 + 4<i32>:word32] = r31
	r30 = v3
	r29 = v3 - 16<i32>
	Mem0[r29 + 496<i32>:word64] = r17_r16
	r1 = 1<32>
	Mem0[r29:word64] = r19_r18
	r16 = 0x14<32>
	r18 = 0x10018<32>
	// succ:  l00006578
l00006578:
	r0 = memw_locked(r16)
	p0 = r0 > 0<32>
	branch p0 l0000658C
	// succ:  l00006584 l0000658C
l00006584:
	memw_locked(r16, p0, r1)
	branch p0 l00006578
	// succ:  l0000658C l00006578
l0000658C:
	r17 = 2<32>
	branch p0 l000065B0
	// succ:  l00006594 l000065B0
l00006594:
	p0 = r0 == 0<32>
	r1 = 0x6FF0<32>
	r0 = 0x10018<32>
	call sys_Tlsalloc (retsize: 0;)
	Mem0[r16:word32] = r17
	// succ:  l000065B0
l000065B0:
	branch r0 > 2<32> l000065B4
	goto l000065BC
	// succ:  l000065BC l000065B4
l000065B4:
	branch r0 > 2<32> l000065B4
	// succ:  l000065BC l000065B4
l000065BC:
	r0 = Mem0[r16:word32]
	r0 = Mem0[r18:word32]
	branch r16 == 0<32> l00006600
	// succ:  l000065D0 l00006600
l000065D0:
	r16 = r0
	r1_r0 = 0x100000001<64>
	branch p0 l000065F8
	// succ:  l000065D8 l000065F8
l000065D8:
	p0 = r9 == 0<32>
	r0 = Mem0[r18:word32]
	r1 = r17
	call sys_Tlsset (retsize: 0;)
	r0 = r17 + 0<32>
	r16 = r17 + 0<32>
	branch p0 l000065F4
	// succ:  l000065EC l000065F4
l000065EC:
	p0 = r0 == 0<32>
	call free (retsize: 0;)
	goto l000065F8
	// succ:  l000065F8
l000065F4:
	Mem0[r17:byte] = 6<8>
	// succ:  l000065F8
l000065F8:
	r19_r18 = Mem0[r29:word64]
	r17_r16 = Mem0[r29 + 8<i32>:word64]
	r0 = r16
	// succ:  l00006600
l00006600:
	v16 = r30
	r31 = Mem0[v16 + 4<i32>:word32]
	r30 = Mem0[v16:word32]
	r29 = v16 + 8<i32>
	return
	// succ:  _Tls_get__Mbcurmax_exit
_Tls_get__Mbcurmax_exit:


// _Tls_get__Mbstate
// Return size: 0
define _Tls_get__Mbstate
_Tls_get__Mbstate_entry:
	r29 = fp
	// succ:  l00006604
l00006604:
	v3 = r29 - 8<i32>
	Mem0[v3:word32] = r30
	Mem0[v3 + 4<i32>:word32] = r31
	r30 = v3
	r29 = v3 - 16<i32>
	Mem0[r29 + 496<i32>:word64] = r17_r16
	r1 = 1<32>
	r17 = 0x10020<32>
	r16 = 0x1001C<32>
	// succ:  l0000660C_thunk_fn0000661C
l0000660C_thunk_fn0000661C:
	call fn0000661C (retsize: 0;)
	return
	// succ:  _Tls_get__Mbstate_exit
_Tls_get__Mbstate_exit:


// fn0000661C
// Return size: 0
define fn0000661C
fn0000661C_entry:
	r29 = fp
	// succ:  l0000661C
l0000661C:
	Mem0[r29:word64] = r19_r18
	goto l0000661C_thunk_fn00006620
	// succ:  l0000661C_thunk_fn00006620
l0000661C:
	Mem0[r29:word64] = r19_r18
	goto l0000661C_thunk_fn00006620
	// succ:  l0000661C_thunk_fn00006620
l0000661C_thunk_fn00006620:
	call fn00006620 (retsize: 0;)
	return
	// succ:  fn0000661C_exit
l0000661C_thunk_fn00006620:
	call fn00006620 (retsize: 0;)
	return
	// succ:  fn0000661C_exit
fn0000661C_exit:


// fn00006620
// Return size: 0
define fn00006620
fn00006620_entry:
	r29 = fp
	// succ:  l00006620
l00006620:
	r0 = memw_locked(r16)
	p0 = r0 > 0<32>
	branch p0 l00006634
	// succ:  l0000662C l00006634
l0000662C:
	memw_locked(r16, p0, r1)
	branch p0 l00006620
	// succ:  l00006634 l00006620
l00006634:
	r18 = 2<32>
	branch p0 l00006654
	// succ:  l0000663C l00006654
l0000663C:
	p0 = r0 == 0<32>
	r1 = 0x6FF0<32>
	r0 = 0x10020<32>
	call sys_Tlsalloc (retsize: 0;)
	Mem0[r16:word32] = r18
	// succ:  l00006654
l00006654:
	branch r0 > 2<32> l00006658
	goto l00006660
	// succ:  l00006660 l00006658
l00006658:
	branch r0 > 2<32> l00006658
	// succ:  l00006660 l00006658
l00006660:
	r0 = Mem0[r16:word32]
	r0 = Mem0[r17:word32]
	branch r16 == 0<32> l000066AC
	// succ:  l00006674 l000066AC
l00006674:
	r16 = r0
	r1_r0 = 0x4000000001<64>
	branch r16 == 0<32> l000066A8
	// succ:  l00006680 l000066A8
l00006680:
	r16 = r0
	r0 = Mem0[r17:word32]
	r1 = r16
	branch p0 l00006694
	// succ:  l00006688 l00006694
l00006688:
	p0 = r0 == 0<32>
	r0 = r16
	r16 = 0<32>
	call free (retsize: 0;)
	goto l000066A4
	// succ:  l000066A4
l00006694:
	call __hexagon_memcpy_likely_aligned_min32bytes_mult8bytes (retsize: 0;)
	r2 = 0x40<32>
	// succ:  l000066A4
l000066A4:
	r19_r18 = Mem0[r29:word64]
	r17_r16 = Mem0[r29 + 8<i32>:word64]
	r0 = r16
	goto l000066AC
	// succ:  l000066AC
l000066A8:
	r19_r18 = Mem0[r29:word64]
	r17_r16 = Mem0[r29 + 8<i32>:word64]
	// succ:  l000066AC
l000066AC:
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  fn00006620_exit
fn00006620_exit:


// _Getmbcurmax
// Return size: 0
define _Getmbcurmax
_Getmbcurmax_entry:
	r29 = fp
	// succ:  l000066B0
l000066B0:
	v3 = r29 - 8<i32>
	Mem0[v3:word32] = r30
	Mem0[v3 + 4<i32>:word32] = r31
	r30 = v3
	r29 = v3 - 0<i32>
	call _Tls_get__Mbcurmax (retsize: 0;)
	v6 = r30
	r31 = Mem0[v6 + 4<i32>:word32]
	r30 = Mem0[v6:word32]
	r29 = v6 + 8<i32>
	return
	// succ:  _Getmbcurmax_exit
_Getmbcurmax_exit:


// _Getpmbstate
// Return size: 0
define _Getpmbstate
_Getpmbstate_entry:
	r29 = fp
	// succ:  l000066BC
l000066BC:
	// succ:  l000066BC_thunk__Tls_get__Mbstate
l000066BC_thunk__Tls_get__Mbstate:
	call _Tls_get__Mbstate (retsize: 0;)
	return
	// succ:  _Getpmbstate_exit
_Getpmbstate_exit:


// _Stoulx
// Return size: 0
define _Stoulx
_Stoulx_entry:
	r29 = fp
	// succ:  l000066C0
l000066C0:
	v3 = r29 - 8<i32>
	Mem0[v3:word32] = r30
	Mem0[v3 + 4<i32>:word32] = r31
	r30 = v3
	r29 = v3 - 64<i32>
	p0 = r3 == 0<32>
	call __save_r16_through_r27 (retsize: 0;)
	Mem0[r29 + 8<i32>:word32] = r3
	r16 = r1
	r19_r18 = r2_r0
	r4 = p0
	Mem0[r29 + 4<i32>:word32] = r4
	Mem0[r3:word32] = 0<32>
	r22 = r18 + 0xFFFFFFFF<32>
	r17 = Mem0[r22 + 1<i32>:byte]
	call _Getpctype (retsize: 0;)
	// succ:  l000066E4
l000066E4:
	r0 = Mem0[r13 + r17 * 2<32>:word16]
	r22 = r22 + 1<32>
	branch r0 == 1<32> l000066E4
	// succ:  l000066FC l000066E4
l000066FC:
	r0 = r0 & 0x144<32>
	r1 = r1 + 1<i32>
	r0 = Mem0[r1:byte]
	p0 = r0 == 0x2B<32>
	r21 = 0x2B<32>
	branch p0 l00006714
	// succ:  l0000670C l00006714
l0000670C:
	r22 = r1
	goto l00006720
	// succ:  l00006720
l00006714:
	r22 = r1 + 0<32>
	p0 = r0 == 0x2D<32>
	r21 = r0 + 0<32>
	// succ:  l00006720
l00006720:
	branch p0 l00006730
	// succ:  l00006724 l00006730
l00006724:
	p0 = tstbit(r11, 0<32>)
	branch p0 l00006730
	// succ:  l00006728 l00006730
l00006728:
	p0 = r11 == 2<32>
	p0 = r19 > 0x24<32>
	branch p0 l00006740
	// succ:  l00006730 l00006740
l00006730:
	r0 = 0<32>
	branch p0 l00006890
	// succ:  l00006738 l00006890
l00006738:
	p0 = r8 == 1<32>
	Mem0[r16:word32] = r18
	// succ:  l00006738_thunk___restore_r16_through_r27_and_deallocframe
l00006738_thunk___restore_r16_through_r27_and_deallocframe:
	call __restore_r16_through_r27_and_deallocframe (retsize: 0;)
	return
	// succ:  _Stoulx_exit
l00006740:
	branch p0 l00006768
	// succ:  l00006744 l00006768
l00006744:
	p0 = r11 > 0<32>
	branch p0 l00006788
	// succ:  l00006748 l00006788
l00006748:
	p0 = r11 == 0<32>
	r0 = Mem0[r22:byte]
	r19 = 0x10<32>
	r0 = Mem0[r22 + 1<i32>:int8]
	p0 = r0 == 0x30<32>
	branch p0 l00006788
	// succ:  l00006758 l00006788
l00006758:
	r0 = setbit(r0, 0xA<32>)
	r22 = r22 + 2<32>
	goto l0000678C
	// succ:  l0000678C
l00006768:
	r0 = Mem0[r22:byte]
	r19 = 0xA<32>
	p0 = r0 == 0x30<32>
	branch p0 l00006788
	// succ:  l00006774 l00006788
l00006774:
	r0 = Mem0[r22 + 1<i32>:byte]
	r19 = 8<32>
	r0 = setbit(r0, 0xA<32>)
	r19 = 0x10<32>
	r22 = r22 + 2<32>
	p0 = SLICE(r0, byte, 0) == SLICE(0x78<8>, byte, 0)
	// succ:  l00006788
l00006788:
	r25 = r22
	goto l00006794
	// succ:  l00006794
l0000678C:
	r25 = r22
l00006790:
	r25 = r25 + 1<32>
	// succ:  l00006794
l00006794:
	r17 = Mem0[r25:byte]
	p0 = r17 == 0x30<32>
	branch p0 l00006790
	// succ:  l000067A0 l00006790
l000067A0:
	call _Getptolower (retsize: 0;)
	r2 = r19
	r1 = Mem0[r29 + r17 * 2<32>:int16]
	r27_r26 = 0xD1D000000000<64>
	call memchr (retsize: 0;)
	branch r20 == 0<32> l00006818
	// succ:  l000067D4 l00006818
l000067D4:
	r20 = r0
	r24 = r25
	r17 = Mem0[r24 + 1<i32>:byte]
	r2 = r19
	r3 = r20 - r27
	r1 = Mem0[r29 + r17 * 2<32>:int16]
	r23 = r3 & 0xFF<32>
	r17 = r26
	r24 = r24 + 1<32>
	r26 = r23 + r26 * r19
	call memchr (retsize: 0;)
	branch r20 == 1<32> l000067D4
	// succ:  l0000680C l000067D4
l0000680C:
	r20 = r0
	r24 = r25
	r23 = r26
	p0 = r22 == r24
	r0 = r24 - r25
	branch p0 l00006880
	goto l00006820
	// succ:  l00006820 l00006880
l00006818:
	p0 = r22 == r24
	r0 = r24 - r25
	// succ:  l00006820
l00006820:
	r1 = Mem0[0x0000D1F8<p32> + r19:byte]
	branch tstbit(r0, -1<i32>) l0000686C
	// succ:  l00006834 l0000686C
l00006834:
	r0 = r0 - r1
	r1 = r19 + 0<32>
	branch r0 >u r26 l0000684C
	// succ:  l00006844 l0000684C
l00006844:
	r0 = r26 - r23
	branch p0 l00006868
	// succ:  l00006848 l00006868
l00006848:
	p0 = r0 == -1<i32>
	call _Geterrno (retsize: 0;)
	// succ:  l0000684C
l0000684C:
	Mem0[r0:word32] = 0x22<32>
	r0 = Mem0[r29 + 4<i32>:word32]
	r21 = 0x2B<32>
	r26 = 0xFFFFFFFF<32>
	r0 = Mem0[r29 + 8<i32>:word32]
	p0 = r0
	Mem0[r0:word32] = 1<32>
	// succ:  l00006868
l00006868:
	p1 = r16 == 0<32>
	r0 = 0<32> - r26
	p0 = r21 == 0x2D<32>
	goto l00006874
	// succ:  l00006874
l0000686C:
	p1 = r16 == 0<32>
	r0 = 0<32> - r26
	// succ:  l00006874
l00006874:
	r0 = r26 + 0<32>
	goto l00006890
	// succ:  l00006890
l00006880:
	r0 = 0<32>
	branch p0 l00006890
	// succ:  l00006888 l00006890
l00006888:
	p0 = r8 == 0<32>
	Mem0[r16:word32] = r18
	// succ:  l00006888_thunk___restore_r16_through_r27_and_deallocframe
l00006888_thunk___restore_r16_through_r27_and_deallocframe:
	call __restore_r16_through_r27_and_deallocframe (retsize: 0;)
	return
	// succ:  _Stoulx_exit
l00006890:
	// succ:  l00006890_thunk___restore_r16_through_r27_and_deallocframe
l00006890_thunk___restore_r16_through_r27_and_deallocframe:
	call __restore_r16_through_r27_and_deallocframe (retsize: 0;)
	return
	// succ:  _Stoulx_exit
_Stoulx_exit:


// _Stoul
// Return size: 0
define _Stoul
_Stoul_entry:
	r29 = fp
	// succ:  l00006894
l00006894:
	// succ:  l00006894_thunk__Stoulx
l00006894_thunk__Stoulx:
	call _Stoulx (retsize: 0;)
	return
	// succ:  _Stoul_exit
_Stoul_exit:


// _Clearlocks
// Return size: 0
define _Clearlocks
_Clearlocks_entry:
	r29 = fp
	// succ:  l000068A0
l000068A0:
	v3 = r29 - 8<i32>
	Mem0[v3:word32] = r30
	Mem0[v3 + 4<i32>:word32] = r31
	r30 = v3
	r29 = v3 - 8<i32>
	Mem0[r29 + 496<i32>:word64] = r17_r16
	r0 = 0<32>
	Mem0[gp + 4<i32>:byte] = r0
	r17_r16 = 0xE8D400000020<64>
	// succ:  l000068C0
l000068C0:
	r0 = r16
	r16 = r16 + 4<32>
	r17 = r17 + 0xFFFFFFFF<32>
	call __sys_Mtxdst (retsize: 0;)
	branch p0 l000068C0
	// succ:  l000068D0 l000068C0
l000068D0:
	p0 = r25 == 1<32>
	r17_r16 = 0xE90400000030<64>
	r0 = 0<32>
	Mem0[gp + 4<i32>:byte] = r0
	// succ:  l000068E4
l000068E4:
	r0 = r16
	r16 = r16 + 4<32>
	r17 = r17 + 0xFFFFFFFF<32>
	call __sys_Mtxdst (retsize: 0;)
	branch p0 l000068E4
	// succ:  l000068F4 l000068E4
l000068F4:
	p0 = r25 == 1<32>
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  _Clearlocks_exit
_Clearlocks_exit:


// _Initlocks
// Return size: 0
define _Initlocks
_Initlocks_entry:
	r29 = fp
	// succ:  l00006900
l00006900:
	v3 = r29 - 8<i32>
	Mem0[v3:word32] = r30
	Mem0[v3 + 4<i32>:word32] = r31
	r30 = v3
	r29 = v3 - 8<i32>
	Mem0[r29 + 496<i32>:word64] = r17_r16
	r17_r16 = 0xE8D400000020<64>
	// succ:  l00006910
l00006910:
	r0 = r16
	r16 = r16 + 4<32>
	r17 = r17 + 0xFFFFFFFF<32>
	call __sys_Mtxinit (retsize: 0;)
	branch p0 l00006910
	// succ:  l00006920 l00006910
l00006920:
	p0 = r25 == 1<32>
	r17_r16 = 0xE90400000030<64>
	r0 = 1<32>
	Mem0[gp + 4<i32>:byte] = r0
	// succ:  l00006934
l00006934:
	r0 = r16
	r16 = r16 + 4<32>
	r17 = r17 + 0xFFFFFFFF<32>
	call __sys_Mtxinit (retsize: 0;)
	branch p0 l00006934
	// succ:  l00006944 l00006934
l00006944:
	p0 = r25 == 1<32>
	r17_r16 = Mem0[r29:word64]
	r0 = 1<32>
	// succ:  l00006944_thunk__Lockfilelock
l00006944_thunk__Lockfilelock:
	call _Lockfilelock (retsize: 0;)
	return
	// succ:  _Initlocks_exit
_Initlocks_exit:


// _Lockfilelock
// Return size: 0
define _Lockfilelock
_Lockfilelock_entry:
	r29 = fp
	// succ:  l00006958
l00006958:
	v3 = r29 - 8<i32>
	Mem0[v3:word32] = r30
	Mem0[v3 + 4<i32>:word32] = r31
	r30 = v3
	r29 = v3 - 24<i32>
	call __save_r16_through_r21 (retsize: 0;)
	r1 = 1<32>
	r20 = 0x2C<32>
	r16 = r0
	r19 = 0x10024<32>
	r18 = 0xE8E0<32>
	// succ:  l0000697C
l0000697C:
	r0 = memw_locked(r20)
	p0 = r0 > 0<32>
	branch p0 l00006990
	// succ:  l00006988 l00006990
l00006988:
	memw_locked(r20, p0, r1)
	branch p0 l0000697C
	// succ:  l00006990 l0000697C
l00006990:
	branch p0 l000069E4
	// succ:  l00006994 l000069E4
l00006994:
	p0 = r0 == 0<32>
	r21 = 0x14<32>
	r17 = 0x20<32>
	// succ:  l000069A0
l000069A0:
	r0 = r17
	r17 = r17 + 4<32>
	r21 = r21 + 0xFFFFFFFF<32>
	call __sys_Mtxinit (retsize: 0;)
	branch p0 l000069A0
	// succ:  l000069B0 l000069A0
l000069B0:
	p0 = r29 == 1<32>
	r21 = 4<32>
	r0 = 1<32>
	r17 = 0xE930<32>
	Mem0[r19:byte] = r0
	// succ:  l000069C0
l000069C0:
	r0 = r17
	r17 = r17 + 4<32>
	r21 = r21 + 0xFFFFFFFF<32>
	call __sys_Mtxinit (retsize: 0;)
	branch p0 l000069C0
	// succ:  l000069D0 l000069C0
l000069D0:
	p0 = r29 == 1<32>
	Mem0[gp + 132<i32>:byte] = r1
	r1 = 2<32>
	r0 = 1<32>
	// succ:  l000069E4
l000069E4:
	branch r0 > 2<32> l000069E8
	goto l000069F0
	// succ:  l000069F0 l000069E8
l000069E8:
	branch r0 > 2<32> l000069E8
	// succ:  l000069F0 l000069E8
l000069F0:
	r0 = Mem0[r20:word32]
	r1 = Mem0[r19:byte]
	r0 = Mem0[r16 + 2<i32>:byte]
	p0 = r1
	r1 = p0 ? 0x14<32> : 0<32>
	r0 = r18 + (r0 << 2<32>)
	call lockMutex (retsize: 0;)
	// succ:  l00006A08_thunk___restore_r16_through_r21_and_deallocframe
l00006A08_thunk___restore_r16_through_r21_and_deallocframe:
	call __restore_r16_through_r21_and_deallocframe (retsize: 0;)
	return
	// succ:  _Lockfilelock_exit
_Lockfilelock_exit:


// _Unlockfilelock
// Return size: 0
define _Unlockfilelock
_Unlockfilelock_entry:
	r29 = fp
	// succ:  l00006A10
l00006A10:
	v3 = r29 - 8<i32>
	Mem0[v3:word32] = r30
	Mem0[v3 + 4<i32>:word32] = r31
	r30 = v3
	r29 = v3 - 0<i32>
	branch p0 l00006A40
	// succ:  l00006A18 l00006A40
l00006A18:
	p0 = r0 == 0<32>
	r0 = Mem0[r0 + 2<i32>:byte]
	r1 = Mem0[gp + 36<i32>:int8]
	p0 = r1
	r1 = p0 ? 0x14<32> : 0<32>
	r1 = 0xE8E0<32>
	call fn0000AF34 (retsize: 0;)
	r0 = r1 + (r0 << 2<32>)
	// succ:  l00006A40
l00006A40:
	v10 = r30
	r31 = Mem0[v10 + 4<i32>:word32]
	r30 = Mem0[v10:word32]
	r29 = v10 + 8<i32>
	return
	// succ:  _Unlockfilelock_exit
_Unlockfilelock_exit:


// _Locksyslock
// Return size: 0
define _Locksyslock
_Locksyslock_entry:
	r29 = fp
	// succ:  l00006A44
l00006A44:
	v3 = r29 - 8<i32>
	Mem0[v3:word32] = r30
	Mem0[v3 + 4<i32>:word32] = r31
	r30 = v3
	r29 = v3 - 24<i32>
	call __save_r16_through_r21 (retsize: 0;)
	r1 = 1<32>
	r20 = 0x2C<32>
	r16 = r0
	r19 = 0x10028<32>
	r18 = 0xE930<32>
	// succ:  l00006A68
l00006A68:
	r0 = memw_locked(r20)
	p0 = r0 > 0<32>
	branch p0 l00006A7C
	// succ:  l00006A74 l00006A7C
l00006A74:
	memw_locked(r20, p0, r1)
	branch p0 l00006A68
	// succ:  l00006A7C l00006A68
l00006A7C:
	branch p0 l00006AD4
	// succ:  l00006A80 l00006AD4
l00006A80:
	p0 = r0 == 0<32>
	r21 = 0x14<32>
	r17 = 0x20<32>
	// succ:  l00006A90
l00006A90:
	r0 = r17
	r17 = r17 + 4<32>
	r21 = r21 + 0xFFFFFFFF<32>
	call __sys_Mtxinit (retsize: 0;)
	branch p0 l00006A90
	// succ:  l00006AA0 l00006A90
l00006AA0:
	p0 = r29 == 1<32>
	r21 = 4<32>
	r0 = 1<32>
	r17 = 0xE930<32>
	Mem0[gp + 4<i32>:byte] = r0
	// succ:  l00006AB4
l00006AB4:
	r0 = r17
	r17 = r17 + 4<32>
	r21 = r21 + 0xFFFFFFFF<32>
	call __sys_Mtxinit (retsize: 0;)
	branch p0 l00006AB4
	// succ:  l00006AC4 l00006AB4
l00006AC4:
	p0 = r29 == 1<32>
	Mem0[r19:byte] = r0
	r1 = 2<32>
	r0 = 1<32>
	// succ:  l00006AD4
l00006AD4:
	branch r0 > 2<32> l00006AD8
	goto l00006AE0
	// succ:  l00006AE0 l00006AD8
l00006AD8:
	branch r0 > 2<32> l00006AD8
	// succ:  l00006AE0 l00006AD8
l00006AE0:
	r0 = Mem0[r20:word32]
	p0 = r0
	branch r16 > r0 l00006AE4_thunk__Unlocksyslock
	goto l00006AF0
	// succ:  l00006AF0 l00006AE4_thunk__Unlocksyslock
l00006AE4_thunk__Unlocksyslock:
	call _Unlocksyslock (retsize: 0;)
	return
	// succ:  _Locksyslock_exit
l00006AF0:
	r0 = p0 ? 4<32> : 0<32>
	call fn0000AEF4 (retsize: 0;)
	// succ:  l00006AF4_thunk___restore_r16_through_r21_and_deallocframe
l00006AF4_thunk___restore_r16_through_r21_and_deallocframe:
	call __restore_r16_through_r21_and_deallocframe (retsize: 0;)
	return
	// succ:  _Locksyslock_exit
_Locksyslock_exit:


// _Unlocksyslock
// Return size: 0
define _Unlocksyslock
_Unlocksyslock_entry:
	r29 = fp
	// succ:  l00006AF8
l00006AF8:
	v3 = r29 - 8<i32>
	Mem0[v3:word32] = r30
	Mem0[v3 + 4<i32>:word32] = r31
	r30 = v3
	r29 = v3 - 0<i32>
	r1 = Mem0[gp + 40<i32>:int8]
	p0 = r1
	r1 = p0 ? 4<32> : 0<32>
	r1 = 0xE930<32>
	call fn0000AF34 (retsize: 0;)
	r0 = r1 + (r0 << 2<32>)
	v10 = r30
	r31 = Mem0[v10 + 4<i32>:word32]
	r30 = Mem0[v10:word32]
	r29 = v10 + 8<i32>
	return
	// succ:  _Unlocksyslock_exit
_Unlocksyslock_exit:


// _Tls_get__Tolotab
// Return size: 0
define _Tls_get__Tolotab
_Tls_get__Tolotab_entry:
	r29 = fp
	// succ:  l00006B30
l00006B30:
	v3 = r29 - 8<i32>
	Mem0[v3:word32] = r30
	Mem0[v3 + 4<i32>:word32] = r31
	r30 = v3
	r29 = v3 - 16<i32>
	Mem0[r29 + 496<i32>:word64] = r17_r16
	r1 = 1<32>
	r17 = 0x10034<32>
	r16 = 0x10030<32>
	Mem0[r29:word64] = r19_r18
	// succ:  l00006B4C
l00006B4C:
	r0 = memw_locked(r16)
	p0 = r0 > 0<32>
	branch p0 l00006B60
	// succ:  l00006B58 l00006B60
l00006B58:
	memw_locked(r16, p0, r1)
	branch p0 l00006B4C
	// succ:  l00006B60 l00006B4C
l00006B60:
	r18 = 2<32>
	branch p0 l00006B80
	// succ:  l00006B68 l00006B80
l00006B68:
	p0 = r0 == 0<32>
	r1 = 0x6FF0<32>
	r0 = 0x10034<32>
	call sys_Tlsalloc (retsize: 0;)
	Mem0[r16:word32] = r18
	// succ:  l00006B80
l00006B80:
	branch r0 > 2<32> l00006B84
	goto l00006B8C
	// succ:  l00006B8C l00006B84
l00006B84:
	branch r0 > 2<32> l00006B84
	// succ:  l00006B8C l00006B84
l00006B8C:
	r0 = Mem0[r16:word32]
	r0 = Mem0[r17:word32]
	branch r16 == 0<32> l00006BD4
	// succ:  l00006BA0 l00006BD4
l00006BA0:
	r16 = r0
	r1_r0 = 0x400000001<64>
	branch r16 == 0<32> l00006BD0
	// succ:  l00006BAC l00006BD0
l00006BAC:
	r16 = r0
	r0 = Mem0[r17:word32]
	r1 = r16
	branch p0 l00006BC0
	// succ:  l00006BB4 l00006BC0
l00006BB4:
	p0 = r0 == 0<32>
	r0 = r16
	r16 = 0<32>
	call free (retsize: 0;)
	goto l00006BCC
	// succ:  l00006BCC
l00006BC0:
	Mem0[r16:byte] = r0
	r0 = 0xD222<32>
	goto l00006BD0
	// succ:  l00006BD0
l00006BCC:
	r19_r18 = Mem0[r29:word64]
	r17_r16 = Mem0[r29 + 8<i32>:word64]
	r0 = r16
	goto l00006BD4
	// succ:  l00006BD4
l00006BD0:
	r19_r18 = Mem0[r29:word64]
	r17_r16 = Mem0[r29 + 8<i32>:word64]
	// succ:  l00006BD4
l00006BD4:
	v15 = r30
	r31 = Mem0[v15 + 4<i32>:word32]
	r30 = Mem0[v15:word32]
	r29 = v15 + 8<i32>
	return
	// succ:  _Tls_get__Tolotab_exit
_Tls_get__Tolotab_exit:


// _Getptolower
// Return size: 0
define _Getptolower
_Getptolower_entry:
	r29 = fp
	// succ:  l00006BD8
l00006BD8:
	v3 = r29 - 8<i32>
	Mem0[v3:word32] = r30
	Mem0[v3 + 4<i32>:word32] = r31
	r30 = v3
	r29 = v3 - 0<i32>
	call _Tls_get__Tolotab (retsize: 0;)
	v6 = r30
	r31 = Mem0[v6 + 4<i32>:word32]
	r30 = Mem0[v6:word32]
	r29 = v6 + 8<i32>
	return
	// succ:  _Getptolower_exit
_Getptolower_exit:


// _Vacopy
// Return size: 0
define _Vacopy
_Vacopy_entry:
	r29 = fp
	// succ:  l00006BF0
l00006BF0:
	v3 = r29 - 8<i32>
	Mem0[v3:word32] = r30
	Mem0[v3 + 4<i32>:word32] = r31
	r30 = v3
	r29 = v3 - 8<i32>
	r3 = r1
	r2 = 4<32>
	Mem0[r29 + 4<i32>:word32] = r3
	r1 = r29 + 4<32>
	call memcpy (retsize: 0;)
	v9 = r30
	r31 = Mem0[v9 + 4<i32>:word32]
	r30 = Mem0[v9:word32]
	r29 = v9 + 8<i32>
	return
	// succ:  _Vacopy_exit
_Vacopy_exit:


// _Wctombx
// Return size: 0
define _Wctombx
_Wctombx_entry:
	r29 = fp
	// succ:  l00006C10
l00006C10:
	v3 = r29 - 8<i32>
	Mem0[v3:word32] = r30
	Mem0[v3 + 4<i32>:word32] = r31
	r30 = v3
	r29 = v3 - 32<i32>
	call __save_r16_through_r23 (retsize: 0;)
	r20 = r4
	r18 = r2
	r17_r16 = r1_r0
	r5 = Mem0[r3:word32]
	p0 = r16 == 0<32>
	branch p0 l00006D24
	// succ:  l00006C34 l00006D24
l00006C34:
	r0 = Mem0[r18 + 6<i32>:word16]
	r21 = 0<32>
	r19 = 0<32>
	r0 = CONVERT(SLICE(r0, byte, 0), byte, uint32)
	branch p0 l00006D14
	// succ:  l00006C4C l00006D14
l00006C4C:
	p0 = SLICE(r0, byte, 0) >u SLICE(0xF<8>, byte, 0)
	branch r22 == 0<32> l00006D14
	// succ:  l00006C58 l00006D14
l00006C58:
	r22 = Mem0[r6 + r0 * 4<32>:word32]
	r21 = r21 + 1<32>
	branch p0 l00006D10
	// succ:  l00006C60 l00006D10
l00006C60:
	p0 = r0 > -1<i32>
	p0 = r21 > 0xFEF<32>
	r0 = CONVERT(SLICE(r17, byte, 0), byte, uint32)
	branch p0 l00006D10
	// succ:  l00006C70 l00006D10
l00006C70:
	r1 = Mem0[r4 + r0 * 2<32>:word16]
	r2 = r1 & 0xFF<32>
	r3 = r17
	r0 = r1 & 0x8000<32>
	p0 = r0 == 0<32>
	r4 = r1 & 0x1000<32>
	r3 = r2 | r3 & 0xFFFFFF00<32>
	r3 = r17 + 0<32>
	r5 = r1 & 0x2000<32>
	p1 = r4 == 0<32>
	p0 = r5 == 0<32>
	r17 = r3 + 0<32>
	r4 = r3 << 8<32>
	r0 = CONVERT(SLICE(r1, ui12, 4), ui12, uint32)
	r4 = r4 | r3 >>u 0x18<32>
	r17 = r4 + 0<32>
	branch p0 l00006CE0
	// succ:  l00006CC0 l00006CE0
l00006CC0:
	p0 = r2 == 0<32>
	r19 = r19
	r21 = 0<32>
	r2 = r16 + r19
	r3 = r1 + 0<32>
	r3 = r17 + 0<32>
	Mem0[r2:byte] = r3
	branch p0 l00006CF0
	// succ:  l00006CE0 l00006CF0
l00006CE0:
	p0 = SLICE(r3, byte, 0) == SLICE(0<8>, byte, 0)
	r1 = r1 & 0x4000<32>
	Mem0[r18 + 6<i32>:word16] = r0
	goto l00006D3C
	// succ:  l00006D3C
l00006CF0:
	Mem0[r18 + 6<i32>:word16] = r0
	goto l00006D40
	// succ:  l00006D40
l00006D10:
	r19 = 0xFFFFFFFF<32>
	call _Geterrno (retsize: 0;)
	goto l00006D18
	// succ:  l00006D18
l00006D14:
	r19 = 0xFFFFFFFF<32>
	// succ:  l00006D18
l00006D18:
	Mem0[r0:word32] = 0x58<32>
	goto l00006DB8
	// succ:  l00006DB8
l00006D24:
	Mem0[r18:word32] = 0<32>
	Mem0[r18 + 4<i32>:word32] = 0<32>
	r0 = Mem0[r3:word32]
	r0 = Mem0[r0:word16]
	r19 = r0 & 0xF00<32>
	goto l00006D58
	// succ:  l00006D58
l00006D3C:
	goto l00006D5C
	// succ:  l00006D5C
l00006D40:
	Mem0[r18 + 4<i32>:word32] = 0<32>
	Mem0[r18:word32] = 0<32>
	r19 = 0<32>
	goto l00006E28
	// succ:  l00006E28
l00006D58:
	// succ:  l00006D5C
l00006D5C:
	// succ:  l00006DAC
l00006DAC:
	Mem0[r16:byte] = r1
	r4 = -1<i32>
	r1 = 0xFFFFFFFA<32>
	r2 = r16 + 1<32>
	r1 = r1 + r0 * 6<32>
	r3 = max(r3, r4)
	// succ:  l00006DB8
l00006DB8:
	r3 = r3 + (r0 + 2<32>)
	__nyi_loop0(0x00006DC8<p32>, r0)
	r1 = r1 + 0xFFFFFFFA<32>
	r0 = r0 & r17 >> r1
	r0 = r0 & 0x3F<32>
	Mem0[r2:byte] = r0
	r2 = r2 + 1<i32>
	r0 = setbit(r0, 0xE<32>)
	r19 = r0 - r16
	// succ:  l00006DE4_thunk_fn00006E54
l00006DE4_thunk_fn00006E54:
	call fn00006E54 (retsize: 0;)
	return
	// succ:  _Wctombx_exit
l00006E28:
	v24 = r30
	r31 = Mem0[v24 + 4<i32>:word32]
	r30 = Mem0[v24:word32]
	r29 = v24 + 8<i32>
	goto l00006C10
	// succ:  l00006C10
_Wctombx_exit:


// _Wctomb
// Return size: 0
define _Wctomb
_Wctomb_entry:
	r29 = fp
	// succ:  l00006DF0
l00006DF0:
	v3 = r29 - 8<i32>
	Mem0[v3:word32] = r30
	Mem0[v3 + 4<i32>:word32] = r31
	r30 = v3
	r29 = v3 - 16<i32>
	Mem0[r29 + 496<i32>:word64] = r17_r16
	r17_r16 = r2_r0
	Mem0[r29:word64] = r19_r18
	r18 = r1
	call _Tls_get__Mbstate (retsize: 0;)
	r19 = r0
	r4 = 0<32>
	p0 = r16 == 0<32>
	branch p0 l00006E1C
	// succ:  l00006E14 l00006E1C
l00006E14:
	call _Tls_get__Wcstate (retsize: 0;)
	r4 = r0
	// succ:  l00006E1C
l00006E1C:
	r19_r18 = Mem0[r29:word64]
	r17_r16 = Mem0[r29 + 8<i32>:word64]
	r1_r0 = r18_r16
	r3_r2 = r19_r17
	// succ:  l00006E1C_thunk__Wctombx
l00006E1C_thunk__Wctombx:
	call _Wctombx (retsize: 0;)
	return
	// succ:  _Wctomb_exit
_Wctomb_exit:


// abort
// Return size: 0
define abort
abort_entry:
	r29 = fp
	// succ:  l00006E30
l00006E30:
	v3 = r29 - 8<i32>
	Mem0[v3:word32] = r30
	Mem0[v3 + 4<i32>:word32] = r31
	r30 = v3
	r29 = v3 - 0<i32>
	r0 = 6<32>
	call raise (retsize: 0;)
	r0 = 1<32>
	call exit (retsize: 0;)
	// succ:  l00006E38_thunk_calloc
l00006E38_thunk_calloc:
	call calloc (retsize: 0;)
	return
	// succ:  abort_exit
abort_exit:


// calloc
// Return size: 0
define calloc
calloc_entry:
	r29 = fp
	// succ:  l00006E40
l00006E40:
	v3 = r29 - 8<i32>
	Mem0[v3:word32] = r30
	Mem0[v3 + 4<i32>:word32] = r31
	r30 = v3
	r29 = v3 - 8<i32>
	Mem0[r29 + 496<i32>:word64] = r17_r16
	r17 = r1 * r0
	r0 = r17
	call malloc (retsize: 0;)
	branch r16 == 0<32> l00006E64
calloc_exit:


// fn00006E54
// Return size: 0
define fn00006E54
fn00006E54_entry:
	r29 = fp
	// succ:  l00006E54
l00006E54:
	branch r16 == 0<32> l00006E64_in_fn00006E54
	goto l00006E5C_in_fn00006E54
	// succ:  l00006E5C_in_fn00006E54 l00006E64_in_fn00006E54
l00006E54:
	// succ:  l00006E5C l00006E64
l00006E5C:
	r16 = r0
	r1_r0 = 0<64>
	r2 = r17
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  fn00006E54_exit
l00006E5C_in_fn00006E54:
	r16 = r0
	r1_r0 = 0<64>
	r2 = r17
	v12 = r30
	r31 = Mem0[v12 + 4<i32>:word32]
	r30 = Mem0[v12:word32]
	r29 = v12 + 8<i32>
	return
	// succ:  fn00006E54_exit
l00006E64:
	v14 = r30
	r31 = Mem0[v14 + 4<i32>:word32]
	r30 = Mem0[v14:word32]
	r29 = v14 + 8<i32>
	return
	// succ:  fn00006E54_exit
l00006E64_in_fn00006E54:
	v4 = r30
	r31 = Mem0[v4 + 4<i32>:word32]
	r30 = Mem0[v4:word32]
	r29 = v4 + 8<i32>
	return
	// succ:  fn00006E54_exit
fn00006E54_exit:


// _Tls_get__Errno
// Return size: 0
define _Tls_get__Errno
_Tls_get__Errno_entry:
	r29 = fp
	// succ:  l00006E70
l00006E70:
	v3 = r29 - 8<i32>
	Mem0[v3:word32] = r30
	Mem0[v3 + 4<i32>:word32] = r31
	r30 = v3
	r29 = v3 - 16<i32>
	Mem0[r29 + 496<i32>:word64] = r17_r16
	r1 = 1<32>
	r17 = 0x1003C<32>
	r16 = 0x10038<32>
	Mem0[r29:word64] = r19_r18
	// succ:  l00006E8C
l00006E8C:
	r0 = memw_locked(r16)
	p0 = r0 > 0<32>
	branch p0 l00006EA0
	// succ:  l00006E98 l00006EA0
l00006E98:
	memw_locked(r16, p0, r1)
	branch p0 l00006E8C
	// succ:  l00006EA0 l00006E8C
l00006EA0:
	r18 = 2<32>
	branch p0 l00006EC0
	// succ:  l00006EA8 l00006EC0
l00006EA8:
	p0 = r0 == 0<32>
	r1 = 0x6FF0<32>
	r0 = 0x1003C<32>
	call sys_Tlsalloc (retsize: 0;)
	Mem0[r16:word32] = r18
	// succ:  l00006EC0
l00006EC0:
	branch r0 > 2<32> l00006EC4
	goto l00006ECC
	// succ:  l00006ECC l00006EC4
l00006EC4:
	branch r0 > 2<32> l00006EC4
	// succ:  l00006ECC l00006EC4
l00006ECC:
	r0 = Mem0[r16:word32]
	r0 = Mem0[r17:word32]
	branch r16 == 0<32> l00006F0C
	// succ:  l00006EE0 l00006F0C
l00006EE0:
	r16 = r0
	r1_r0 = 0x400000001<64>
	branch r16 == 0<32> l00006F08
	// succ:  l00006EEC l00006F08
l00006EEC:
	r16 = r0
	r0 = Mem0[r17:word32]
	r1 = r16
	Mem0[r16:word32] = 0<32>
	branch p0 l00006F04
	// succ:  l00006EF8 l00006F04
l00006EF8:
	p0 = r0 == 0<32>
	r0 = r16
	r16 = 0<32>
	call free (retsize: 0;)
	// succ:  l00006F04
l00006F04:
	r19_r18 = Mem0[r29:word64]
	r17_r16 = Mem0[r29 + 8<i32>:word64]
	r0 = r16
	goto l00006F0C
	// succ:  l00006F0C
l00006F08:
	r19_r18 = Mem0[r29:word64]
	r17_r16 = Mem0[r29 + 8<i32>:word64]
	// succ:  l00006F0C
l00006F0C:
	v15 = r30
	r31 = Mem0[v15 + 4<i32>:word32]
	r30 = Mem0[v15:word32]
	r29 = v15 + 8<i32>
	return
	// succ:  _Tls_get__Errno_exit
_Tls_get__Errno_exit:


// _Geterrno
// Return size: 0
define _Geterrno
_Geterrno_entry:
	r29 = fp
	// succ:  l00006F10
l00006F10:
	// succ:  l00006F10_thunk__Tls_get__Errno
l00006F10_thunk__Tls_get__Errno:
	call _Tls_get__Errno (retsize: 0;)
	return
	// succ:  _Geterrno_exit
_Geterrno_exit:


// atexit
// Return size: 0
define atexit
atexit_entry:
	r29 = fp
	// succ:  l00006F20
l00006F20:
	v3 = r29 - 8<i32>
	Mem0[v3:word32] = r30
	Mem0[v3 + 4<i32>:word32] = r31
	r30 = v3
	r29 = v3 - 8<i32>
	Mem0[r29 + 496<i32>:word64] = r17_r16
	r0 = 1<32>
	r16 = r0
	call _Locksyslock (retsize: 0;)
	r0 = Mem0[gp + 12<i32>:word32]
	r17 = 0xFFFFFFFF<32>
	r1 = Mem0[gp + 64<i32>:word32]
	call _Atrealloc (retsize: 0;)
	branch p0 l00006F60
	// succ:  l00006F48 l00006F60
l00006F48:
	p0 = r0 == 0<32>
	r0 = Mem0[gp + 12<i32>:word32]
	r1 = Mem0[gp + 8<i32>:word32]
	r17 = 0<32>
	r0 = r0 + 0xFFFFFFFF<32>
	Mem0[r30 + r0 * 4<32>:word32] = r16
	Mem0[gp:word32] = r0
	// succ:  l00006F60
l00006F60:
	r0 = 1<32>
	call _Unlocksyslock (retsize: 0;)
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  atexit_exit
atexit_exit:


// exit
// Return size: 0
define exit
exit_entry:
	r29 = fp
	// succ:  l00006F70
l00006F70:
	v3 = r29 - 8<i32>
	Mem0[v3:word32] = r30
	Mem0[v3 + 4<i32>:word32] = r31
	r30 = v3
	r29 = v3 - 8<i32>
	Mem0[r29 + 496<i32>:word64] = r17_r16
	r16 = r0
	r2 = Mem0[gp + 4<i32>:word32]
	r1 = Mem0[gp + 12<i32>:word32]
	r0 = Mem0[gp + 8<i32>:word32]
	r2 = r1 + 1<32>
	// succ:  l00006F88
l00006F88:
	Mem0[gp + 64<i32>:word32] = r2
	r0 = Mem0[r6 + r1 * 4<32>:word32]
	call r0 (retsize: 0;)
	r1 = Mem0[gp + 12<i32>:word32]
	branch r0 >u r1 l00006F88
	// succ:  l00006FA8 l00006F88
l00006FA8:
	r0 = Mem0[gp + 4<i32>:word32]
	r1 = Mem0[gp + 8<i32>:word32]
	r0 = r0 + 0xFFFFFFFF<32>
	Mem0[gp:word32] = r0
	r1 = Mem0[r22 + r0 * 4<32>:word32]
	// succ:  l00006FB4
l00006FB4:
	call r1 (retsize: 0;)
	branch r0 == 1<32> l00006FB4
	// succ:  l00006FD0 l00006FB4
l00006FD0:
	r0 = Mem0[gp + 64<i32>:word32]
	r17 = 0xE940<32>
	branch r0 == r17 l00006FDC
	// succ:  l00006FD8 l00006FDC
l00006FD8:
	// succ:  l00006FDC
l00006FDC:
	Mem0[gp + 544<i32>:word32] = r17
	Mem0[gp + 32<i32>:word32] = r1
	call _Exit (retsize: 0;)
	// succ:  l00006FEC_thunk_free
l00006FEC_thunk_free:
	call free (retsize: 0;)
	return
	// succ:  exit_exit
exit_exit:


// free
// Return size: 0
define free
free_entry:
	r29 = fp
	// succ:  l00006FF0
l00006FF0:
	v3 = r29 - 8<i32>
	Mem0[v3:word32] = r30
	Mem0[v3 + 4<i32>:word32] = r31
	r30 = v3
	r29 = v3 - 8<i32>
	Mem0[r29 + 496<i32>:word64] = r17_r16
	// succ:  l00006FF0_thunk_fn00006FF4
l00006FF0_thunk_fn00006FF4:
	call fn00006FF4 (retsize: 0;)
	return
	// succ:  free_exit
free_exit:


// fn00006FF4
// Return size: 0
define fn00006FF4
fn00006FF4_entry:
	r29 = fp
	// succ:  l00006FF4
l00006FF4:
	branch r16 == 0<32> l00006FF4_thunk_fn000070A0
	goto l00006FF4_thunk_fn00007000
	// succ:  l00006FF4_thunk_fn00007000 l00006FF4_thunk_fn000070A0
l00006FF4:
	branch r16 == 0<32> l000070A0
	goto l00006FF4_thunk_fn00007000
	// succ:  l00006FF4_thunk_fn00007000 l00006FF4_thunk_fn000070A0
l00006FF4_thunk_fn00007000:
	call fn00007000 (retsize: 0;)
	return
	// succ:  fn00006FF4_exit
l00006FF4_thunk_fn00007000:
	call fn00007000 (retsize: 0;)
	return
	// succ:  fn00006FF4_exit
l00006FF4_thunk_fn000070A0:
	call fn000070A0 (retsize: 0;)
	return
	// succ:  fn00006FF4_exit
l00006FF4_thunk_fn000070A0:
	call fn000070A0 (retsize: 0;)
	return
	// succ:  fn00006FF4_exit
fn00006FF4_exit:


// fn00007000
// Return size: 0
define fn00007000
fn00007000_entry:
	r29 = fp
	// succ:  l00007000
l00007000:
	r16 = r0
	r1 = 8<32>
	branch r0 == 0<32> l000070A0
	// succ:  l00007014 l00007014_thunk_fn000070A0
l00007014:
	r0 = r0 & 7<32>
	r0 = 1<32>
	r1 = Mem0[gp + 72<i32>:word32]
	r0 = r16 + 0xFFFFFFF8<32>
	branch p0 l00007060
	goto l00007028
	// succ:  l00007028 l00007060
l00007014_thunk_fn000070A0:
	call fn000070A0 (retsize: 0;)
	return
	// succ:  fn00007000_exit
l00007028:
	p0 = r1 >u r0
	Mem0[gp:word32] = r0
	Mem0[r16 - 4<i32>:word32] = r1
	// succ:  l0000702C_thunk_fn000070A0
l0000702C_thunk_fn000070A0:
	call fn000070A0 (retsize: 0;)
	return
	// succ:  fn00007000_exit
l00007060:
	r2 = r1
	r1 = Mem0[r2 + 4<i32>:word32]
	branch p0 l00007070
	// succ:  l0000706C l00007070
l0000706C:
	p0 = r1 == 0<32>
	branch p1 l00007060
	// succ:  l00007070 l00007060
l00007070:
	p1 = r0 >u r1
	r3 = Mem0[r2:word32]
	branch r4 >u r0 l00007098
	goto l00007080
	// succ:  l00007080 l00007078_thunk_fn000070A0
l00007078_thunk_fn000070A0:
	call fn000070A0 (retsize: 0;)
	return
	// succ:  fn00007000_exit
l00007080:
	r4 = r2 + r3
	branch p0 l000070B8
	// succ:  l00007084 l000070B8
l00007084:
	r3 = Mem0[r16 - 8<i32>:word32]
	r4 = r16
	r4 = r4 + (r3 + 0xFFFFFFF8<32>)
	// succ:  l0000708C_thunk_fn000070A0
l0000708C_thunk_fn000070A0:
	call fn000070A0 (retsize: 0;)
	return
	// succ:  fn00007000_exit
l000070B8:
	Mem0[r2 + 4<i32>:word32] = r0
	Mem0[r16 - 4<i32>:word32] = r1
fn00007000_exit:


// fn000070A0
// Return size: 0
define fn000070A0
fn000070A0_entry:
	r29 = fp
	goto l000070A0
	// succ:  l000070A0
l00007030:
	branch r2 == 0<32> l00007098
	// succ:  l0000703C l00007098
l0000703C:
	r2 = Mem0[r0 + 4<i32>:word32]
	r3 = r0 + r1
	r2 = 0<32>
	Mem0[gp + 64<i32>:word32] = r2
	r2 = Mem0[r0 + 4<i32>:word32]
	r2 = Mem0[r2 + 4<i32>:word32]
	r3 = Mem0[r2:word32]
	Mem0[r0 + 4<i32>:word32] = r2
	r1 = r1 + r3
	Mem0[r0:word32] = r1
	// succ:  l00007094
l00007094:
	r0 = 1<32>
	call _Unlocksyslock (retsize: 0;)
	goto l0000709C
	// succ:  l0000709C
l00007098:
	r0 = 1<32>
	// succ:  l0000709C
l0000709C:
	v10 = r30
	r31 = Mem0[v10 + 4<i32>:word32]
	r30 = Mem0[v10:word32]
	r29 = v10 + 8<i32>
	return
	// succ:  fn000070A0_exit
l000070A0:
	r1 = Mem0[r16 - 8<i32>:word32]
	r0 = r2
	r1 = r1 + r3
	goto l00007030
	// succ:  l00007030
fn000070A0_exit:


// fwrite
// Return size: 0
define fwrite
fwrite_entry:
	r29 = fp
	// succ:  l000070C0
l000070C0:
	v3 = r29 - 8<i32>
	Mem0[v3:word32] = r30
	Mem0[v3 + 4<i32>:word32] = r31
	r30 = v3
	r29 = v3 - 56<i32>
	call __save_r16_through_r25 (retsize: 0;)
	r19 = r0
	r0 = 0<32>
	r17_r16 = r3_r1
	r21 = r2 * r16
	r0 = r2
	branch p0 l00007208
	// succ:  l000070E0 l00007208
l000070E0:
	p0 = r8 == 1<32>
	r23 = r21
	r0 = r17
	call _Lockfilelock (retsize: 0;)
	// succ:  l000070E8
l000070E8:
	r0 = Mem0[r17 + 16<i32>:word32]
	r18 = r23
	r1 = Mem0[r17 + 24<i32>:word32]
	r0 = r17
	r22 = 0<32>
	call _Fwprep (retsize: 0;)
	branch p0 l000071C8
	// succ:  l00007100 l000071C8
l00007100:
	p0 = tstbit(r0, 0<32>)
	r0 = Mem0[r17 + 1<i32>:byte]
	r2 = r18
	r3 = r18
	p0 = p0 | !p0
	branch r0 == 0<32> l00007154
	// succ:  l00007120 l00007154
l00007120:
	r0 = r0 & 4<32>
	p1 = p0 | p0
	p0 = p0 | !p0
	call fn00007354 (retsize: 0;)
	r3 = p0
	r1 = Mem0[r29 + 8<i32>:word64]
	r3 = r18
	p0 = r0 == 0<32>
	branch p0 l0000714C
	// succ:  l0000713C l0000714C
l0000713C:
	p1 = r1
	r3 = r0 + (0x41<32> - r19)
	p0 = p0 & p0
	p1 = p0 | p0
	r2 = Mem0[r17 + 24<i32>:word32]
	r0 = Mem0[r17 + 16<i32>:word32]
	r1 = r19
	r5 = p1
	goto l00007154
	// succ:  l00007154
l0000714C:
	r2 = Mem0[r17 + 24<i32>:word32]
	r0 = Mem0[r17 + 16<i32>:word32]
	r1 = r19
	// succ:  l00007154
l00007154:
	Mem0[r29 + 8<i32>:word32] = r5
	r4 = r2 - r0
	p0 = r3 >u r4
	r20 = minu(r3, r4)
	r23 = r18 - r20
	r2 = r20
	r3 = p0
	call memcpy (retsize: 0;)
	r0 = Mem0[r17 + 16<i32>:word32]
	Mem0[r17 + 4<i32>:byte] = r22
	r0 = Mem0[r29 + 4<i32>:word32]
	r22 = r0 + r20
	r0 = Mem0[r29 + 8<i32>:word32]
	branch p0 l000071B8
	// succ:  l00007194 l000071B8
l00007194:
	r24 = Mem0[r17 + 8<i32>:word32]
	r0 = r17 + 0<32>
	branch p0 l000071B8
	// succ:  l000071A4 l000071B8
l000071A4:
	p0 = r0
	call fflush (retsize: 0;)
	r22 = r22 - r24
	r18 = r23 + 0<32>
	branch p0 l000071C8
	// succ:  l000071B4 l000071C8
l000071B4:
	p0 = r0 == 0<32>
	r19 = r19 + r20
	r18 = 0<32>
	r22 = 0<32>
	p0 = r18 == r20
	goto l000071C0
	// succ:  l000071C0
l000071B8:
	r19 = r19 + r20
	r18 = 0<32>
	r22 = 0<32>
	// succ:  l000071C0
l000071C0:
	branch p0 l000070E8
	// succ:  l000071C4 l000070E8
l000071C4:
	// succ:  l000071C8
l000071C8:
	r0 = Mem0[r17 + 1<i32>:byte]
	p0 = r22 == 0<32>
	branch r0 == 0<32> l000071F4
	// succ:  l000071D8 l000071F4
l000071D8:
	r0 = r0 & 8<32>
	r20 = Mem0[r17 + 8<i32>:word32]
	r19 = Mem0[r17 + 16<i32>:word32]
	r0 = r17
	call fflush (retsize: 0;)
	p0 = r0 == 0<32>
	r22 = r19 - r20
	r22 = 0<32>
	r17 = r21 - r18
	r0 = r17
	call _Unlockfilelock (retsize: 0;)
	goto l000071FC
	// succ:  l000071FC
l000071F4:
	r17 = r21 - r18
	r0 = r17
	// succ:  l000071FC
l000071FC:
	r1 = r16
	r0 = r17 - r22
	call __qdsp_udivsi3 (retsize: 0;)
	// succ:  l00007208
l00007208:
	// succ:  l00007208_thunk___restore_r16_through_r25_and_deallocframe
l00007208_thunk___restore_r16_through_r25_and_deallocframe:
	call __restore_r16_through_r25_and_deallocframe (retsize: 0;)
	return
	// succ:  fwrite_exit
fwrite_exit:


// dkw_malloc_init
// Return size: 0
define dkw_malloc_init
dkw_malloc_init_entry:
	r29 = fp
	// succ:  l00007210
l00007210:
	r1 = r1 + (0x41<32> - r0)
	// succ:  l00007214_thunk_fn00006FF4
l00007214_thunk_fn00006FF4:
	call fn00006FF4 (retsize: 0;)
	return
	// succ:  dkw_malloc_init_exit
dkw_malloc_init_exit:


// malloc
// Return size: 0
define malloc
malloc_entry:
	r29 = fp
	// succ:  l00007220
l00007220:
	v3 = r29 - 8<i32>
	Mem0[v3:word32] = r30
	Mem0[v3 + 4<i32>:word32] = r31
	r30 = v3
	r29 = v3 - 8<i32>
	Mem0[r29 + 496<i32>:word64] = r17_r16
	r0 = 1<32>
	r16 = r0
	// succ:  l00007220_thunk_fn0000722C
l00007220_thunk_fn0000722C:
	call fn0000722C (retsize: 0;)
	return
	// succ:  malloc_exit
malloc_exit:


// fn00007224
// Return size: 0
define fn00007224
fn00007224_entry:
	r29 = fp
	// succ:  l00007224
l00007224:
	v3 = r29 - 8<i32>
	Mem0[v3:word32] = r30
	Mem0[v3 + 4<i32>:word32] = r31
	r30 = v3
	r29 = v3 - 8<i32>
	Mem0[r29 + 496<i32>:word64] = r17_r16
	r0 = 1<32>
	// succ:  l00007224_thunk_fn0000722C
l00007224_thunk_fn0000722C:
	call fn0000722C (retsize: 0;)
	return
	// succ:  fn00007224_exit
fn00007224_exit:


// fn0000722C
// Return size: 0
define fn0000722C
fn0000722C_entry:
	r29 = fp
	// succ:  l0000722C
l0000722C:
	r1 = r16 + 0xF<32>
	r17 = r1 & 0xFFFFFFF8<32>
	call _Locksyslock (retsize: 0;)
	r0 = 8<32>
	branch p0 l00007238_thunk_fn000072F8
	goto l00007238_thunk_fn00007240
	// succ:  l00007238_thunk_fn00007240 l00007238_thunk_fn000072F8
l0000722C:
	r1 = r16 + 0xF<32>
	r17 = r1 & 0xFFFFFFF8<32>
	call _Locksyslock (retsize: 0;)
	r0 = 8<32>
	branch p0 l000072F8
	goto l00007238_thunk_fn00007240
	// succ:  l00007238_thunk_fn00007240 l00007238_thunk_fn000072F8
l00007238_thunk_fn00007240:
	call fn00007240 (retsize: 0;)
	return
	// succ:  fn0000722C_exit
l00007238_thunk_fn00007240:
	call fn00007240 (retsize: 0;)
	return
	// succ:  fn0000722C_exit
l00007238_thunk_fn000072F8:
	call fn000072F8 (retsize: 0;)
	return
	// succ:  fn0000722C_exit
l00007238_thunk_fn000072F8:
	call fn000072F8 (retsize: 0;)
	return
	// succ:  fn0000722C_exit
fn0000722C_exit:


// fn00007240
// Return size: 0
define fn00007240
fn00007240_entry:
	r29 = fp
	// succ:  l00007240
l00007240:
	p0 = r9 >u r8
	// succ:  l00007254
l00007254:
	r4 = Mem0[gp + 68<i32>:word32]
	r2 = 8<32>
	r5 = r4
	branch p0 l00007280
	// succ:  l00007264 l00007280
l00007264:
	p0 = r4 == 0<32>
	r0 = r2
	r1 = Mem0[r0:word32]
	r2 = r1
	r2 = r2 + 4<i32>
	r3 = Mem0[r2:word32]
	goto l000072E0
	// succ:  l000072E0
l00007280:
	r0 = r5
	r1 = Mem0[r0:word32]
	r5 = r1
	r5 = r5 + 4<i32>
	r3 = Mem0[r5:word32]
	// succ:  l000072E0
l000072E0:
	branch p0 l000072F8
	goto l000072E4
	// succ:  l000072E4 l000072E0_thunk_fn000072F8
l000072E0_thunk_fn000072F8:
	call fn000072F8 (retsize: 0;)
	return
	// succ:  fn00007240_exit
l000072E4:
	p0 = r0 == 0<32>
	branch r17 >u r2 l00007304
	// succ:  l000072F0 l00007304
l000072F0:
	r2 = r3 + 0xFFFFFFF8<32>
	Mem0[r0:byte] = r2
	r2 = Mem0[r1 + 4<i32>:word32]
	// succ:  l000072FC
l000072FC:
	r0 = 1<32>
	goto l00007340
	// succ:  l00007340
l00007304:
	Mem0[r0:byte] = r2
	r2 = Mem0[r0:word32]
	r3 = Mem0[r1:word32]
	Mem0[r2:byte] = r0
	r0 = r3 - r17
	r3 = 0<32>
	branch p0 l00007334
	// succ:  l00007328 l00007334
l00007328:
	p0 = r2 == 0<32>
	r0 = Mem0[r2 + 4<i32>:word32]
	r3 = r2 + 4<32>
	p0 = r0 == 0<32>
	// succ:  l00007334
l00007334:
	Mem0[gp + 96<i32>:word32] = r3
	r16 = r1 + 8<32>
	r0 = 1<32>
	// succ:  l00007340
l00007340:
	call _Unlocksyslock (retsize: 0;)
	v15 = r30
	r31 = Mem0[v15 + 4<i32>:word32]
	r30 = Mem0[v15:word32]
	r29 = v15 + 8<i32>
	return
	// succ:  fn00007240_exit
fn00007240_exit:


// fn000072F8
// Return size: 0
define fn000072F8
fn000072F8_entry:
	r29 = fp
	// succ:  l000072F8
l000072F8:
	r0 = 1<32>
fn000072F8_exit:


// memchr
// Return size: 0
define memchr
memchr_entry:
	r29 = fp
	// succ:  l00007350
l00007350:
	r3 = r0
	r0 = 0<32>
	branch p0 l00007374
	// succ:  l00007350_thunk_fn00007358 l00007374
l00007350_thunk_fn00007358:
	call fn00007358 (retsize: 0;)
	return
	// succ:  memchr_exit
l00007368:
	branch r2 == 1<32> l00007368
	// succ:  l0000736C l0000737C l00007378 l00007368
l0000736C:
	r4 = Mem0[r3:byte]
	branch r2 == 1<32> l00007368
	goto l00007378
	// succ:  l00007378 l00007368
l00007374:
	return
	// succ:  memchr_exit
l00007378:
	r2 = r2 + 0xFFFFFFFF<32>
	return
	// succ:  memchr_exit
l0000737C:
	// succ:  l0000737C_thunk_puts
l0000737C_thunk_puts:
	call puts (retsize: 0;)
	return
	// succ:  memchr_exit
memchr_exit:


// fn00007354
// Return size: 0
define fn00007354
fn00007354_entry:
	r29 = fp
	// succ:  l00007354
l00007354:
	r3 = r0
	r0 = 0<32>
	// succ:  l00007354_thunk_fn00007358
l00007354_thunk_fn00007358:
	call fn00007358 (retsize: 0;)
	return
	// succ:  fn00007354_exit
fn00007354_exit:


// fn00007358
// Return size: 0
define fn00007358
fn00007358_entry:
	r29 = fp
	// succ:  l00007358
l00007358:
	p0 = r2 == 0<32>
	r1 = r1 & 0xFF<32>
	branch r4 == r1 l0000737C
fn00007358_exit:


// puts
// Return size: 0
define puts
puts_entry:
	r29 = fp
	// succ:  l00007380
l00007380:
	v3 = r29 - 8<i32>
	Mem0[v3:word32] = r30
	Mem0[v3 + 4<i32>:word32] = r31
	r30 = v3
	r29 = v3 - 16<i32>
	Mem0[r29 + 496<i32>:word64] = r17_r16
	r16 = r0
	r0 = 0xE498<32>
	call _Lockfilelock (retsize: 0;)
	call fputs (retsize: 0;)
	branch p0 l000073C0
	// succ:  l000073A8 l000073C0
l000073A8:
	p0 = tstbit(r0, 0<32>)
	p1 = p1 | !p1
	r1_r0 = 0xE4980000000A<64>
	call fputc (retsize: 0;)
	p0 = r0 > 0xFFFFFFFF<32>
	p1 = !p0
	r0 = 0xE498<32>
	r1 = p1
	goto l000073CC
	// succ:  l000073CC
l000073C0:
	r0 = 0xE498<32>
	// succ:  l000073CC
l000073CC:
	call _Unlockfilelock (retsize: 0;)
	r17_r16 = Mem0[r29 + 8<i32>:word64]
	r1 = Mem0[r29:word64]
	p0 = r1
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  puts_exit
puts_exit:


// memcpy
// Return size: 0
define memcpy
memcpy_entry:
	r29 = fp
	goto l000073E0
	// succ:  l000073E0
l000070B8_thunk_fwrite:
	call fwrite (retsize: 0;)
	return
	// succ:  memcpy_exit
l000073E0:
	p1 = r1 == r0
	p0 = r2 >u 0x17<32>
	r14 = r1 | r0
	p2 = r2 == 0<32>
	r14 = r14 | r2
	p3 = r2 >u 0x5F<32>
	r9 = r2 >>u 3<32>
	p1 = p2 | p1
	dcfetch(r1, 0<32>)
	return
	// succ:  memcpy_exit
l000073E0:
	goto l000070B8_thunk_fwrite
	// succ:  l000070B8_thunk_fwrite
memcpy_exit:


// fn000073E4
// Return size: 0
define fn000073E4
fn000073E4_entry:
	r29 = fp
	// succ:  l000073E4
l000073E4:
	p1 = r1 == r0
	p0 = r2 >u 0x17<32>
	r14 = r1 | r0
	r14 = r14 | r2
	p3 = r2 >u 0x5F<32>
	r9 = r2 >>u 3<32>
	p1 = p2 | p1
	dcfetch(r1, 0<32>)
	return
	// succ:  fn000073E4_exit
fn000073E4_exit:


// strlen
// Return size: 0
define strlen
strlen_entry:
	r29 = fp
	// succ:  l000076E0
l000076E0:
	r4 = Mem0[r0:byte]
	r2 = 0<32>
	branch p1 l00007734
	// succ:  l000076EC l00007734
l000076EC:
	p1 = bitsclr(r0, 7<32>)
	branch p0 l00007728
	// succ:  l000076F0 l00007728
l000076F0:
	p0 = r4 == 0<32>
	r5_r4 = Mem0[r0 + r2:word64]
	r2 = r2 + 8<32>
	r7_r6 = 0<64>
	r5_r4 = Mem0[r0 + r2:word64]
	r2 = r2 + 8<32>
	branch p0 l00007704
	goto l00007710
	// succ:  l00007710 l00007704
l00007704:
	r5_r4 = Mem0[r0 + r2:word64]
	r2 = r2 + 8<32>
	branch p0 l00007704
	// succ:  l00007710 l00007704
l00007710:
	p0 = any8(vcmpb__eq(r5_r4, r7_r6))
	p0 = vcmpb__eq(r5_r4, r7_r6)
	r4 = p0
	r2 = r2 + 0xFFFFFFF8<32>
	r4 = ct0(r4)
	return
	// succ:  strlen_exit
l00007728:
	return
	// succ:  strlen_exit
l00007734:
	branch p1 l0000775C
	// succ:  l00007738 l0000775C
l00007738:
	p1 = r4 == 0<32>
	r4 = Mem0[r1 + 1<i32>:byte]
	r2 = r2 + 1<32>
	branch p0 l00007734
	// succ:  l00007748 l00007734
l00007748:
	p0 = bitsclr(r1, 7<32>)
	r4 = Mem0[r12 + r2:word64]
	r2 = r2 + 8<32>
	goto l00007704
	// succ:  l00007704
l0000775C:
	// succ:  l0000775C_thunk_raise
l0000775C_thunk_raise:
	call raise (retsize: 0;)
	return
	// succ:  strlen_exit
strlen_exit:


// raise
// Return size: 0
define raise
raise_entry:
	r29 = fp
	// succ:  l00007760
l00007760:
	v3 = r29 - 8<i32>
	Mem0[v3:word32] = r30
	Mem0[v3 + 4<i32>:word32] = r31
	r30 = v3
	r29 = v3 - 32<i32>
	Mem0[r29 + 496<i32>:word64] = r17_r16
	r1 = 1<32>
	Mem0[r29 + 16<i32>:word64] = r19_r18
	r16 = r0
	r18 = 0xFFFFFFFF<32>
	call signal (retsize: 0;)
	r17 = r0
	branch p0 l000077E4
	// succ:  l00007780 l000077E4
l00007780:
	p0 = r9 == 0<32>
	branch r0 >u 0x1A<32> l00007810
	// succ:  l00007790 l00007810
l00007790:
	r1 = Mem0[gp + 124<i32>:word32]
	r0 = r16 + 0xFFFFFFFE<32>
	r1_r0 = 0x6666664200000027<64>
	Mem0[r3 + 9<i32>:byte] = 0x80<8>
	r2 = r3 + 8<32>
	// succ:  l000077A0
l000077A0:
	r5 = r16 + 9<32>
	r4 = SLICE(r16 *64 r0, word32, 32)
	p0 = r5 >u 0x12<32>
	r3 = r4 >>u 0x1F<32>
	r3 = r3 + (r4 >> r1)
	r16 = r16 - r3 * 0xA<32>
	Mem0[r2:byte] = r4
	r2 = r2 - 1<i32>
	r16 = r3
	r4 = r16 + 0x30<32>
	branch p0 l000077A0
	// succ:  l000077CC l000077A0
l000077CC:
	r1 = 0xE4E8<32>
	r0 = 3<32>
	r17 = r2 + 1<32>
	call fputs (retsize: 0;)
	goto l00007850
	// succ:  l00007850
l000077E4:
	r18 = 0<32>
	branch p0 l000077FC
	// succ:  l000077EC l000077FC
l000077EC:
	p0 = r9 == 2<32>
	r1_r0 = 0<64>
	r18 = 0<32>
	call signal (retsize: 0;)
	call r17 (retsize: 0;)
	r0 = r16
	// succ:  l000077FC
l000077FC:
	r19_r18 = Mem0[r29 + 16<i32>:word64]
	r17_r16 = Mem0[r29 + 24<i32>:word64]
	r0 = r18
	v21 = r30
	r31 = Mem0[v21 + 4<i32>:word32]
	r30 = Mem0[v21:word32]
	r29 = v21 + 8<i32>
	return
	// succ:  raise_exit
l00007810:
	r0 = Mem0[r30 + r0 * 4<32>:word32]
	call r0 (retsize: 0;)
	return
	// succ:  raise_exit
l00007850:
	call fputs (retsize: 0;)
	r1 = 0xE4E8<32>
	r0 = 0xD4CC<32>
	call fputs (retsize: 0;)
	r0 = 1<32>
	call exit (retsize: 0;)
	// succ:  l0000787C_thunk_signal
l0000787C_thunk_signal:
	call signal (retsize: 0;)
	return
	// succ:  raise_exit
raise_exit:


// signal
// Return size: 0
define signal
signal_entry:
	r29 = fp
	// succ:  l00007880
l00007880:
	v3 = r29 - 8<i32>
	Mem0[v3:word32] = r30
	Mem0[v3 + 4<i32>:word32] = r31
	r30 = v3
	r29 = v3 - 16<i32>
	Mem0[r29 + 496<i32>:word64] = r17_r16
	r17_r16 = r1_r0
	Mem0[r29:word64] = r19_r18
	r18 = -1<i32>
	r0 = r16 + 0xFFFFFFFF<32>
	p0 = r0 >u 0x2A<32>
	branch p0 l000078BC
	// succ:  l00007898 l000078BC
l00007898:
	r0 = 1<32>
	branch p0 l000078BC
	// succ:  l000078A0 l000078BC
l000078A0:
	p0 = r9 == -1<i32>
	call _Locksyslock (retsize: 0;)
	r18 = Mem0[0x0000EA80<p32> + r16:word32]
	r0 = 1<32>
	Mem0[0x0000EA80<p32> + r16:word32] = r17
	call _Unlocksyslock (retsize: 0;)
	// succ:  l000078BC
l000078BC:
	r19_r18 = Mem0[r29:word64]
	r17_r16 = Mem0[r29 + 8<i32>:word64]
	r0 = r18
	v16 = r30
	r31 = Mem0[v16 + 4<i32>:word32]
	r30 = Mem0[v16:word32]
	r29 = v16 + 8<i32>
	return
	// succ:  signal_exit
signal_exit:


// strchr
// Return size: 0
define strchr
strchr_entry:
	r29 = fp
	// succ:  l000078D0
l000078D0:
	r2 = r1 & 0xFF<32>
	// succ:  l000078D4
l000078D4:
	r1 = Mem0[r0:byte]
	r1 = 0<32>
	r0 = r0 + 1<32>
	branch p0 l000078D4
	// succ:  l000078E4 l000078D4
l000078E4:
	p0 = r17 == 1<32>
	r0 = r1
	return
	// succ:  strchr_exit
strchr_exit:


// _Tls_get__Ctype
// Return size: 0
define _Tls_get__Ctype
_Tls_get__Ctype_entry:
	r29 = fp
	// succ:  l000078F0
l000078F0:
	v3 = r29 - 8<i32>
	Mem0[v3:word32] = r30
	Mem0[v3 + 4<i32>:word32] = r31
	r30 = v3
	r29 = v3 - 16<i32>
	Mem0[r29 + 496<i32>:word64] = r17_r16
	r1 = 1<32>
	r17 = 0x10050<32>
	r16 = 0x1004C<32>
	Mem0[r29:word64] = r19_r18
	// succ:  l0000790C
l0000790C:
	r0 = memw_locked(r16)
	p0 = r0 > 0<32>
	branch p0 l00007920
	// succ:  l00007918 l00007920
l00007918:
	memw_locked(r16, p0, r1)
	branch p0 l0000790C
	// succ:  l00007920 l0000790C
l00007920:
	r18 = 2<32>
	branch p0 l00007940
	// succ:  l00007928 l00007940
l00007928:
	p0 = r0 == 0<32>
	r1 = 0x6FF0<32>
	r0 = 0x10050<32>
	call sys_Tlsalloc (retsize: 0;)
	Mem0[r16:word32] = r18
	// succ:  l00007940
l00007940:
	branch r0 > 2<32> l00007944
	goto l0000794C
	// succ:  l0000794C l00007944
l00007944:
	branch r0 > 2<32> l00007944
	// succ:  l0000794C l00007944
l0000794C:
	r0 = Mem0[r16:word32]
	r0 = Mem0[r17:word32]
	branch r16 == 0<32> l00007994
	// succ:  l00007960 l00007994
l00007960:
	r16 = r0
	r1_r0 = 0x400000001<64>
	branch r16 == 0<32> l00007990
	// succ:  l0000796C l00007990
l0000796C:
	r16 = r0
	r0 = Mem0[r17:word32]
	r1 = r16
	branch p0 l00007980
	// succ:  l00007974 l00007980
l00007974:
	p0 = r0 == 0<32>
	r0 = r16
	r16 = 0<32>
	call free (retsize: 0;)
	goto l0000798C
	// succ:  l0000798C
l00007980:
	Mem0[r16:byte] = r0
	r0 = 0xD4E2<32>
	goto l00007990
	// succ:  l00007990
l0000798C:
	r19_r18 = Mem0[r29:word64]
	r17_r16 = Mem0[r29 + 8<i32>:word64]
	r0 = r16
	goto l00007994
	// succ:  l00007994
l00007990:
	r19_r18 = Mem0[r29:word64]
	r17_r16 = Mem0[r29 + 8<i32>:word64]
	// succ:  l00007994
l00007994:
	v15 = r30
	r31 = Mem0[v15 + 4<i32>:word32]
	r30 = Mem0[v15:word32]
	r29 = v15 + 8<i32>
	return
	// succ:  _Tls_get__Ctype_exit
_Tls_get__Ctype_exit:


// _Getpctype
// Return size: 0
define _Getpctype
_Getpctype_entry:
	r29 = fp
	// succ:  l00007998
l00007998:
	v3 = r29 - 8<i32>
	Mem0[v3:word32] = r30
	Mem0[v3 + 4<i32>:word32] = r31
	r30 = v3
	r29 = v3 - 0<i32>
	call _Tls_get__Ctype (retsize: 0;)
	v6 = r30
	r31 = Mem0[v6 + 4<i32>:word32]
	r30 = Mem0[v6:word32]
	r29 = v6 + 8<i32>
	return
	// succ:  _Getpctype_exit
_Getpctype_exit:


// _Exit
// Return size: 0
define _Exit
_Exit_entry:
	r29 = fp
	// succ:  l000079B0
l000079B0:
	v3 = r29 - 8<i32>
	Mem0[v3:word32] = r30
	Mem0[v3 + 4<i32>:word32] = r31
	r30 = v3
	r29 = v3 - 0<i32>
	call _exit (retsize: 0;)
	// succ:  l000079BC_thunk__Fwprep
l000079BC_thunk__Fwprep:
	call _Fwprep (retsize: 0;)
	return
	// succ:  _Exit_exit
_Exit_exit:


// _Fwprep
// Return size: 0
define _Fwprep
_Fwprep_entry:
	r29 = fp
	// succ:  l000079C0
l000079C0:
	v3 = r29 - 8<i32>
	Mem0[v3:word32] = r30
	Mem0[v3 + 4<i32>:word32] = r31
	r30 = v3
	r29 = v3 - 8<i32>
	Mem0[r29 + 496<i32>:word64] = r17_r16
	r16 = r0
	r1 = Mem0[r16 + 16<i32>:word32]
	branch r0 >u r1 l000079DC
	// succ:  l000079D8 l000079DC
l000079D8:
	r0 = Mem0[r16 + 24<i32>:word32]
	r0 = Mem0[r16:word16]
	// succ:  l000079DC
l000079DC:
	branch r2 == 4<32> l00007A58
	// succ:  l000079EC l00007A58
l000079EC:
	r2 = r0 & 0x9002<32>
	r3 = r0 & r2
	branch r2 >u r1 l00007A14
	// succ:  l00007A00 l00007A14
l00007A00:
	r2 = Mem0[r16 + 12<i32>:word32]
	r0 = r16
	r1 = 0xFFFFFFFF<32>
	branch p0 l00007A9C
	// succ:  l00007A0C l00007A9C
l00007A0C:
	p0 = r0 == 0<32>
	r0 = Mem0[r16:int16]
	branch r0 == 0<32> l00007A8C
	goto l00007A20
	// succ:  l00007A20 l00007A8C
l00007A14:
	branch r0 == 0<32> l00007A8C
	// succ:  l00007A20 l00007A8C
l00007A20:
	r0 = r0 & 0x800<32>
	branch r0 == r17 l00007A88
	// succ:  l00007A2C l00007A88
l00007A2C:
	r0 = r16 + 0x4C<32>
	r0 = 0x200<32>
	Mem0[r16 + 8<i32>:word32] = r0
	branch p0 l00007A74
	// succ:  l00007A38 l00007A74
l00007A38:
	p0 = r0 == 0<32>
	Mem0[r16 + 16<i32>:word32] = r0
	r1 = Mem0[r16:int16]
	r2 = r0 + 0x200<32>
	Mem0[r16 + 48<i32>:word32] = r0
	Mem0[r16 + 52<i32>:word32] = r0
	r0 = setbit(r1, 0xC<32>)
	Mem0[r16 + 8<i32>:word16] = r0
	Mem0[r16 + 12<i32>:word32] = r2
	goto l00007A80
	// succ:  l00007A80
l00007A58:
	r1 = 2<32> & r1 << 2<32>
	r1 = 0xFFFFFFFF<32>
	r2 = togglebit(r1, 0x1C<32>)
	r0 = r2 | r0
	Mem0[r16:byte] = r0
	goto l00007AA0
	// succ:  l00007AA0
l00007A74:
	Mem0[r16 + 16<i32>:word32] = r17
	Mem0[r16 + 8<i32>:word32] = r17
	r0 = r17 + 1<32>
l00007A80:
	call _Closreg (retsize: 0;)
	r2 = Mem0[r16:int16]
	r0 = Mem0[r16 + 8<i32>:word32]
	r1 = 0<32>
	goto l00007A8C
	// succ:  l00007A8C
l00007A88:
	r2 = Mem0[r16:int16]
	r0 = Mem0[r16 + 8<i32>:word32]
	// succ:  l00007A8C
l00007A8C:
	Mem0[r16 + 20<i32>:word32] = r0
	r3 = Mem0[r16 + 12<i32>:word32]
	r2 = r2 | 0x6000<32>
	Mem0[r16 + 8<i32>:word16] = r2
	Mem0[r16 + 24<i32>:word32] = r3
	// succ:  l00007A9C
l00007A9C:
	v15 = r30
	r31 = Mem0[v15 + 4<i32>:word32]
	r30 = Mem0[v15:word32]
	r29 = v15 + 8<i32>
	return
	// succ:  _Fwprep_exit
l00007AA0:
	v14 = r30
	r31 = Mem0[v14 + 4<i32>:word32]
	r30 = Mem0[v14:word32]
	r29 = v14 + 8<i32>
	return
	// succ:  _Fwprep_exit
_Fwprep_exit:


// _Getmem
// Return size: 0
define _Getmem
_Getmem_entry:
	r29 = fp
	// succ:  l00007AB0
l00007AB0:
	v3 = r29 - 8<i32>
	Mem0[v3:word32] = r30
	Mem0[v3 + 4<i32>:word32] = r31
	r30 = v3
	r29 = v3 - 0<i32>
	branch p0 l00007AC4
	// succ:  l00007AB8 l00007AC4
l00007AB8:
	p0 = r0 > 0<32>
	call __sys_sbrk (retsize: 0;)
	v8 = r30
	r31 = Mem0[v8 + 4<i32>:word32]
	r30 = Mem0[v8:word32]
	r29 = v8 + 8<i32>
	return
	// succ:  _Getmem_exit
l00007AC4:
	v9 = r30
	r31 = Mem0[v9 + 4<i32>:word32]
	r30 = Mem0[v9:word32]
	r29 = v9 + 8<i32>
	return
	// succ:  _Getmem_exit
_Getmem_exit:


// _Ldtob
// Return size: 0
define _Ldtob
_Ldtob_entry:
	r29 = fp
	// succ:  l00007AD0
l00007AD0:
	v3 = r29 - 8<i32>
	Mem0[v3:word32] = r30
	Mem0[v3 + 4<i32>:word32] = r31
	r30 = v3
	r29 = v3 - 256<i32>
	call __save_r16_through_r27 (retsize: 0;)
	r16 = r0
	r26 = r1
	r1_r0 = Mem0[r16:word64]
	r18 = setbit(r26, 0xA<32>)
	Mem0[r29 + 152<i32>:word64] = r1_r0
	p0 = r18 == 0x61<32>
	Mem0[r29:byte] = r0
	branch p0 l00007B1C
	// succ:  l00007B00 l00007B1C
l00007B00:
	r0 = p0
	branch tstbit(r0, -1<i32>) l00007B18
	// succ:  l00007B08 l00007B18
l00007B08:
	Mem0[r16 + 48<i32>:word32] = 1<32>
	p0 = r18 == 0x67<32>
	// succ:  l00007B18
l00007B18:
	r1 = r16
	r0 = r29 + 0x96<32>
	call _LDunscale (retsize: 0;)
	goto l00007B24
	// succ:  l00007B24
l00007B1C:
	r1 = r16
	r0 = r29 + 0x96<32>
	// succ:  l00007B24
l00007B24:
	r1 = CONVERT(SLICE(r0, uint16, 0), uint16, uint32)
	r2 = setbit(r26, 4<32>)
	r0 = Mem0[r16 + 16<i32>:word32]
	r1 = 0x22<32>
	p0 = r2 == 0x65<32>
	r2 = r26 + 0xFFFFFF9A<32>
	branch p0 l00007B8C
	// succ:  l00007B44 l00007B8C
l00007B44:
	r3 = 2<32>
	r4 = 0x26<32>
	// succ:  l00007B80
l00007B80:
	r2 = r2 & 0xFF<32>
	r1 = r4 + 0<32>
	p0 = r3 >u r2
	// succ:  l00007B8C
l00007B8C:
	Mem0[r16 + 28<i32>:word32] = 0xFFFFFF83<32>
	r2 = 3<32>
	call memcpy (retsize: 0;)
	// succ:  l00007B98_thunk___restore_r16_through_r27_and_deallocframe
l00007B98_thunk___restore_r16_through_r27_and_deallocframe:
	call __restore_r16_through_r27_and_deallocframe (retsize: 0;)
	return
	// succ:  _Ldtob_exit
_Ldtob_exit:


// _LDunscale
// Return size: 0
define _LDunscale
_LDunscale_entry:
	r29 = fp
	// succ:  l00008100
l00008100:
	v3 = r29 - 8<i32>
	Mem0[v3:word32] = r30
	Mem0[v3 + 4<i32>:word32] = r31
	r30 = v3
	r29 = v3 - 0<i32>
	call _Dunscale (retsize: 0;)
	v6 = r30
	r31 = Mem0[v6 + 4<i32>:word32]
	r30 = Mem0[v6:word32]
	r29 = v6 + 8<i32>
	return
	// succ:  _LDunscale_exit
_LDunscale_exit:


// _Litob
// Return size: 0
define _Litob
_Litob_entry:
	r29 = fp
	// succ:  l00008110
l00008110:
	v3 = r29 - 8<i32>
	Mem0[v3:word32] = r30
	Mem0[v3 + 4<i32>:word32] = r31
	r30 = v3
	r29 = v3 - 72<i32>
	r2 = 0x18<32>
	call __save_r16_through_r27 (retsize: 0;)
	r16 = r0
	r3 = 0x30<32>
	p0 = r1 == 0x58<32>
	p1 = r1 == 0x6F<32>
	r17 = r3 + 0<32>
	r17 = r2 + 0<32>
	branch p1 l00008140
	// succ:  l00008138 l00008140
l00008138:
	r21_r20 = Mem0[r16:word64]
	goto l00008180
	// succ:  l00008180
l00008140:
	r3_r2 = Mem0[r16:word64]
	p2 = r1 == 0x64<32>
	p1 = !(r1 == 0x58<32>)
	p0 = !(r1 == 0x78<32>)
	r22 = 0x10<32>
	r22 = 0xA<32>
	branch p2 l00008170
	// succ:  l00008160 l00008170
l00008160:
	p0 = fastcorner9(p1, p0)
	p0 = r1 == 0x69<32>
	r21_r20 = r3_r2
	branch p0 l00008180
	// succ:  l0000816C l00008180
l0000816C:
	r0 = 0x3F<32>
	r21_r20 = r3_r2
	goto l00008174
	// succ:  l00008174
l00008170:
	r0 = 0x3F<32>
	// succ:  l00008174
l00008174:
	r21_r20 = r21_r20 + (r21_r20 >> 0x3F<32>)
	goto l00008184
	// succ:  l00008184
l00008180:
	r1_r0 = 0<64>
	// succ:  l00008184
l00008184:
	branch p0 l00008198
	// succ:  l0000818C l00008198
l0000818C:
	p0 = r21_r20 == r1_r0
	branch r0 == 1<32> l000082D8
	// succ:  l00008198 l000082D8
l00008198:
	r0 = Mem0[r16 + 48<i32>:word32]
	r19_r18 = 3<64>
	r23 = 0x17<32>
	r24 = r29 + 0<32>
	r3_r2 = r19_r18
	call __qdsp_umoddi3 (retsize: 0;)
	Mem0[r24 + 23<i32>:byte] = r0
	r0 = Mem0[r20 + r0:byte]
	r3_r2 = r19_r18
	r1_r0 = r21_r20
	call fn0000A4E4 (retsize: 0;)
	r21_r20 = r1_r0
	Mem0[r16:word64] = r21_r20
	branch p0 l00008234
	// succ:  l000081D0 l00008234
l000081D0:
	p0 = r25_r24 > r21_r20
	r23 = r29 + 0<32>
	r26 = r23 + 0xFFFFFFFF<32>
	// succ:  l000081E0
l000081E0:
	r27 = r23 + r26
	r3_r2 = r19_r18
	r1_r0 = r21_r20
	call __qdsp_divdi3 (retsize: 0;)
	Mem0[r16:word64] = r1_r0
	r2 = r26 + 0xFFFFFFFF<32>
	r5_r4 = r0 *u64 r18
	p0 = r25_r24 > r1_r0
	r5 = r5 + r0 * r19
	r5 = r5 + r18 * r1
	r5_r4 = r5_r4
	r21_r20 = r1_r0
	r5_r4 = r21_r20 - r5_r4
	r3 = Mem0[r20 + r4:byte]
	branch p0 l0000822C
	// succ:  l00008220 l0000822C
l00008220:
	r26 = r2
	p0 = r26 > 0<32>
	branch p0 l000081E0
	// succ:  l0000822C l000081E0
l0000822C:
	r23 = r2 + 1<32>
	r0 = Mem0[r16 - 4<i32>:byte]
	branch p0 l00008268
	goto l00008238
	// succ:  l00008238 l00008268
l00008234:
	r0 = Mem0[r16 - 4<i32>:byte]
	// succ:  l00008238
l00008238:
	p0 = r14 == 0x10<32>
	branch r0 == 0<32> l00008270
	// succ:  l00008248 l00008270
l00008248:
	r0 = r0 & 8<32>
	p0 = r23 >u 0x17<32>
	r0 = r29 + 0<32>
	r0 = Mem0[r13 + r23:byte]
	p0 = r0 == 0x30<32>
	branch p0 l00008268
	// succ:  l00008258 l00008268
l00008258:
	r0 = r29 + 0<32>
	r23 = r23 + 0xFFFFFFFF<32>
	r0 = r0 + (r23 + 0x3F<32>)
	Mem0[r0:byte] = 0x30<8>
	// succ:  l00008268
l00008268:
	r0 = Mem0[r16 + 16<i32>:word32]
	r1 = r29 + 0<32>
	r2 = 0x18<32> - r23
	// succ:  l00008270
l00008270:
	Mem0[r16 + 28<i32>:word32] = r2
	r1 = r1 + r23
	call memcpy (retsize: 0;)
	r1 = Mem0[r16 + 48<i32>:word32]
	branch r1 >u r0 l000082AC
	// succ:  l0000828C l000082AC
l0000828C:
	r0 = Mem0[r16 + 28<i32>:word32]
	p0 = r1 > 0xFFFFFFFF<32>
	r2 = Mem0[r16 + 60<i32>:word16]
	Mem0[r16 + 24<i32>:word32] = r0
	r1 = r2 & 0xFFEF<32>
	Mem0[r16 + 60<i32>:word16] = r1
	// succ:  l0000829C_thunk___restore_r16_through_r27_and_deallocframe
l0000829C_thunk___restore_r16_through_r27_and_deallocframe:
	call __restore_r16_through_r27_and_deallocframe (retsize: 0;)
	return
	// succ:  _Litob_exit
l000082AC:
	r1 = r1 & 0x14<32>
	r2 = Mem0[r16 + 20<i32>:word32]
	r1 = Mem0[r16 + 24<i32>:word32]
	r3 = Mem0[r16 + 24<i32>:word32]
	r0 = r1 - r0
	r0 = r0 - r2
	r0 = r0 - r3
	Mem0[r16 + 24<i32>:word32] = r0
	p0 = r0 > 0<32>
	// succ:  l000082D0_thunk___restore_r16_through_r27_and_deallocframe
l000082D0_thunk___restore_r16_through_r27_and_deallocframe:
	call __restore_r16_through_r27_and_deallocframe (retsize: 0;)
	return
	// succ:  _Litob_exit
l000082D8:
	// succ:  l000082DC_thunk__LXp_getw
l000082DC_thunk__LXp_getw:
	call _LXp_getw (retsize: 0;)
	return
	// succ:  _Litob_exit
_Litob_exit:


// _LXp_getw
// Return size: 0
define _LXp_getw
_LXp_getw_entry:
	r29 = fp
	// succ:  l000082E0
l000082E0:
	v3 = r29 - 8<i32>
	Mem0[v3:word32] = r30
	Mem0[v3 + 4<i32>:word32] = r31
	r30 = v3
	r29 = v3 - 8<i32>
	Mem0[r29 + 496<i32>:word64] = r17_r16
	p0 = r1 == 0<32>
	r17_r16 = Mem0[gp + 192<i32>:word64]
	branch p0 l00008348
	// succ:  l000082F0 l00008348
l000082F0:
	branch p0 l000082FC
	// succ:  l000082F4 l000082FC
l000082F4:
	p0 = r1 == 2<32>
	r17_r16 = Mem0[r0:word64]
	goto l00008348
	// succ:  l00008348
l000082FC:
	r3_r2 = Mem0[gp + 192<i32>:word64]
	r17_r16 = Mem0[r0:word64]
	branch p0 l0000834C
	// succ:  l0000830C l0000834C
l0000830C:
	p0 = r17_r16 == r3_r2
	r5_r4 = Mem0[r0 + 8<i32>:word64]
	branch p0 l0000832C
	// succ:  l00008314 l0000832C
l00008314:
	p0 = r1 > 2<32>
	branch p0 l0000834C
	// succ:  l0000831C l0000834C
l0000831C:
	p0 = r5_r4 == r3_r2
	r1_r0 = r17_r16
	r3_r2 = r5_r4
	branch p0 l0000832C
	// succ:  l00008328 l0000832C
l00008328:
	p0 = r1 == 4<32>
	goto l00008340
	// succ:  l00008340
l0000832C:
	r3_r2 = Mem0[r0 + 16<i32>:word64]
	r1_r0 = r5_r4
	call __hexagon_adddf3 (retsize: 0;)
	r1_r0 = r17_r16
	r3_r2 = r1_r0
	// succ:  l00008340
l00008340:
	call __hexagon_adddf3 (retsize: 0;)
	r17_r16 = r1_r0
	// succ:  l00008348
l00008348:
	v11 = r30
	r31 = Mem0[v11 + 4<i32>:word32]
	r30 = Mem0[v11:word32]
	r29 = v11 + 8<i32>
	return
l0000834C:
	v19 = r30
	r31 = Mem0[v19 + 4<i32>:word32]
	r30 = Mem0[v19:word32]
	r29 = v19 + 8<i32>
	return
	// succ:  _LXp_getw_exit _LXp_getw_exit
_LXp_getw_exit:


// _LXp_setw
// Return size: 0
define _LXp_setw
_LXp_setw_entry:
	r29 = fp
	// succ:  l00008350
l00008350:
	v3 = r29 - 8<i32>
	Mem0[v3:word32] = r30
	Mem0[v3 + 4<i32>:word32] = r31
	r30 = v3
	r29 = v3 - 48<i32>
	call __save_r16_through_r23 (retsize: 0;)
	r17_r16 = r1_r0
	r19_r18 = r3_r2
	Mem0[r29 + 8<i32>:word64] = r19_r18
	branch p0 l00008448
	// succ:  l00008360_thunk_fn00008368 l00008360_thunk_fn00008448
l00008360_thunk_fn00008368:
	call fn00008368 (retsize: 0;)
	return
	// succ:  _LXp_setw_exit
l00008360_thunk_fn00008448:
	call fn00008448 (retsize: 0;)
	return
	// succ:  _LXp_setw_exit
l00008574:
	branch r17 >u r0 l00008590
	// succ:  l0000857C l00008590
l0000857C:
	r0 = r6
	r5_r4 = Mem0[r1:word64]
	r1 = r1 + 8<32>
	branch p0 l00008574
	// succ:  l0000858C l00008574
l0000858C:
	p0 = r5_r4 == r25_r24
	r0 = r0 + 1<32>
	goto l000085A4
	// succ:  l000085A4
l00008590:
	r0 = r0 + 1<32>
	// succ:  l000085A4
l000085A4:
	r1 = r0 - r16
	r0 = r21 + (r0 << 3<32>)
	__nyi_loop0(0x000085B0<p32>, r1)
	r5_r4 = Mem0[r0:word64]
	Mem0[r0 + 8<i32>:word64] = r5_r4
	r0 = r0 + 0xFFFFFFF8<32>
	// succ:  l000085BC_thunk_fn00008368
l000085BC_thunk_fn00008368:
	call fn00008368 (retsize: 0;)
	return
	// succ:  _LXp_setw_exit
l00008604:
	branch r17 >u r0 l00008628
	// succ:  l00008610 l00008628
l00008610:
	r0 = r0 + 1<32>
	r2 = r1 + 8<32>
	Mem0[r1 - 8<i32>:word64] = r5_r4
	r1 = r2
	branch p0 l00008604
	// succ:  l00008620 l00008604
l00008620:
	p0 = r5_r4 == r25_r24
	r0 = Mem0[r29:word32]
	Mem0[r0:word64] = r23_r22
	// succ:  l00008628
l00008628:
	r3_r2 = Mem0[r18:word64]
	branch p0 l00008784
	goto l00008634
	// succ:  l00008634 l0000862C_thunk_fn00008468
l0000862C_thunk_fn00008468:
	call fn00008468 (retsize: 0;)
	return
	// succ:  _LXp_setw_exit
l00008634:
	p0 = r3_r2 == r25_r24
	Mem0[r29 + 40<i32>:word64] = r3_r2
	r1 = r29 + 0x28<32>
	r0 = r29 + 0x1E<32>
	call _LDunscale (retsize: 0;)
	// succ:  l0000863C_thunk_fn00008468
l0000863C_thunk_fn00008468:
	call fn00008468 (retsize: 0;)
	return
	// succ:  _LXp_setw_exit
_LXp_setw_exit:


// fn00008354
// Return size: 0
define fn00008354
fn00008354_entry:
	r29 = fp
	// succ:  l00008354
l00008354:
	v3 = r29 - 8<i32>
	Mem0[v3:word32] = r30
	Mem0[v3 + 4<i32>:word32] = r31
	r30 = v3
	r29 = v3 - 48<i32>
	r17_r16 = r1_r0
	r19_r18 = r3_r2
	Mem0[r29 + 8<i32>:word64] = r19_r18
	branch p0 l00008360_thunk_fn00008448
	// succ:  l00008360_thunk_fn00008368 l00008360_thunk_fn00008448
l00008360_thunk_fn00008368:
	call fn00008368 (retsize: 0;)
	return
	// succ:  fn00008354_exit
l00008360_thunk_fn00008448:
	call fn00008448 (retsize: 0;)
	return
	// succ:  fn00008354_exit
fn00008354_exit:


// fn00008368
// Return size: 0
define fn00008368
fn00008368_entry:
	r29 = fp
	// succ:  l00008368
l00008368:
	p0 = r9 > 0<32>
	r1 = r29 + 8<32>
	r0 = r29 + 6<32>
	branch p0 l000083A0
	// succ:  l00008374 l000083A0
l00008374:
	p0 = r9 == 2<32>
	call _LDunscale (retsize: 0;)
	r1 = CONVERT(SLICE(r0, uint16, 0), uint16, uint32)
	p0 = r0 > 0<32>
	branch p0 l000083AC
	// succ:  l00008388 l000083AC
l00008388:
	r1_r0 = Mem0[r29 + 8<i32>:word64]
	r3_r2 = 0<64>
	Mem0[r16 + 8<i32>:word64] = r3_r2
	Mem0[r16:word64] = r1_r0
	goto l0000845C
	// succ:  l0000845C
l000083A0:
	Mem0[r16:word64] = r19_r18
	goto l00008420
	// succ:  l00008420
l000083AC:
	r0 = r29 + 8<32>
	r1 = 0x1A<32>
	call _LDint (retsize: 0;)
	r1 = Mem0[r29 + 6<i32>:int16]
	r0 = r29 + 8<32>
	call _LDscale (retsize: 0;)
	r3_r2 = Mem0[r29 + 8<i32>:word64]
	r1_r0 = r19_r18
	Mem0[r16:word64] = r3_r2
	call __hexagon_fast2_subdf3 (retsize: 0;)
	p0 = r17 > 2<32>
	r19_r18 = r1_r0
	Mem0[r16 + 8<i32>:word64] = r19_r18
	branch p0 l0000843C
	// succ:  l000083E0 l0000843C
l000083E0:
	r23_r22 = Mem0[gp + 192<i32>:word64]
	r20 = r16 + 8<32>
	r0 = r29 + 6<32>
	branch p1 l00008440
	// succ:  l000083F4 l00008440
l000083F4:
	p1 = r19_r18 == r23_r22
	r1 = r20
	call _LDunscale (retsize: 0;)
	call _LDint (retsize: 0;)
	r1 = Mem0[r29 + 6<i32>:int16]
	r0 = r20
	call _LDscale (retsize: 0;)
	r3_r2 = Mem0[r20:word64]
	r1_r0 = r19_r18
	call __hexagon_fast2_subdf3 (retsize: 0;)
	Mem0[r16 + 16<i32>:word64] = r1_r0
	branch p0 l00008448
l00008420:
	Mem0[r16 + 16<i32>:word64] = r1_r0
	// succ:  l00008424 l00008420_thunk_fn00008448
l00008420_thunk_fn00008448:
	call fn00008448 (retsize: 0;)
	return
	// succ:  fn00008368_exit
l00008424:
	p0 = r9 > 6<32>
	branch p0 l0000844C
	// succ:  l0000842C l0000844C
l0000842C:
	p0 = r1_r0 == r23_r22
	r1_r0 = 0<64>
	Mem0[r16 + 24<i32>:word64] = r1_r0
	// succ:  l00008438_thunk_fn00008468
l00008438_thunk_fn00008468:
	call fn00008468 (retsize: 0;)
	return
	// succ:  fn00008368_exit
l0000843C:
	branch p0 l00008448
	goto l00008440
	// succ:  l00008440 l0000843C_thunk_fn00008448
l0000843C_thunk_fn00008448:
	call fn00008448 (retsize: 0;)
	return
	// succ:  fn00008368_exit
l00008440:
	r1_r0 = 0<64>
	Mem0[r16 + 16<i32>:word64] = r1_r0
	// succ:  l00008444_thunk_fn00008448
l00008444_thunk_fn00008448:
	call fn00008448 (retsize: 0;)
	return
	// succ:  fn00008368_exit
l0000844C:
	// succ:  l00008528 l0000852C
l0000845C:
	Mem0[r29 + 8<i32>:word32] = r0
	r17 = r1
	// succ:  l0000845C_thunk_fn00008460
l0000845C_thunk_fn00008460:
	call fn00008460 (retsize: 0;)
	return
	// succ:  fn00008368_exit
l00008510:
	r1 = Mem0[r29 + 4<i32>:word64]
	r0 = Mem0[r29 + 8<i32>:word64]
	r26 = r16 + 1<32>
	r27 = r1 + (r16 << 3<32>)
	r18 = r0 + (r16 << 3<32>)
	r3_r2 = Mem0[r18:word64]
	goto l00008530
	// succ:  l00008530
l00008528:
	Mem0[r18:word64] = r3_r2
	Mem0[r29 + 40<i32>:word64] = r23_r22
	// succ:  l0000852C
l0000852C:
	call fn00008468 (retsize: 0;)
	return
	// succ:  l00008530 fn00008368_exit
l00008530:
	Mem0[r29 + 16<i32>:word64] = r3_r2
	r1 = r29 + 0x10<32>
	r0 = r29 + 0xE<32>
	call _LDunscale (retsize: 0;)
	branch p0 l00008780
	goto l00008540
	// succ:  l00008540 l0000853C_thunk_fn00008780
l0000853C_thunk_fn00008780:
	call fn00008780 (retsize: 0;)
	return
	// succ:  fn00008368_exit
l00008540:
	p0 = r16 > 0<32>
	branch r0 == 0<32> l00008768
	// succ:  l0000854C l00008768
l0000854C:
	r0 = CONVERT(SLICE(r0, uint16, 0), uint16, uint32)
	r4 = Mem0[r29 + 14<i32>:int16]
	r5 = r4 - r0
	p0 = r5 > 0xFFFFFFE6<32>
	r1 = r27 + 0<32>
	r6 = r26 + 0<32>
	branch p0 l000085C0
	// succ:  l00008564 l000085C0
l00008564:
	r3_r2 = Mem0[r29 + 40<i32>:word64]
	branch p0 l000085C4
	// succ:  l00008570 l000085C4
l00008570:
	p0 = r3_r2 == r25_r24
	branch r17 >u r0 l00008590
l000085C0:
	r1_r0 = Mem0[r29 + 40<i32>:word64]
	branch p0 l000085D8
	goto l000085C8
	// succ:  l000085C8 l000085D8
l000085C4:
	r1_r0 = Mem0[r29 + 40<i32>:word64]
	branch p0 l000085DC
	goto l000085D0
	// succ:  l000085D0 l000085DC
l000085C8:
	p0 = r5 > 0x12<32>
	branch p0 l000085DC
	// succ:  l000085D0 l000085DC
l000085D0:
	p0 = r1_r0 == r25_r24
	r16 = r16 + 1<32>
	goto l00008748
	// succ:  l00008748
l000085D8:
	r3_r2 = Mem0[r18:word64]
	call __hexagon_adddf3 (retsize: 0;)
	goto l000085E0
	// succ:  l000085E0
l000085DC:
	r3_r2 = Mem0[r18:word64]
	// succ:  l000085E0
l000085E0:
	r3_r2 = r1_r0
	Mem0[r18:word64] = r3_r2
	branch p0 l00008638
	// succ:  l000085F0 l00008638
l000085F0:
	p0 = r3_r2 == r25_r24
	r1 = Mem0[r29 + 4<i32>:word64]
	r0 = r16
	r1 = r1 + (r16 << 3<32>)
	branch r17 >u r0 l00008628
l00008638:
	Mem0[r29 + 40<i32>:word64] = r3_r2
	r1 = r29 + 0x28<32>
	r0 = r29 + 0x1E<32>
	// succ:  l00008640
l00008640:
	r0 = r19 + 0xFFFFFFE6<32>
	r1 = Mem0[r29 + 30<i32>:int16]
	r0 = r29 + 0x28<32>
	call fn00009B54 (retsize: 0;)
	r1 = SLICE(r1, word16, 0) - SLICE(r0, word16, 0)
	r1 = Mem0[r29 + 30<i32>:int16]
	r0 = r29 + 0x28<32>
	call _LDscale (retsize: 0;)
	r3_r2 = Mem0[r29 + 40<i32>:word64]
	r1_r0 = Mem0[r18:word64]
	call __hexagon_fast2_subdf3 (retsize: 0;)
	Mem0[r18:word64] = r1_r0
	branch p0 l000086B0
	// succ:  l0000867C l000086B0
l0000867C:
	p0 = r1_r0 == r25_r24
	r0 = Mem0[r29 + 4<i32>:word64]
	r1 = r16
	r0 = r0 + (r16 << 3<32>)
	r1 = r1 + 1<32>
	r2 = r0 + 8<32>
	// succ:  l00008688
l00008688:
	r5_r4 = Mem0[r0:word64]
	Mem0[r0 - 8<i32>:word64] = r5_r4
	r0 = r2
	branch p0 l00008688
	// succ:  l000086A4 l00008688
l000086A4:
	p0 = r5_r4 == r25_r24
	r0 = Mem0[r29:word32]
	Mem0[r0:word64] = r23_r22
	r16 = 0<32>
	r19 = 0x800<32>
	r26 = r16 + 0xFFFFFFFF<32>
	goto l000086B8
	// succ:  l000086B8
l000086B0:
	r16 = 0<32>
	r19 = 0x800<32>
	// succ:  l000086B8
l000086B8:
	p0 = r26 == 0<32>
	r0 = r29 + 0xE<32>
	r1 = r29 + 0x20<32>
	branch p0 l00008748
	// succ:  l000086C8 l00008748
l000086C8:
	r3_r2 = Mem0[r18 - 16<i32>:word64]
	r16 = r26
	Mem0[r29 + 32<i32>:word64] = r3_r2
	call _LDunscale (retsize: 0;)
	r19 = Mem0[r29 + 14<i32>:int16]
	// succ:  l00008748
l00008748:
	branch p0 l00008510
	// succ:  l0000874C l00008510
l0000874C:
	p0 = r9 > -1<i32>
	// succ:  l00008750_thunk_fn00008780
l00008750_thunk_fn00008780:
	call fn00008780 (retsize: 0;)
	return
	// succ:  fn00008368_exit
l00008768:
	Mem0[r18:word64] = r3_r2
	branch p0 l00008780
	goto l00008770
	// succ:  l00008770 l00008768_thunk_fn00008780
l00008768_thunk_fn00008780:
	call fn00008780 (retsize: 0;)
	return
	// succ:  fn00008368_exit
l00008770:
	p0 = r9 > -1<i32>
	r1 = Mem0[r29 + 8<i32>:word32]
	Mem0[r30 + r0 * 8<32>:word64] = r23_r22
	r0 = Mem0[r29 + 8<i32>:word32]
	// succ:  l00008774_thunk___restore_r16_through_r27_and_deallocframe
l00008774_thunk___restore_r16_through_r27_and_deallocframe:
	call __restore_r16_through_r27_and_deallocframe (retsize: 0;)
	return
	// succ:  fn00008368_exit
fn00008368_exit:


// fn00008448
// Return size: 0
define fn00008448
fn00008448_entry:
	r29 = fp
	// succ:  l00008448
l00008448:
fn00008448_exit:


// _LXp_addh
// Return size: 0
define _LXp_addh
_LXp_addh_entry:
	r29 = fp
	// succ:  l00008450
l00008450:
	v3 = r29 - 8<i32>
	Mem0[v3:word32] = r30
	Mem0[v3 + 4<i32>:word32] = r31
	r30 = v3
	r29 = v3 - 96<i32>
	call __save_r16_through_r27 (retsize: 0;)
	// succ:  l00008450_thunk_fn00008458
l00008450_thunk_fn00008458:
	call fn00008458 (retsize: 0;)
	return
	// succ:  _LXp_addh_exit
_LXp_addh_exit:


// fn00008454
// Return size: 0
define fn00008454
fn00008454_entry:
	r29 = fp
	// succ:  l00008454
l00008454:
	v3 = r29 - 8<i32>
	Mem0[v3:word32] = r30
	Mem0[v3 + 4<i32>:word32] = r31
	r30 = v3
	r29 = v3 - 96<i32>
	// succ:  l00008454_thunk_fn00008458
l00008454_thunk_fn00008458:
	call fn00008458 (retsize: 0;)
	return
	// succ:  fn00008454_exit
fn00008454_exit:


// fn00008458
// Return size: 0
define fn00008458
fn00008458_entry:
	r29 = fp
	// succ:  l00008458
l00008458:
	Mem0[r29 + 8<i32>:word32] = r0
	r17 = r1
	r19_r18 = r3_r2
	goto l00008458_thunk_fn00008460
	// succ:  l00008458_thunk_fn00008460
l00008458:
	Mem0[r29 + 8<i32>:word32] = r0
	r17 = r1
	r19_r18 = r3_r2
	goto l00008458_thunk_fn00008460
	// succ:  l00008458_thunk_fn00008460
l00008458_thunk_fn00008460:
	call fn00008460 (retsize: 0;)
	return
	// succ:  fn00008458_exit
l00008458_thunk_fn00008460:
	call fn00008460 (retsize: 0;)
	return
	// succ:  fn00008458_exit
fn00008458_exit:


// fn00008460
// Return size: 0
define fn00008460
fn00008460_entry:
	r29 = fp
	// succ:  l00008460
l00008460:
	Mem0[r29 + 32<i32>:word64] = r19_r18
	Mem0[r29 + 40<i32>:word64] = r19_r18
	branch p0 l00008460_thunk_fn00008780
	goto l00008460_thunk_fn00008468
	// succ:  l00008460_thunk_fn00008468 l00008460_thunk_fn00008780
l00008460:
	Mem0[r29 + 32<i32>:word64] = r19_r18
	Mem0[r29 + 40<i32>:word64] = r19_r18
	branch p0 l00008780
	goto l00008460_thunk_fn00008468
	// succ:  l00008460_thunk_fn00008468 l00008460_thunk_fn00008780
l00008460_thunk_fn00008468:
	call fn00008468 (retsize: 0;)
	return
	// succ:  fn00008460_exit
l00008460_thunk_fn00008468:
	call fn00008468 (retsize: 0;)
	return
	// succ:  fn00008460_exit
l00008460_thunk_fn00008780:
	call fn00008780 (retsize: 0;)
	return
	// succ:  fn00008460_exit
l00008460_thunk_fn00008780:
	call fn00008780 (retsize: 0;)
	return
	// succ:  fn00008460_exit
fn00008460_exit:


// fn00008468
// Return size: 0
define fn00008468
fn00008468_entry:
	r29 = fp
	// succ:  l00008468
l00008468:
	p0 = r25 == 1<32>
	r0 = r29 + 0x1E<32>
	r1 = r29 + 0x20<32>
	call _LDunscale (retsize: 0;)
	// succ:  l00008470
l00008470:
	branch p0 l000084E0
	// succ:  l00008478 l000084E0
l00008478:
	p0 = r0 > 0<32>
	r0 = Mem0[r29 + 8<i32>:word32]
	branch p0 l00008758
	// succ:  l00008484 l00008758
l00008484:
	p0 = SLICE(r0, word16, 0) == SLICE(2<16>, word16, 0)
	call _LDtest (retsize: 0;)
	branch p0 l00008750
	// succ:  l0000848C l00008750
l0000848C:
	p0 = r16 > 0<32>
	branch p0 l00008784
	// succ:  l00008494 l00008784
l00008494:
	p0 = SLICE(r0, word16, 0) == SLICE(2<16>, word16, 0)
	r0 = Mem0[r29 + 8<i32>:word64]
	r1 = r29 + 0x28<32>
	r0 = Mem0[r0 + 6<i32>:int16]
	r1 = r1 | 6<32>
	r1 = Mem0[r1:int16]
	r0 = r0 ^ r1
	branch tstbit(r0, -1<i32>) l00008784
	// succ:  l000084B4 l00008784
l000084B4:
	r0 = CONVERT(SLICE(r0, int16, 0), int16, int32)
	r0 = 1<32>
	r16 = 0x30<32>
	r2 = Mem0[r29 + 8<i32>:word32]
	r1_r0 = Mem0[r16:word64]
	p0 = r17 > 1<32>
	Mem0[r2:word64] = r1_r0
	branch p0 l00008780
	// succ:  l000084D0 l000084D4_thunk_fn00008780
l000084D0:
	r2 = Mem0[r29 + 8<i32>:word64]
	r1_r0 = 0<64>
	Mem0[r2 + 8<i32>:word64] = r1_r0
	r0 = Mem0[r29 + 8<i32>:word32]
	// succ:  l000084D4_thunk___restore_r16_through_r27_and_deallocframe
l000084D4_thunk___restore_r16_through_r27_and_deallocframe:
	call __restore_r16_through_r27_and_deallocframe (retsize: 0;)
	return
	// succ:  fn00008468_exit
l000084D4_thunk_fn00008780:
	call fn00008780 (retsize: 0;)
	return
	// succ:  fn00008468_exit
l000084E0:
	branch p0 l00008780
	goto l000084E4
	// succ:  l000084E4 l000084E0_thunk_fn00008780
l000084E0_thunk_fn00008780:
	call fn00008780 (retsize: 0;)
	return
	// succ:  fn00008468_exit
l000084E4:
	p0 = tstbit(r0, 0<32>)
	r16 = 0<32>
	branch p0 l00008780
	goto l000084EC
	// succ:  l000084EC l000084E8_thunk_fn00008780
l000084E8_thunk_fn00008780:
	call fn00008780 (retsize: 0;)
	return
	// succ:  fn00008468_exit
l000084EC:
	p0 = r25 > 0<32>
	r25_r24 = Mem0[gp + 192<i32>:word64]
	r0 = Mem0[r29 + 8<i32>:word32]
	r19 = 0x800<32>
	r20 = r17 + 0xFFFFFFFF<32>
	r21 = r0 + 0xFFFFFFF8<32>
	r1 = r0 + 8<32>
	r0 = r0 + (r20 << 3<32>)
	r23_r22 = 0<64>
	Mem0[r29:word32] = r0
	Mem0[r29 + 4<i32>:word32] = r1
	// succ:  l00008514_thunk_fn00008368
l00008514_thunk_fn00008368:
	call fn00008368 (retsize: 0;)
	return
	// succ:  fn00008468_exit
l00008750:
	r19_r18 = Mem0[r29 + 40<i32>:word64]
	r0 = Mem0[r29 + 8<i32>:word32]
	// succ:  l00008758
l00008758:
	Mem0[r0:word64] = r19_r18
	r0 = Mem0[r29 + 8<i32>:word32]
	// succ:  l00008758_thunk___restore_r16_through_r27_and_deallocframe
l00008758_thunk___restore_r16_through_r27_and_deallocframe:
	call __restore_r16_through_r27_and_deallocframe (retsize: 0;)
	return
	// succ:  fn00008468_exit
l00008784:
	r0 = Mem0[r29 + 8<i32>:word32]
	// succ:  l00008784_thunk__LXp_mulh
l00008784_thunk__LXp_mulh:
	call _LXp_mulh (retsize: 0;)
	return
	// succ:  fn00008468_exit
fn00008468_exit:


// fn00008780
// Return size: 0
define fn00008780
fn00008780_entry:
	r29 = fp
	// succ:  l00008780
l00008780:
	r0 = Mem0[r29 + 8<i32>:word32]
	// succ:  l00008780_thunk___restore_r16_through_r27_and_deallocframe
l00008780_thunk___restore_r16_through_r27_and_deallocframe:
	call __restore_r16_through_r27_and_deallocframe (retsize: 0;)
	return
	// succ:  fn00008780_exit
fn00008780_exit:


// _LXp_mulh
// Return size: 0
define _LXp_mulh
_LXp_mulh_entry:
	r29 = fp
	// succ:  l00008788
l00008788:
	v3 = r29 - 8<i32>
	Mem0[v3:word32] = r30
	Mem0[v3 + 4<i32>:word32] = r31
	r30 = v3
	r29 = v3 - 96<i32>
	call __save_r16_through_r27 (retsize: 0;)
	r19_r18 = r3_r2
	r17_r16 = r1_r0
	r3_r2 = r19_r18
	branch p0 l000088EC
	// succ:  l000087A0 l000088EC
l000087A0:
	p0 = r9 > 1<32>
	r1_r0 = Mem0[r16:word64]
	call __hexagon_fast_muldf3 (retsize: 0;)
	r0 = r29 + 0x10<32>
	r3_r2 = r1_r0
	Mem0[r29 + 16<i32>:word64] = r3_r2
	call _LDtest (retsize: 0;)
	branch tstbit(r20, -1<i32>) l00008808
	// succ:  l000087CC l00008808
l000087CC:
	r20 = r0
	r1 = r29 + 0x10<32>
	r23_r22 = 0<64>
	branch r0 == 4<32> l000087DC
	// succ:  l000087D4 l000087DC
l000087D4:
	r0 = 1<32>
	r1_r0 = Mem0[r29 + 16<i32>:word64]
	p0 = r20 > 0<32>
	goto l000087E0
	// succ:  l000087E0
l000087DC:
	r1_r0 = Mem0[r29 + 16<i32>:word64]
	// succ:  l000087E0
l000087E0:
	Mem0[r16:word64] = r1_r0
	branch p0 l000088EC
	// succ:  l000087E8 l000088EC
l000087E8:
	branch p0 l000088EC
	// succ:  l000087EC l000088EC
l000087EC:
	p0 = r9 > 3<32>
	r1_r0 = 0<64>
	Mem0[r16 + 8<i32>:word64] = r1_r0
	goto l00008870
	// succ:  l00008870
l00008808:
	Mem0[r16:word64] = r23_r22
	Mem0[r29:word32] = r0
	p0 = r25 > 3<32>
	r0 = r25 + r24
	r1 = r29 + 0x10<32>
	branch p0 l00008868
	goto l00008820
	// succ:  l00008820 l00008868
l00008818:
	p0 = r25 > 3<32>
	r0 = r25 + r24
	r20 = r16 + (r0 << 3<32>)
	r21 = r1 + (r25 << 3<32>)
	goto l00008828
	// succ:  l00008828
l00008820:
	r20 = r16 + (r0 << 3<32>)
	r21 = r1 + (r25 << 3<32>)
	// succ:  l00008828
l00008828:
	branch r17 >u r0 l00008864
	// succ:  l00008834 l00008864
l00008834:
	r0 = r24 + r25
	r3_r2 = r19_r18
	r25 = r25 + 1<32>
	branch p0 l00008864
	// succ:  l00008844 l00008864
l00008844:
	p0 = r1_r0 == r27_r26
	call __hexagon_fast_muldf3 (retsize: 0;)
	Mem0[r21:word64] = r1_r0
	Mem0[r20:word64] = r23_r22
	r20 = r20 + 8<i32>
	p0 = r25 > 3<32>
	r21 = r21 + 8<32>
	branch p0 l00008828
	// succ:  l0000885C l00008828
l0000885C:
	goto l00008868
	// succ:  l00008868
l00008864:
	Mem0[r21:word64] = r23_r22
	// succ:  l00008868
l00008868:
	r3_r2 = Mem0[r29 + 16<i32>:word64]
	r0 = r29 + 6<32>
	r1 = r29 + 8<32>
	branch p0 l000088F0
	goto l0000887C
	// succ:  l0000887C l000088F0
l00008870:
	r0 = r29 + 6<32>
	r1 = r29 + 8<32>
	branch p0 l000088F0
	// succ:  l0000887C l000088F0
l0000887C:
	Mem0[r29 + 8<i32>:word64] = r3_r2
	call _LDunscale (retsize: 0;)
	r0 = r29 + 8<32>
	r1 = 0x1A<32>
	call _LDint (retsize: 0;)
	r1 = Mem0[r29 + 6<i32>:int16]
	r0 = r29 + 8<32>
	call _LDscale (retsize: 0;)
	r3_r2 = Mem0[r29 + 8<i32>:word64]
	r1_r0 = r17_r16
	call _LXp_addh (retsize: 0;)
	r1_r0 = Mem0[r29 + 16<i32>:word64]
	r3_r2 = Mem0[r29 + 8<i32>:word64]
	call __hexagon_fast2_subdf3 (retsize: 0;)
	r1_r0 = r17_r16
	r3_r2 = r1_r0
	call _LXp_addh (retsize: 0;)
	r1 = Mem0[r29:word64]
	r0 = 0<32>
	branch r25 >u r0 l000088E8
l000088C4:
	branch r25 >u r0 l000088E8
	// succ:  l000088D0 l000088E8
l000088D0:
	r0 = r0 + 1<32>
	r2 = r1 + 8<32>
	Mem0[r1 - 8<i32>:word64] = r5_r4
	r1 = r2
	branch p0 l000088C4
	// succ:  l000088E0 l000088C4
l000088E0:
	p0 = r5_r4 == r27_r26
	branch r17 >u r24 l00008818
	goto l000088F0
	// succ:  l000088F0 l00008818
l000088E8:
	branch r17 >u r24 l00008818
	goto l000088F0
	// succ:  l000088F0 l00008818
l000088EC:
l000088F0:
	r24 = r24 + 1<32>
	r25 = r25 + 0xFFFFFFFF<32>
	// succ:  l0000897C l00008980
l0000897C:
	r1_r0 = r18_r17
	r20 = r20 + 1<32>
	// succ:  l00008980
l00008980:
	call fn00008454 (retsize: 0;)
	r3 = togglebit(r3, 0x1E<32>)
	r19 = r19 + 8<32>
	branch p0 l00008970
	goto l00008988_thunk_fn00008994
	// succ:  l00008988_thunk_fn00008994 l00008988_thunk_fn00008970
l00008988_thunk_fn00008970:
	call fn00008970 (retsize: 0;)
	return
	// succ:  _LXp_mulh_exit
l00008988_thunk_fn00008994:
	call fn00008994 (retsize: 0;)
	return
	// succ:  _LXp_mulh_exit
_LXp_mulh_exit:


// _LXp_movx
// Return size: 0
define _LXp_movx
_LXp_movx_entry:
	r29 = fp
	// succ:  l000088F4
l000088F4:
	v3 = r29 - 8<i32>
	Mem0[v3:word32] = r30
	Mem0[v3 + 4<i32>:word32] = r31
	r30 = v3
	r29 = v3 - 8<i32>
	r1 = r2
	r3 = r1 << 3<32>
	Mem0[r29:word64] = r17_r16
	r2 = r3
	r16 = r0
	call memcpy (retsize: 0;)
	v12 = r30
	r31 = Mem0[v12 + 4<i32>:word32]
	r30 = Mem0[v12:word32]
	r29 = v12 + 8<i32>
	return
	// succ:  _LXp_movx_exit
_LXp_movx_exit:


// _LXp_addx
// Return size: 0
define _LXp_addx
_LXp_addx_entry:
	r29 = fp
	// succ:  l00008910
l00008910:
	v3 = r29 - 8<i32>
	Mem0[v3:word32] = r30
	Mem0[v3 + 4<i32>:word32] = r31
	r30 = v3
	r29 = v3 - 32<i32>
	call __save_r16_through_r23 (retsize: 0;)
	r19_r18 = r2_r1
	r17_r16 = r0_r3
	r20 = 0<32>
	branch p0 l0000894C
	// succ:  l00008928 l0000894C
l00008928:
	p0 = r8 > 0<32>
	r23_r22 = Mem0[gp + 192<i32>:word64]
	r3_r2 = Mem0[r19:word64]
	// succ:  l00008930
l00008930:
	r1_r0 = r18_r17
	r19 = r19 + 8<32>
	branch p0 l00008950
	// succ:  l00008940 l00008950
l00008940:
	p0 = r3_r2 == r23_r22
	call _LXp_addh (retsize: 0;)
	branch r16 >u r20 l00008930
	goto l00008950
	// succ:  l00008950 l00008930
l0000894C:
	// succ:  l0000894C_thunk_fn00008A1C
l0000894C_thunk_fn00008A1C:
	call fn00008A1C (retsize: 0;)
	return
	// succ:  _LXp_addx_exit
l00008950:
	r20 = r20 + 1<32>
	// succ:  l00008950_thunk_fn00008A20
l00008950_thunk_fn00008A20:
	call fn00008A20 (retsize: 0;)
	return
	// succ:  _LXp_addx_exit
_LXp_addx_exit:


// _LXp_subx
// Return size: 0
define _LXp_subx
_LXp_subx_entry:
	r29 = fp
	// succ:  l00008954
l00008954:
	v3 = r29 - 8<i32>
	Mem0[v3:word32] = r30
	Mem0[v3 + 4<i32>:word32] = r31
	r30 = v3
	r29 = v3 - 32<i32>
	call __save_r16_through_r23 (retsize: 0;)
	r19_r18 = r2_r1
	r17_r16 = r0_r3
	r20 = 0<32>
	branch p0 l00008964_thunk_fn00008994
	goto l0000896C
	// succ:  l0000896C l00008964_thunk_fn00008994
l00008964_thunk_fn00008994:
	call fn00008994 (retsize: 0;)
	return
	// succ:  _LXp_subx_exit
l0000896C:
	p0 = r8 > 0<32>
	r23_r22 = Mem0[gp + 192<i32>:word64]
	// succ:  l0000896C_thunk_fn00008970
l0000896C_thunk_fn00008970:
	call fn00008970 (retsize: 0;)
	return
	// succ:  _LXp_subx_exit
_LXp_subx_exit:


// fn00008970
// Return size: 0
define fn00008970
fn00008970_entry:
	r29 = fp
	// succ:  l00008970
l00008970:
	r3_r2 = Mem0[r19:word64]
	r1_r0 = r18_r17
	r20 = r20 + 1<32>
	branch p0 l00008998
	// succ:  l00008984 l00008998
l00008984:
	p0 = r3_r2 == r23_r22
	call fn00008454 (retsize: 0;)
	r3 = togglebit(r3, 0x1E<32>)
	r19 = r19 + 8<32>
	branch p0 l00008970
	goto l0000899C_thunk_fn00008994
	// succ:  l0000899C_thunk_fn00008994 l00008970
l00008998:
	// succ:  l00008A44 l00008998_thunk_fn00008A48
l00008998_thunk_fn00008A48:
	call fn00008A48 (retsize: 0;)
	return
	// succ:  fn00008970_exit
l0000899C_thunk_fn00008994:
	call fn00008994 (retsize: 0;)
	return
	// succ:  fn00008970_exit
l00008A44:
	r2 = r21
	// succ:  l00008A44_thunk_fn00008A48
l00008A44_thunk_fn00008A48:
	call fn00008A48 (retsize: 0;)
	return
	// succ:  fn00008970_exit
fn00008970_exit:


// fn00008994
// Return size: 0
define fn00008994
fn00008994_entry:
	r29 = fp
	// succ:  l00008994
l00008994:
	p0 = r8 > -1<i32>
fn00008994_exit:


// _LXp_ldexpx
// Return size: 0
define _LXp_ldexpx
_LXp_ldexpx_entry:
	r29 = fp
	// succ:  l000089A0
l000089A0:
	v3 = r29 - 8<i32>
	Mem0[v3:word32] = r30
	Mem0[v3 + 4<i32>:word32] = r31
	r30 = v3
	r29 = v3 - 32<i32>
	call __save_r16_through_r23 (retsize: 0;)
	r17_r16 = r1_r0
	r21_r20 = Mem0[gp + 192<i32>:word64]
	r22 = r16
	r19 = r19 + 1<32>
	r2 = r18
	r23 = r22 + 8<32>
	// succ:  l000089C4
l000089C4:
	r1_r0 = Mem0[r22:word64]
	call ldexpl (retsize: 0;)
	Mem0[r22:word64] = r1_r0
	r22 = r23
	branch p0 l000089C4
	// succ:  l000089E8 l000089C4
l000089E8:
	p0 = r1_r0 == r21_r20
	// succ:  l000089E8_thunk_fn00008A48
l000089E8_thunk_fn00008A48:
	call fn00008A48 (retsize: 0;)
	return
	// succ:  _LXp_ldexpx_exit
_LXp_ldexpx_exit:


// _LXp_mulx
// Return size: 0
define _LXp_mulx
_LXp_mulx_entry:
	r29 = fp
	// succ:  l000089F0
l000089F0:
	v3 = r29 - 8<i32>
	Mem0[v3:word32] = r30
	Mem0[v3 + 4<i32>:word32] = r31
	r30 = v3
	r29 = v3 - 48<i32>
	call __save_r16_through_r27 (retsize: 0;)
	r20 = r4
	r19_r18 = r3_r2
	r17_r16 = r1_r0
	branch p0 l00008A04_thunk_fn00008AB8
	goto l00008A08
	// succ:  l00008A08 l00008A04_thunk_fn00008AB8
l00008A04_thunk_fn00008AB8:
	call fn00008AB8 (retsize: 0;)
	return
	// succ:  _LXp_mulx_exit
l00008A08:
	p0 = r9 == 0<32>
	branch p0 l00008A08_thunk_fn00008AB8
	goto l00008A0C
	// succ:  l00008A0C l00008A08_thunk_fn00008AB8
l00008A08_thunk_fn00008AB8:
	call fn00008AB8 (retsize: 0;)
	return
	// succ:  _LXp_mulx_exit
l00008A0C:
	p0 = r11 == 0<32>
	r25_r24 = Mem0[gp + 192<i32>:word64]
	r3_r2 = Mem0[r18:word64]
	branch p0 l00008A30
	// succ:  l00008A18_thunk_fn00008A1C l00008A30
l00008A18_thunk_fn00008A1C:
	call fn00008A1C (retsize: 0;)
	return
	// succ:  _LXp_mulx_exit
l00008A30:
	r1_r0 = r17_r16
	// succ:  l00008A30_thunk_fn00008A2C
l00008A30_thunk_fn00008A2C:
	call fn00008A2C (retsize: 0;)
	return
	// succ:  _LXp_mulx_exit
_LXp_mulx_exit:


// fn00008A1C
// Return size: 0
define fn00008A1C
fn00008A1C_entry:
	r29 = fp
	// succ:  l00008A1C
l00008A1C:
	p0 = r3_r2 == r25_r24
	r1_r0 = Mem0[r18 + 8<i32>:word64]
	// succ:  l00008A24_thunk_fn00008A20
l00008A24_thunk_fn00008A20:
	call fn00008A20 (retsize: 0;)
	return
	// succ:  fn00008A1C_exit
fn00008A1C_exit:


// fn00008A20
// Return size: 0
define fn00008A20
fn00008A20_entry:
	r29 = fp
	// succ:  l00008A20
l00008A20:
	r1_r0 = r16_r20
	branch p0 l00008A20_thunk_fn00008A40
	goto l00008A20_thunk_fn00008A2C
	// succ:  l00008A20_thunk_fn00008A2C l00008A20_thunk_fn00008A40
l00008A20:
	r1_r0 = r16_r20
	branch p0 l00008A40
	goto l00008A20_thunk_fn00008A2C
	// succ:  l00008A20_thunk_fn00008A2C l00008A20_thunk_fn00008A40
l00008A20_thunk_fn00008A2C:
	call fn00008A2C (retsize: 0;)
	return
	// succ:  fn00008A20_exit
l00008A20_thunk_fn00008A2C:
	call fn00008A2C (retsize: 0;)
	return
	// succ:  fn00008A20_exit
l00008A20_thunk_fn00008A40:
	call fn00008A40 (retsize: 0;)
	return
	// succ:  fn00008A20_exit
l00008A20_thunk_fn00008A40:
	call fn00008A40 (retsize: 0;)
	return
	// succ:  fn00008A20_exit
fn00008A20_exit:


// fn00008A2C
// Return size: 0
define fn00008A2C
fn00008A2C_entry:
	r29 = fp
	// succ:  l00008A2C
l00008A2C:
	p0 = r1_r0 == r25_r24
	r1_r0 = r17_r16
	call _LXp_mulh (retsize: 0;)
	// succ:  l00008A34
l00008A34:
	// succ:  l00008A34_thunk_fn00008AA4
l00008A34_thunk_fn00008AA4:
	call fn00008AA4 (retsize: 0;)
	return
	// succ:  fn00008A2C_exit
fn00008A2C_exit:


// fn00008A40
// Return size: 0
define fn00008A40
fn00008A40_entry:
	r29 = fp
	// succ:  l00008A40
l00008A40:
	r2 = r21
	call memcpy (retsize: 0;)
	// succ:  l00008A40_thunk_fn00008A48
l00008A40_thunk_fn00008A48:
	call fn00008A48 (retsize: 0;)
	return
	// succ:  fn00008A40_exit
fn00008A40_exit:


// fn00008A48
// Return size: 0
define fn00008A48
fn00008A48_entry:
	r29 = fp
	// succ:  l00008A48
l00008A48:
	r3_r2 = Mem0[r18:word64]
	r1_r0 = r17_r16
	call _LXp_mulh (retsize: 0;)
	r23 = 1<32>
	branch p0 l00008AB8
	goto l00008A5C
	// succ:  l00008A5C l00008A54_thunk_fn00008AB8
l00008A54_thunk_fn00008AB8:
	call fn00008AB8 (retsize: 0;)
	return
	// succ:  fn00008A48_exit
l00008A5C:
	p0 = r11 > 2<32>
	r22 = r20 + (r17 << 3<32>)
	r26 = r18 + (r23 << 3<32>)
	r1_r0 = Mem0[r26:word64]
	r1_r0 = r20_r22
	r2 = r21 + 0<32>
	branch p0 l00008ABC
	// succ:  l00008A78 l00008ABC
l00008A78:
	p0 = r1_r0 == r25_r24
	call memcpy (retsize: 0;)
	r1_r0 = r17_r22
	call _LXp_mulh (retsize: 0;)
	r3_r2 = Mem0[r26:word64]
	branch p0 l00008AB0
	// succ:  l00008A90 l00008AB0
l00008A90:
	p0 = r9 > 0<32>
	r3_r2 = Mem0[r27:word64]
	// succ:  l00008A94_thunk_fn00008AA4
l00008A94_thunk_fn00008AA4:
	call fn00008AA4 (retsize: 0;)
	return
	// succ:  fn00008A48_exit
l00008AB0:
	r23 = r23 + 1<32>
	// succ:  l00008AB0_thunk_fn00008AB8
l00008AB0_thunk_fn00008AB8:
	call fn00008AB8 (retsize: 0;)
	return
	// succ:  fn00008A48_exit
l00008ABC:
	// succ:  l00008ABC_thunk_fn00008B1C
l00008ABC_thunk_fn00008B1C:
	call fn00008B1C (retsize: 0;)
	return
	// succ:  fn00008A48_exit
fn00008A48_exit:


// fn00008AA4
// Return size: 0
define fn00008AA4
fn00008AA4_entry:
	r29 = fp
	goto l00008AA4_thunk_fn00008A48
	// succ:  l00008AA4_thunk_fn00008A48
l00008A94:
	r1_r0 = r17_r16
	r27 = r27 + 8<32>
	branch p0 l00008AB4
	// succ:  l00008AA4 l00008AB4
l00008AA4:
	p0 = r3_r2 == r25_r24
	call _LXp_addh (retsize: 0;)
	branch r17 >u r26 l00008A94
	goto l00008AB4
	// succ:  l00008AB4 l00008A94
l00008AA4_thunk_fn00008A48:
	call fn00008A48 (retsize: 0;)
	return
	// succ:  fn00008AA4_exit
l00008AB4:
	r26 = r26 + 1<32>
	// succ:  l00008AB4_thunk_fn00008AB8
l00008AB4_thunk_fn00008AB8:
	call fn00008AB8 (retsize: 0;)
	return
	// succ:  fn00008AA4_exit
fn00008AA4_exit:


// fn00008AB8
// Return size: 0
define fn00008AB8
fn00008AB8_entry:
	r29 = fp
	// succ:  l00008AB8
l00008AB8:
	// succ:  l00008B18
l00008B18:
	r2 = r20
	// succ:  l00008B18_thunk_fn00008B1C
l00008B18_thunk_fn00008B1C:
	call fn00008B1C (retsize: 0;)
	return
	// succ:  fn00008AB8_exit
fn00008AB8_exit:


// _LXp_invx
// Return size: 0
define _LXp_invx
_LXp_invx_entry:
	r29 = fp
	// succ:  l00008AC0
l00008AC0:
	v3 = r29 - 8<i32>
	Mem0[v3:word32] = r30
	Mem0[v3 + 4<i32>:word32] = r31
	r30 = v3
	r29 = v3 - 48<i32>
	call __save_r16_through_r27 (retsize: 0;)
	r22 = r2
	r17_r16 = r1_r0
	r0 = r16 + 0<32>
	branch p0 l00008AD0_thunk_fn00008BFC
	goto l00008AD8
	// succ:  l00008AD8 l00008AD0_thunk_fn00008BFC
l00008AD0_thunk_fn00008BFC:
	call fn00008BFC (retsize: 0;)
	return
	// succ:  _LXp_invx_exit
l00008AD8:
	p0 = r9 == 1<32>
	call _LDtest (retsize: 0;)
	branch p0 l00008B00
	// succ:  l00008AE0 l00008B00
l00008AE0:
	p0 = tstbit(r0, 0<32>)
	branch p0 l00008AE0_thunk_fn00008BD4
	goto l00008AE8
	// succ:  l00008AE8 l00008AE0_thunk_fn00008BD4
l00008AE0_thunk_fn00008BD4:
	call fn00008BD4 (retsize: 0;)
	return
	// succ:  _LXp_invx_exit
l00008AE8:
	p0 = SLICE(r0, word16, 0) == SLICE(0<16>, word16, 0)
	r0 = 0xE620<32>
	r1_r0 = Mem0[r0:word64]
	Mem0[r16:word64] = r1_r0
	// succ:  l00008AF4_thunk_fn00008B64
l00008AF4_thunk_fn00008B64:
	call fn00008B64 (retsize: 0;)
	return
	// succ:  _LXp_invx_exit
l00008B00:
	r27_r26 = Mem0[r16:word64]
	r25_r24 = Mem0[gp + 224<i32>:word64]
	r20 = r17 << 3<32>
	r19 = r22 + (r17 << 3<32>)
	r2 = r20
	r1_r0 = r16_r19
	call memcpy (retsize: 0;)
	// succ:  l00008B10_thunk_fn00008B1C
l00008B10_thunk_fn00008B1C:
	call fn00008B1C (retsize: 0;)
	return
	// succ:  _LXp_invx_exit
_LXp_invx_exit:


// fn00008B1C
// Return size: 0
define fn00008B1C
fn00008B1C_entry:
	r29 = fp
	// succ:  l00008B1C
l00008B1C:
	r3_r2 = r25_r24
	r1_r0 = r17_r19
	call _LXp_mulh (retsize: 0;)
	r1_r0 = r27_r26
	r3_r2 = r27_r26
	branch p0 l00008BE8
	// succ:  l00008B34 l00008BE8
l00008B34:
	p0 = r9 > 2<32>
	r25_r24 = Mem0[gp + 216<i32>:word64]
	r3_r2 = Mem0[r16 + 8<i32>:word64]
	call __hexagon_adddf3 (retsize: 0;)
	r1_r0 = r25_r24
	r3_r2 = r1_r0
	call __hexagon_divdf3 (retsize: 0;)
	r27_r26 = Mem0[gp + 192<i32>:word64]
	r24 = 1<32>
	r1_r0 = r17_r16
	r3_r2 = r1_r0
	call fn00008354 (retsize: 0;)
	r21 = r22 + (r17 << 4<32>)
	// succ:  l00008B68_thunk_fn00008B64
l00008B68_thunk_fn00008B64:
	call fn00008B64 (retsize: 0;)
	return
	// succ:  fn00008B1C_exit
l00008BE8:
	r1_r0 = Mem0[gp + 216<i32>:word64]
	call __hexagon_divdf3 (retsize: 0;)
	r1_r0 = r17_r16
	r3_r2 = r1_r0
	call _LXp_setw (retsize: 0;)
	// succ:  l00008BF0_thunk_fn00008BFC
l00008BF0_thunk_fn00008BFC:
	call fn00008BFC (retsize: 0;)
	return
	// succ:  fn00008B1C_exit
fn00008B1C_exit:


// fn00008B64
// Return size: 0
define fn00008B64
fn00008B64_entry:
	r29 = fp
	// succ:  l00008B64
l00008B64:
	r2 = r20
	r1_r0 = r16_r22
	call memcpy (retsize: 0;)
	goto l00008B64_thunk_fn00008B70
	// succ:  l00008B64_thunk_fn00008B70
l00008B64:
	r2 = r20
	r1_r0 = r16_r22
	call memcpy (retsize: 0;)
	goto l00008B64_thunk_fn00008BC8
	// succ:  l00008B64_thunk_fn00008BC8
l00008B64_thunk_fn00008B70:
	call fn00008B70 (retsize: 0;)
	return
	// succ:  fn00008B64_exit
l00008B64_thunk_fn00008BC8:
	call fn00008BC8 (retsize: 0;)
	return
	// succ:  fn00008B64_exit
fn00008B64_exit:


// fn00008B70
// Return size: 0
define fn00008B70
fn00008B70_entry:
	r29 = fp
	goto l00008B70
	// succ:  l00008B70
l00008B68:
	goto l00008B70
	// succ:  l00008B70
l00008B70:
	r1_r0 = r17_r22
	r4 = r21
	r3_r2 = r17_r19
	call _LXp_mulx (retsize: 0;)
	r3_r2 = Mem0[gp + 216<i32>:word64]
	r1_r0 = r17_r22
	call _LXp_addh (retsize: 0;)
	r4 = r21
	r1_r0 = r17_r22
	r3_r2 = r17_r16
	call _LXp_mulx (retsize: 0;)
	r18 = r22
	r25 = 0<32>
	r3_r2 = Mem0[r18:word64]
	r1_r0 = r17_r16
	r18 = r18 + 8<32>
	branch p0 l00008BA8_thunk_fn00008BC8
	goto l00008BA8_thunk_fn00008BB8
	// succ:  l00008BA8_thunk_fn00008BB8 l00008BA8_thunk_fn00008BC8
l00008B70:
	r1_r0 = r17_r22
	r4 = r21
	r3_r2 = r17_r19
	call _LXp_mulx (retsize: 0;)
	r3_r2 = Mem0[gp + 216<i32>:word64]
	r1_r0 = r17_r22
	call _LXp_addh (retsize: 0;)
	r4 = r21
	r1_r0 = r17_r22
	r3_r2 = r17_r16
	call _LXp_mulx (retsize: 0;)
	r18 = r22
	r25 = 0<32>
	r3_r2 = Mem0[r18:word64]
	r1_r0 = r17_r16
	r18 = r18 + 8<32>
	branch p0 l00008BC8
	goto l00008BB8
	// succ:  l00008BB8 l00008BA8_thunk_fn00008BC8
l00008BA8_thunk_fn00008BB8:
	call fn00008BB8 (retsize: 0;)
	return
	// succ:  fn00008B70_exit
l00008BA8_thunk_fn00008BC8:
	call fn00008BC8 (retsize: 0;)
	return
	// succ:  fn00008B70_exit
l00008BA8_thunk_fn00008BC8:
	call fn00008BC8 (retsize: 0;)
	return
	// succ:  fn00008B70_exit
l00008BB8:
	p0 = r3_r2 == r27_r26
	call _LXp_addh (retsize: 0;)
	r25 = r25 + 1<32>
	branch r17 >u r24 l00008B68
	// succ:  l00008BD0 l00008B68
l00008BD0:
	r24 = r24 << 1<32>
	branch r0 == 2<32> l00008C00
fn00008B70_exit:


// fn00008BB8
// Return size: 0
define fn00008BB8
fn00008BB8_entry:
	r29 = fp
	// succ:  l00008BB8_thunk_fn00008BC8
l00008BB8_thunk_fn00008BC8:
	call fn00008BC8 (retsize: 0;)
	return
	// succ:  fn00008BB8_exit
fn00008BB8_exit:


// fn00008BC8
// Return size: 0
define fn00008BC8
fn00008BC8_entry:
	r29 = fp
	// succ:  l00008BC8
l00008BC8:
	branch r17 >u r24 l00008B68
	// succ:  l00008BC8_thunk_fn00008BB8 l00008BC8_thunk_fn00008BB8
l00008BC8_thunk_fn00008BB8:
	call fn00008BB8 (retsize: 0;)
	return
	// succ:  fn00008BC8_exit
l00008BC8_thunk_fn00008BB8:
	call fn00008BB8 (retsize: 0;)
	return
	// succ:  fn00008BC8_exit
fn00008BC8_exit:


// fn00008BD4
// Return size: 0
define fn00008BD4
fn00008BD4_entry:
	r29 = fp
	// succ:  l00008BD4
l00008BD4:
	branch r0 == 2<32> l00008BD4_thunk_fn00008C00
	goto l00008BD4_thunk_fn00008BDC
	// succ:  l00008BD4_thunk_fn00008BDC l00008BD4_thunk_fn00008C00
l00008BD4:
	call fn00008C00 (retsize: 0;)
	return
	// succ:  l00008BD4_thunk_fn00008BDC l00008BD4_thunk_fn00008C00 fn00008BD4_exit
l00008BD4_thunk_fn00008BDC:
	call fn00008BDC (retsize: 0;)
	return
	// succ:  fn00008BD4_exit
l00008BD4_thunk_fn00008BDC:
	call fn00008BDC (retsize: 0;)
	return
	// succ:  fn00008BD4_exit
l00008BD4_thunk_fn00008C00:
	call fn00008C00 (retsize: 0;)
	return
	// succ:  fn00008BD4_exit
l00008BD4_thunk_fn00008C00:
	call fn00008C00 (retsize: 0;)
	return
	// succ:  fn00008BD4_exit
fn00008BD4_exit:


// fn00008BDC
// Return size: 0
define fn00008BDC
fn00008BDC_entry:
	r29 = fp
	// succ:  l00008BDC
l00008BDC:
	r0 = CONVERT(SLICE(r0, uint16, 0), uint16, uint32)
	Mem0[r16:word64] = r1_r0
	// succ:  l00008BDC_thunk_fn00008CAC
l00008BDC_thunk_fn00008CAC:
	call fn00008CAC (retsize: 0;)
	return
	// succ:  fn00008BDC_exit
fn00008BDC_exit:


// fn00008BFC
// Return size: 0
define fn00008BFC
fn00008BFC_entry:
	r29 = fp
	// succ:  l00008BFC
l00008BFC:
	goto l00008BFC_thunk_fn00008C4C
	// succ:  l00008BFC_thunk_fn00008C4C
l00008BFC:
	goto l00008BFC_thunk_fn00008C4C
	// succ:  l00008BFC_thunk_fn00008C4C
l00008BFC_thunk_fn00008C4C:
	call fn00008C4C (retsize: 0;)
	return
	// succ:  fn00008BFC_exit
l00008BFC_thunk_fn00008C4C:
	call fn00008C4C (retsize: 0;)
	return
	// succ:  fn00008BFC_exit
fn00008BFC_exit:


// fn00008C00
// Return size: 0
define fn00008C00
fn00008C00_entry:
	r29 = fp
	// succ:  l00008C00
l00008C00:
	// succ:  l00008C00_thunk_fn00008C50
l00008C00_thunk_fn00008C50:
	call fn00008C50 (retsize: 0;)
	return
	// succ:  fn00008C00_exit
fn00008C00_exit:


// _LXp_sqrtx
// Return size: 0
define _LXp_sqrtx
_LXp_sqrtx_entry:
	r29 = fp
	// succ:  l00008C04
l00008C04:
	v3 = r29 - 8<i32>
	Mem0[v3:word32] = r30
	Mem0[v3 + 4<i32>:word32] = r31
	r30 = v3
	r29 = v3 - 48<i32>
	call __save_r16_through_r27 (retsize: 0;)
	r18 = r2
	r17_r16 = r1_r0
	r0 = r16 + 0<32>
	branch p0 l00008D20
	goto l00008C1C
	// succ:  l00008C1C l00008C14_thunk_fn00008D20
l00008C14_thunk_fn00008D20:
	call fn00008D20 (retsize: 0;)
	return
	// succ:  _LXp_sqrtx_exit
l00008C1C:
	p0 = r9 == 1<32>
	call _LDtest (retsize: 0;)
	r5_r4 = Mem0[r16:word64]
	branch p0 l00008C34
	// succ:  l00008C28 l00008C34
l00008C28:
	p0 = tstbit(r0, 0<32>)
	r1_r0 = Mem0[gp + 192<i32>:word64]
	branch p0 l00008C64
	// succ:  l00008C34 l00008C64
l00008C34:
	p0 = r5_r4 >= r1_r0
	r1_r0 = Mem0[gp + 192<i32>:word64]
	r0 = 1<32>
	branch p0 l00008D24
	// succ:  l00008C44 l00008D24
l00008C44:
	p0 = r5_r4 >= r1_r0
	call _Feraise (retsize: 0;)
	r0 = 0xE630<32>
	// succ:  l00008C54_thunk_fn00008C4C
l00008C54_thunk_fn00008C4C:
	call fn00008C4C (retsize: 0;)
	return
	// succ:  _LXp_sqrtx_exit
l00008C64:
	r1_r0 = r5_r4
	branch p0 l00008C7C
	// succ:  l00008C6C l00008C7C
l00008C6C:
	p0 = r9 > 2<32>
	r3_r2 = Mem0[r16 + 8<i32>:word64]
	call __hexagon_adddf3 (retsize: 0;)
	r5_r4 = r1_r0
	r21_r20 = Mem0[gp + 216<i32>:word64]
	r1_r0 = r5_r4
	call sqrtl (retsize: 0;)
	goto l00008C84
	// succ:  l00008C84
l00008C7C:
	r21_r20 = Mem0[gp + 216<i32>:word64]
	r1_r0 = r5_r4
	// succ:  l00008C84
l00008C84:
	r1_r0 = r21_r20
	r3_r2 = r1_r0
	call __hexagon_divdf3 (retsize: 0;)
	r1_r0 = r17_r19
	r3_r2 = r1_r0
	r20 = r18 + (r17 << 4<32>)
	call _LXp_setw (retsize: 0;)
	r26 = 2<32>
	branch p0 l00008D10
	// succ:  l00008CA8 l00008D10
l00008CA8:
	p0 = r9 > 4<32>
	r25_r24 = Mem0[gp + 240<i32>:word64]
	r23_r22 = Mem0[gp + 232<i32>:word64]
	r21 = r17 << 3<32>
	call _LXp_mulh (retsize: 0;)
	// succ:  l00008CB0_thunk_fn00008CAC l00008CC0_thunk_fn00008CCC
l00008CB0_thunk_fn00008CAC:
	call fn00008CAC (retsize: 0;)
	return
	// succ:  _LXp_sqrtx_exit
l00008CC0_thunk_fn00008CCC:
	call fn00008CCC (retsize: 0;)
	return
	// succ:  _LXp_sqrtx_exit
l00008D10:
	r3_r2 = r17_r19
	r4 = r20
	r1_r0 = r17_r16
	call _LXp_mulx (retsize: 0;)
	// succ:  l00008D10_thunk_fn00008D20
l00008D10_thunk_fn00008D20:
	call fn00008D20 (retsize: 0;)
	return
	// succ:  _LXp_sqrtx_exit
l00008D24:
	// succ:  l00008D24_thunk_fn00008DE4
l00008D24_thunk_fn00008DE4:
	call fn00008DE4 (retsize: 0;)
	return
	// succ:  _LXp_sqrtx_exit
_LXp_sqrtx_exit:


// fn00008C4C
// Return size: 0
define fn00008C4C
fn00008C4C_entry:
	r29 = fp
	// succ:  l00008C4C
l00008C4C:
	r0 = 0x30<32>
	goto l00008C4C_thunk_fn00008C50
	// succ:  l00008C4C_thunk_fn00008C50
l00008C4C:
	r1_r0 = Mem0[r0:word64]
	Mem0[r16:word64] = r1_r0
	goto l00008C54_thunk_fn00008D44
	// succ:  l00008C54_thunk_fn00008D44
l00008C4C_thunk_fn00008C50:
	call fn00008C50 (retsize: 0;)
	return
	// succ:  fn00008C4C_exit
l00008C54_thunk_fn00008D44:
	call fn00008D44 (retsize: 0;)
	return
	// succ:  fn00008C4C_exit
fn00008C4C_exit:


// fn00008C50
// Return size: 0
define fn00008C50
fn00008C50_entry:
	r29 = fp
	// succ:  l00008C50
l00008C50:
	r1_r0 = Mem0[r0:word64]
	Mem0[r16:word64] = r1_r0
	// succ:  l00008C54_thunk_fn00008D44
l00008C54_thunk_fn00008D44:
	call fn00008D44 (retsize: 0;)
	return
	// succ:  fn00008C50_exit
fn00008C50_exit:


// fn00008CAC
// Return size: 0
define fn00008CAC
fn00008CAC_entry:
	r29 = fp
	// succ:  l00008CAC
l00008CAC:
	r25_r24 = Mem0[gp + 240<i32>:word64]
	r23_r22 = Mem0[gp + 232<i32>:word64]
	r2 = r21
	r1_r0 = r19_r18
	call memcpy (retsize: 0;)
	goto l00008CB4_thunk_fn00008CB8
	// succ:  l00008CB4_thunk_fn00008CB8
l00008CAC:
	r2 = r21
	r1_r0 = r19_r18
	call memcpy (retsize: 0;)
	r3_r2 = r23_r22
	r1_r0 = r17_r18
l00008CB4_thunk_fn00008CB8:
	call fn00008CB8 (retsize: 0;)
	return
	// succ:  fn00008CAC_exit
fn00008CAC_exit:


// fn00008CB8
// Return size: 0
define fn00008CB8
fn00008CB8_entry:
	r29 = fp
	// succ:  l00008CB8
l00008CB8:
	r3_r2 = r23_r22
	r1_r0 = r17_r18
	call _LXp_mulh (retsize: 0;)
	// succ:  l00008CB8_thunk_fn00008CCC
l00008CB8_thunk_fn00008CCC:
	call fn00008CCC (retsize: 0;)
	return
	// succ:  fn00008CB8_exit
fn00008CB8_exit:


// fn00008CCC
// Return size: 0
define fn00008CCC
fn00008CCC_entry:
	r29 = fp
	// succ:  l00008CCC
l00008CCC:
	r3_r2 = r17_r16
	r1_r0 = r17_r18
	r4 = r20
	call _LXp_mulx (retsize: 0;)
	r4 = r20
	r1_r0 = r17_r18
	r3_r2 = r17_r19
	call _LXp_mulx (retsize: 0;)
	r3_r2 = r25_r24
	r1_r0 = r17_r18
	call _LXp_addh (retsize: 0;)
	r4 = r20
	r3_r2 = r17_r18
	r1_r0 = r17_r19
	call _LXp_mulx (retsize: 0;)
	branch r17 >u r26 l00008D08_thunk_fn00008CB8
	goto l00008D08_thunk_fn00008D14
	// succ:  l00008D08_thunk_fn00008D14 l00008D08_thunk_fn00008CB8
l00008CCC:
	r3_r2 = r17_r16
	r1_r0 = r17_r18
	r4 = r20
	call _LXp_mulx (retsize: 0;)
	r4 = r20
	r1_r0 = r17_r18
	r3_r2 = r17_r19
	call _LXp_mulx (retsize: 0;)
	r3_r2 = r25_r24
	r1_r0 = r17_r18
	call _LXp_addh (retsize: 0;)
	r4 = r20
	r3_r2 = r17_r18
	r1_r0 = r17_r19
	call _LXp_mulx (retsize: 0;)
	branch r17 >u r26 l00008CB8
	goto l00008D08_thunk_fn00008D14
	// succ:  l00008D08_thunk_fn00008D14 l00008D08_thunk_fn00008CB8
l00008D08_thunk_fn00008CB8:
	call fn00008CB8 (retsize: 0;)
	return
	// succ:  fn00008CCC_exit
l00008D08_thunk_fn00008CB8:
	call fn00008CB8 (retsize: 0;)
	return
	// succ:  fn00008CCC_exit
l00008D08_thunk_fn00008D14:
	call fn00008D14 (retsize: 0;)
	return
	// succ:  fn00008CCC_exit
l00008D08_thunk_fn00008D14:
	call fn00008D14 (retsize: 0;)
	return
	// succ:  fn00008CCC_exit
fn00008CCC_exit:


// fn00008D14
// Return size: 0
define fn00008D14
fn00008D14_entry:
	r29 = fp
	goto l00008D14_thunk_fn00008CB8
	// succ:  l00008D14_thunk_fn00008CB8
l00008D14:
	r26 = r26 << 1<32>
	r3_r2 = r17_r19
	r4 = r20
	r1_r0 = r17_r16
	goto l00008D14_thunk_fn00008D20
	// succ:  l00008D14_thunk_fn00008D20
l00008D14_thunk_fn00008CB8:
	call fn00008CB8 (retsize: 0;)
	return
	// succ:  fn00008D14_exit
l00008D14_thunk_fn00008D20:
	call fn00008D20 (retsize: 0;)
	return
	// succ:  fn00008D14_exit
fn00008D14_exit:


// fn00008D20
// Return size: 0
define fn00008D20
fn00008D20_entry:
	r29 = fp
	// succ:  l00008D20
l00008D20:
	// succ:  l00008D20_thunk_fn00008DE0
l00008D20_thunk_fn00008DE0:
	call fn00008DE0 (retsize: 0;)
	return
	// succ:  fn00008D20_exit
fn00008D20_exit:


// _Mbtowcx
// Return size: 0
define _Mbtowcx
_Mbtowcx_entry:
	r29 = fp
	// succ:  l00008D30
l00008D30:
	v3 = r29 - 8<i32>
	Mem0[v3:word32] = r30
	Mem0[v3 + 4<i32>:word32] = r31
	r30 = v3
	r29 = v3 - 0<i32>
	p0 = r1 == 0<32>
	r6 = Mem0[r3 + 6<i32>:int16]
	r5 = Mem0[r3:word32]
	r7 = Mem0[r4:word32]
	r8 = 0<32>
	r7 = r1 + 0<32>
	branch p0 l00008EFC
_Mbtowcx_exit:


// fn00008D44
// Return size: 0
define fn00008D44
fn00008D44_entry:
	r29 = fp
	// succ:  l00008D44
l00008D44:
	r8 = 0<32>
	r7 = r1 + 0<32>
	goto l00008D44_thunk_fn00008D4C
	// succ:  l00008D44_thunk_fn00008D4C
l00008D44:
	call fn00008D4C (retsize: 0;)
	return
	// succ:  l00008D44_thunk_fn00008D4C l00008EFC fn00008D44_exit
l00008D44_thunk_fn00008D4C:
	call fn00008D4C (retsize: 0;)
	return
	// succ:  fn00008D44_exit
l00008D44_thunk_fn00008D4C:
	call fn00008D4C (retsize: 0;)
	return
	// succ:  fn00008D44_exit
l00008EFC:
	Mem0[r3:word32] = 0<32>
	Mem0[r3 + 4<i32>:word32] = 0<32>
	r0 = Mem0[r4:word32]
	r0 = Mem0[r0:word16]
	r2 = r0 & 0xF00<32>
	v11 = r30
	r31 = Mem0[v11 + 4<i32>:word32]
	r30 = Mem0[v11:word32]
	r29 = v11 + 8<i32>
	return
	// succ:  fn00008D44_exit
fn00008D44_exit:


// fn00008D4C
// Return size: 0
define fn00008D4C
fn00008D4C_entry:
	r29 = fp
	// succ:  l00008D4C
l00008D4C:
	branch p0 l00008EDC
	// succ:  l00008D50 l00008EDC
l00008D50:
	p0 = r2 == 1<32>
	r6 = CONVERT(SLICE(r6, byte, 0), byte, uint32)
	r8 = r8 + 1<32>
	branch p0 l00008EF0
	// succ:  l00008D60 l00008EF0
l00008D60:
	p0 = SLICE(r6, byte, 0) >u SLICE(0xF<8>, byte, 0)
	branch r6 == 1<32> l00008EF8
	// succ:  l00008D74 l00008EF8
l00008D74:
	r6 = Mem0[r6 + r6 * 4<32>:word32]
	p0 = r8 > 0xFEF<32>
	r12 = Mem0[r7:byte]
	r13 = r5 + 0<32>
	branch r6 == 1<32> l00008EF0
	// succ:  l00008D88 l00008EF0
l00008D88:
	r6 = Mem0[r4 + r12 * 2<32>:word16]
	r14 = r6 & 0xFF<32>
	r15 = r6 & 0<32>
	p0 = r15 == 0<32>
	r9 = r6 & 0x4000<32>
	r13 = r14 | r13 & 0xFFFFFF00<32>
	r5 = r13 + 0<32>
	p1 = r9 == 0<32>
	r14 = r6 & 0x1000<32>
	p0 = r14 == 0<32>
	r9 = r5 << 8<32>
	branch p1 l00008DE0
	// succ:  l00008DC0 l00008DC4_thunk_fn00008DE0
l00008DC0:
	r9 = r9 | r5 >>u 0x18<32>
	r13 = 0xFFFFFFFF<32>
	r7 = r7 + 1<32>
	p1 = r12 == 0<32>
	p2 = !(r12 == 0<32>)
	r8 = 0<32>
	r13 = 0<32>
	r2 = r13 + r2
	r5 = r9 + 0<32>
	r12 = r6 & 0x2000<32>
	r6 = CONVERT(SLICE(r6, ui12, 4), ui12, uint32)
	goto l00008DE4_thunk_fn00008DEC
	// succ:  l00008DE4_thunk_fn00008DEC
l00008DC4_thunk_fn00008DE0:
	call fn00008DE0 (retsize: 0;)
	return
	// succ:  fn00008D4C_exit
l00008DE4_thunk_fn00008DEC:
	call fn00008DEC (retsize: 0;)
	return
	// succ:  fn00008D4C_exit
l00008EDC:
	Mem0[r3:word32] = r5
	r0 = r6 & 0xFF<32>
	r2 = 0xFFFFFFFE<32>
	Mem0[r3 + 8<i32>:word16] = r0
	r0 = r2
	v24 = r30
	r31 = Mem0[v24 + 4<i32>:word32]
	r30 = Mem0[v24:word32]
	r29 = v24 + 8<i32>
	return
	// succ:  fn00008D4C_exit
l00008EF0:
	Mem0[r0:word32] = 0x58<32>
	r2 = 0xFFFFFFFF<32>
	// succ:  l00008EF8
l00008EF8:
	v23 = r30
	r31 = Mem0[v23 + 4<i32>:word32]
	r30 = Mem0[v23:word32]
	r29 = v23 + 8<i32>
	return
	// succ:  fn00008D4C_exit
fn00008D4C_exit:


// fn00008DE0
// Return size: 0
define fn00008DE0
fn00008DE0_entry:
	r29 = fp
	goto l00008DE0_thunk_fn00008D4C
	// succ:  l00008DE0_thunk_fn00008D4C
l00008DE0:
	r5 = r9 + 0<32>
	r12 = r6 & 0x2000<32>
l00008DE0_thunk_fn00008D4C:
	call fn00008D4C (retsize: 0;)
	return
	// succ:  fn00008DE0_exit
fn00008DE0_exit:


// fn00008DE4
// Return size: 0
define fn00008DE4
fn00008DE4_entry:
	r29 = fp
	// succ:  l00008DE4
l00008DE4:
	r5 = r9 + 0<32>
	r12 = r6 & 0<32>
	goto l00008DE4_thunk_fn00008DEC
	// succ:  l00008DE4_thunk_fn00008DEC
l00008DE4:
	call fn00008DEC (retsize: 0;)
	return
	// succ:  l00008DE4_thunk_fn00008DEC fn00008DE4_exit
l00008DE4_thunk_fn00008DEC:
	call fn00008DEC (retsize: 0;)
	return
	// succ:  fn00008DE4_exit
l00008DE4_thunk_fn00008DEC:
	call fn00008DEC (retsize: 0;)
	return
	// succ:  fn00008DE4_exit
fn00008DE4_exit:


// fn00008DEC
// Return size: 0
define fn00008DEC
fn00008DEC_entry:
	r29 = fp
	// succ:  l00008DEC
l00008DEC:
	p0 = r12 == 0<32>
	r2 = r7 - r1
	branch p0 l00008D4C
	goto l00008DF8
	// succ:  l00008DF8 l00008DEC_thunk_fn00008D4C
l00008DEC_thunk_fn00008D4C:
	call fn00008D4C (retsize: 0;)
	return
	// succ:  fn00008DEC_exit
l00008DF8:
	Mem0[r3:word32] = r5
	p0 = r0 == 0<32>
	p1 = r7 == r1
	r0 = r2 + 0<32>
	r0 = 0xFFFFFFFD<32>
	p0 = r5 == 0<32>
	Mem0[r3 + 8<i32>:word16] = r6
	r0 = -1<i32>
	v14 = r30
	r31 = Mem0[v14 + 4<i32>:word32]
	r30 = Mem0[v14:word32]
	r29 = v14 + 8<i32>
	return
	// succ:  fn00008DEC_exit
fn00008DEC_exit:


// _Mbtowc
// Return size: 0
define _Mbtowc
_Mbtowc_entry:
	r29 = fp
	// succ:  l00008F3C
l00008F3C:
	v3 = r29 - 8<i32>
	Mem0[v3:word32] = r30
	Mem0[v3 + 4<i32>:word32] = r31
	r30 = v3
	r29 = v3 - 16<i32>
	Mem0[r29 + 496<i32>:word64] = r17_r16
	Mem0[r29:word64] = r19_r18
	r19_r18 = r1_r2
	r17_r16 = r0_r3
	call _Tls_get__Mbstate (retsize: 0;)
	r17_r16 = Mem0[r29 + 8<i32>:word64]
	r4 = r0
	r1_r0 = r19_r17
	r3_r2 = r16_r18
	v23 = r30
	r31 = Mem0[v23 + 4<i32>:word32]
	r30 = Mem0[v23:word32]
	r29 = v23 + 8<i32>
	r19_r18 = Mem0[r29:word64]
	// succ:  l00008F5C_thunk__Mbtowcx
l00008F5C_thunk__Mbtowcx:
	call _Mbtowcx (retsize: 0;)
	return
	// succ:  _Mbtowc_exit
_Mbtowc_exit:


// _Tls_get__Wcstate
// Return size: 0
define _Tls_get__Wcstate
_Tls_get__Wcstate_entry:
	r29 = fp
	// succ:  l00008F70
l00008F70:
	v3 = r29 - 8<i32>
	Mem0[v3:word32] = r30
	Mem0[v3 + 4<i32>:word32] = r31
	r30 = v3
	r29 = v3 - 16<i32>
	Mem0[r29 + 496<i32>:word64] = r17_r16
	r1 = 1<32>
	r17 = 0x10058<32>
	r16 = 0x10054<32>
	Mem0[r29:word64] = r19_r18
	// succ:  l00008F8C
l00008F8C:
	r0 = memw_locked(r16)
	p0 = r0 > 0<32>
	branch p0 l00008FA0
	// succ:  l00008F98 l00008FA0
l00008F98:
	memw_locked(r16, p0, r1)
	branch p0 l00008F8C
	// succ:  l00008FA0 l00008F8C
l00008FA0:
	r18 = 2<32>
	branch p0 l00008FC0
	// succ:  l00008FA8 l00008FC0
l00008FA8:
	p0 = r0 == 0<32>
	r1 = 0x6FF0<32>
	r0 = 0x10058<32>
	call sys_Tlsalloc (retsize: 0;)
	Mem0[r16:word32] = r18
	// succ:  l00008FC0
l00008FC0:
	branch r0 > 2<32> l00008FC4
	goto l00008FCC
	// succ:  l00008FCC l00008FC4
l00008FC4:
	branch r0 > 2<32> l00008FC4
	// succ:  l00008FCC l00008FC4
l00008FCC:
	r0 = Mem0[r16:word32]
	r0 = Mem0[r17:word32]
	branch r16 == 0<32> l00009018
	// succ:  l00008FE0 l00009018
l00008FE0:
	r16 = r0
	r1_r0 = 0x4000000001<64>
	branch r16 == 0<32> l00009014
	// succ:  l00008FEC l00009014
l00008FEC:
	r16 = r0
	r0 = Mem0[r17:word32]
	r1 = r16
	branch p0 l00009000
	// succ:  l00008FF4 l00009000
l00008FF4:
	p0 = r0 == 0<32>
	r0 = r16
	r16 = 0<32>
	call free (retsize: 0;)
	goto l00009010
	// succ:  l00009010
l00009000:
	call __hexagon_memcpy_likely_aligned_min32bytes_mult8bytes (retsize: 0;)
	r2 = 0x40<32>
	// succ:  l00009010
l00009010:
	r19_r18 = Mem0[r29:word64]
	r17_r16 = Mem0[r29 + 8<i32>:word64]
	r0 = r16
	goto l00009018
	// succ:  l00009018
l00009014:
	r19_r18 = Mem0[r29:word64]
	r17_r16 = Mem0[r29 + 8<i32>:word64]
	// succ:  l00009018
l00009018:
	v15 = r30
	r31 = Mem0[v15 + 4<i32>:word32]
	r30 = Mem0[v15:word32]
	r29 = v15 + 8<i32>
	return
	// succ:  _Tls_get__Wcstate_exit
_Tls_get__Wcstate_exit:


// _Getpwcstate
// Return size: 0
define _Getpwcstate
_Getpwcstate_entry:
	r29 = fp
	// succ:  l0000901C
l0000901C:
	// succ:  l0000901C_thunk__Tls_get__Wcstate
l0000901C_thunk__Tls_get__Wcstate:
	call _Tls_get__Wcstate (retsize: 0;)
	return
	// succ:  _Getpwcstate_exit
_Getpwcstate_exit:


// _Atrealloc
// Return size: 0
define _Atrealloc
_Atrealloc_entry:
	r29 = fp
	// succ:  l00009020
l00009020:
	v3 = r29 - 8<i32>
	Mem0[v3:word32] = r30
	Mem0[v3 + 4<i32>:word32] = r31
	r30 = v3
	r29 = v3 - 8<i32>
	Mem0[r29 + 496<i32>:word64] = r17_r16
	r17 = Mem0[gp + 4<i32>:word32]
	r0 = r17
	r0 = r0 + (r0 >>u 1<32>)
	call fn00007224 (retsize: 0;)
	r0 = r0 << 2<32>
	branch r16 == 0<32> l000090BC
	// succ:  l00009048 l000090BC
l00009048:
	r16 = r0
	r1 = 0<32>
	r1 = Mem0[gp + 8<i32>:word32]
	r2 = Mem0[gp + 64<i32>:word32]
	r0 = r16
	call fn000073E4 (retsize: 0;)
	r2 = r2 << 2<32>
	r3 = Mem0[gp + 4<i32>:word32]
	r0 = Mem0[gp + 12<i32>:word32]
	r1 = Mem0[gp + 8<i32>:word32]
	r3 = r3 - r0
	r2 = r0 + r17
	r0 = r16 + (r2 << 2<32>)
	r1 = r1 + (r0 << 2<32>)
	call fn000073E4 (retsize: 0;)
	r2 = r3 << 2<32>
	r0 = Mem0[gp + 8<i32>:word32]
	r1 = 0xE940<32>
	call free (retsize: 0;)
	r2 = Mem0[gp + 4<i32>:word32]
	r0 = Mem0[gp + 12<i32>:word32]
	r1 = 1<32>
	Mem0[gp + 512<i32>:word32] = r16
	r0 = r2 + r17
	r3 = r0 + r17
	Mem0[gp:word32] = r0
	Mem0[gp + 96<i32>:word32] = r3
	v14 = r30
	r31 = Mem0[v14 + 4<i32>:word32]
	r30 = Mem0[v14:word32]
	r29 = v14 + 8<i32>
	return
	// succ:  _Atrealloc_exit
l000090BC:
	// succ:  l000090BC_thunk__Closreg
l000090BC_thunk__Closreg:
	call _Closreg (retsize: 0;)
	return
	// succ:  _Atrealloc_exit
_Atrealloc_exit:


// _Closreg
// Return size: 0
define _Closreg
_Closreg_entry:
	r29 = fp
	// succ:  l000090C0
l000090C0:
	v3 = r29 - 8<i32>
	Mem0[v3:word32] = r30
	Mem0[v3 + 4<i32>:word32] = r31
	r30 = v3
	r29 = v3 - 8<i32>
	Mem0[r29 + 496<i32>:word64] = r17_r16
	r1 = 1<32>
	r16 = 0x1005C<32>
	// succ:  l000090D0
l000090D0:
	r0 = memw_locked(r16)
	p0 = r0 > 0<32>
	branch p0 l000090E4
	// succ:  l000090DC l000090E4
l000090DC:
	memw_locked(r16, p0, r1)
	branch p0 l000090D0
	// succ:  l000090E4 l000090D0
l000090E4:
	r0 = 2<32>
	branch p0 l00009108
	// succ:  l000090EC l00009108
l000090EC:
	p0 = r0 == 0<32>
	call _Locksyslock (retsize: 0;)
	r0 = 0x9114<32>
	call _Atexit (retsize: 0;)
	r17 = 2<32>
	r0 = 2<32>
	call _Unlocksyslock (retsize: 0;)
	Mem0[r16:word32] = r17
	// succ:  l00009108
l00009108:
	branch r0 > 2<32> l0000910C
	// succ:  l00009108_thunk_closeall l0000910C
l00009108_thunk_closeall:
	call closeall (retsize: 0;)
	return
	// succ:  _Closreg_exit
l0000910C:
	branch r0 > 2<32> l0000910C
	// succ:  l0000910C_thunk_closeall l0000910C
l0000910C_thunk_closeall:
	call closeall (retsize: 0;)
	return
	// succ:  _Closreg_exit
_Closreg_exit:


// closeall
// Return size: 0
define closeall
closeall_entry:
	r29 = fp
	goto l00009114
	// succ:  l00009114
l00009108_thunk_closeall:
	call closeall (retsize: 0;)
	return
	// succ:  closeall_exit
l00009114:
	r0 = Mem0[r16:word32]
	goto l00009108_thunk_closeall
	// succ:  l00009108_thunk_closeall
closeall_exit:


// fclose
// Return size: 0
define fclose
fclose_entry:
	r29 = fp
	// succ:  l00009140
l00009140:
	v3 = r29 - 8<i32>
	Mem0[v3:word32] = r30
	Mem0[v3 + 4<i32>:word32] = r31
	r30 = v3
	r29 = v3 - 16<i32>
	Mem0[r29 + 496<i32>:word64] = r17_r16
	r16 = r0
	Mem0[r29:word64] = r19_r18
	r0 = Mem0[r16:byte]
	branch r0 == 0<32> l000091D4
	// succ:  l00009158 l000091D4
l00009158:
	r0 = r0 & 3<32>
	branch tstbit(r0, -1<i32>) l000091D4
	// succ:  l00009160 l000091D4
l00009160:
	r0 = r16
	r17 = r0
	r0 = 2<32>
	call _Locksyslock (retsize: 0;)
	r0 = Mem0[r16:byte]
	branch r0 == 0<32> l00009184
	// succ:  l0000917C l00009184
l0000917C:
	r0 = r0 & 0x40<32>
	r0 = Mem0[r16 + 8<i32>:word32]
	Mem0[r16 + 8<i32>:word32] = 0<32>
	r0 = Mem0[r16 + 4<i32>:word32]
	call close (retsize: 0;)
	goto l00009188
	// succ:  l00009188
l00009184:
	Mem0[r16 + 8<i32>:word32] = 0<32>
	r0 = Mem0[r16 + 4<i32>:word32]
	// succ:  l00009188
l00009188:
	r1 = Mem0[r16 + 64<i32>:word32]
	r17 = 0xFFFFFFFF<32>
	p0 = r0 == 0<32>
	r0 = r1
	call remove (retsize: 0;)
	r1 = Mem0[r16 + 64<i32>:word32]
	r18 = r0
	r0 = r1
	call free (retsize: 0;)
	Mem0[r16 + 64<i32>:word32] = 0<32>
	r17 = 0xFFFFFFFF<32>
	p0 = r18 == 0<32>
	r0 = r16
	call _Fofree (retsize: 0;)
	r0 = 2<32>
	call _Unlocksyslock (retsize: 0;)
	goto l000091F4
	// succ:  l000091F4
l000091D4:
	r0 = 2<32>
	r0 = r16
	call _Fofree (retsize: 0;)
	r0 = 2<32>
	call _Unlocksyslock (retsize: 0;)
	r17 = 0xFFFFFFFF<32>
	call _Geterrno (retsize: 0;)
	Mem0[r0:word32] = 9<32>
	// succ:  l000091F4
l000091F4:
	r19_r18 = Mem0[r29:word64]
	r17_r16 = Mem0[r29 + 8<i32>:word64]
	r0 = r17
	v11 = r30
	r31 = Mem0[v11 + 4<i32>:word32]
	r30 = Mem0[v11:word32]
	r29 = v11 + 8<i32>
	return
	// succ:  fclose_exit
fclose_exit:


// fflush
// Return size: 0
define fflush
fflush_entry:
	r29 = fp
	// succ:  l00009200
l00009200:
	v3 = r29 - 8<i32>
	Mem0[v3:word32] = r30
	Mem0[v3 + 4<i32>:word32] = r31
	r30 = v3
	r29 = v3 - 16<i32>
	Mem0[r29 + 496<i32>:word64] = r17_r16
	r16 = r0
	Mem0[r29:word64] = r19_r18
	r0 = r16 + 0<32>
	branch p0 l0000926C
	// succ:  l00009214 l0000926C
l00009214:
	p0 = r8 == 0<32>
	call _Lockfilelock (retsize: 0;)
	r0 = Mem0[r16:word16]
	r1 = r0 & 0x2000<32>
	r17 = Mem0[r16 + 8<i32>:word32]
	r1 = Mem0[r16 + 16<i32>:word32]
	r0 = Mem0[r16 + 4<i32>:word32]
	r1 = r17
	r2 = r1 - r17
	call write (retsize: 0;)
	r17 = r17 + r0
	branch p0 l000092C4
	// succ:  l00009248 l000092C4
l00009248:
	p0 = r0 > 0<32>
	r1 = Mem0[r16 + 16<i32>:word32]
	r0 = Mem0[r16:int16]
	r17 = Mem0[r16 + 8<i32>:word32]
	Mem0[r16 + 16<i32>:word32] = r17
	r0 = r16
	r1 = r0 & 0xDFFF<32>
	Mem0[r16 + 24<i32>:word32] = r17
	Mem0[r16 + 52<i32>:word32] = r17
	Mem0[r16:word16] = r1
	goto l000092B0
	// succ:  l000092B0
l0000926C:
	r17_r16 = 0xE50000000038<64>
	r0 = 2<32>
	call _Locksyslock (retsize: 0;)
	r18 = 0x14<32>
	branch r0 == 0<32> l00009298
	// succ:  l0000928C l00009298
l0000928C:
	r0 = Mem0[r16:word32]
	r17 = 0xFFFFFFFF<32>
	p0 = r0 > 0xFFFFFFFF<32>
	branch r18 == 1<32> l0000928C
	goto l000092A8
	// succ:  l000092A8 l0000928C
l00009298:
	branch r18 == 1<32> l0000928C
	// succ:  l000092A8 l0000928C
l000092A8:
	r18 = r18 + 0xFFFFFFFF<32>
	r16 = r16 + 4<32>
	r0 = 2<32>
	goto l000092B8
	// succ:  l000092B8
l000092B0:
	r17 = 0<32>
	// succ:  l000092B4
l000092B4:
	call _Unlockfilelock (retsize: 0;)
	// succ:  l000092B8
l000092B8:
	r19_r18 = Mem0[r29:word64]
	r17_r16 = Mem0[r29 + 8<i32>:word64]
	r0 = r17
	v16 = r30
	r31 = Mem0[v16 + 4<i32>:word32]
	r30 = Mem0[v16:word32]
	r29 = v16 + 8<i32>
	return
	// succ:  fflush_exit
l000092C4:
	r2 = Mem0[r16:int16]
	r1 = Mem0[r16 + 8<i32>:word32]
	r17 = 0xFFFFFFFF<32>
	r0 = r16
	Mem0[r16 + 52<i32>:word32] = r1
	Mem0[r16 + 16<i32>:word32] = r1
	r2 = setbit(r2, 0x12<32>)
	Mem0[r16 + 8<i32>:word16] = r2
	Mem0[r16 + 24<i32>:word32] = r1
	goto l000092B4
	// succ:  l000092B4
fflush_exit:


// fputc
// Return size: 0
define fputc
fputc_entry:
	r29 = fp
	// succ:  l000092E0
l000092E0:
	v3 = r29 - 8<i32>
	Mem0[v3:word32] = r30
	Mem0[v3 + 4<i32>:word32] = r31
	r30 = v3
	r29 = v3 - 8<i32>
	Mem0[r29 + 496<i32>:word64] = r17_r16
	r17_r16 = r1_r0
	r0 = r17
	call _Lockfilelock (retsize: 0;)
	r0 = Mem0[r17 + 16<i32>:word32]
	r1 = Mem0[r17 + 24<i32>:word32]
	r0 = r17
	call _Fwprep (retsize: 0;)
	r0 = Mem0[r17 + 16<i32>:word32]
	branch p0 l00009348
	// succ:  l0000930C l00009348
l0000930C:
	p0 = tstbit(r0, 0<32>)
	r1 = r0 + 1<32>
	p0 = SLICE(r16, byte, 0) == SLICE(0xA<8>, byte, 0)
	Mem0[r0:byte] = r16
	r0 = Mem0[r17:word16]
	r1 = r0 & 0x800<32>
	branch r0 == 0<32> l00009358
	// succ:  l0000933C l00009358
l0000933C:
	r0 = r0 & 0x400<32>
	r0 = r17
	call fflush (retsize: 0;)
	branch p0 l00009350
	// succ:  l00009348 l00009350
l00009348:
	p0 = r0 == 0<32>
	r16 = 0xFFFFFFFF<32>
	goto l00009354
	// succ:  l00009354
l00009350:
	r16 = r16 & 0xFF<32>
	r0 = r17
	// succ:  l00009354
l00009354:
	call _Unlockfilelock (retsize: 0;)
	// succ:  l00009358
l00009358:
	v14 = r30
	r31 = Mem0[v14 + 4<i32>:word32]
	r30 = Mem0[v14:word32]
	r29 = v14 + 8<i32>
	return
	// succ:  fputc_exit
fputc_exit:


// fputs
// Return size: 0
define fputs
fputs_entry:
	r29 = fp
	// succ:  l00009360
l00009360:
	v3 = r29 - 8<i32>
	Mem0[v3:word32] = r30
	Mem0[v3 + 4<i32>:word32] = r31
	r30 = v3
	r29 = v3 - 32<i32>
	Mem0[r29 + 496<i32>:word64] = r17_r16
	r17_r16 = r0_r1
	Mem0[r29 + 16<i32>:word64] = r19_r18
	r0 = r16
	call _Lockfilelock (retsize: 0;)
	goto l00009378
	// succ:  l00009378
l00009374:
	r17 = r17 + r18
	// succ:  l00009378
l00009378:
	branch r0 == 0<32> l00009434
	// succ:  l00009384 l00009434
l00009384:
	r0 = Mem0[r17:byte]
	r1 = Mem0[r16 + 24<i32>:word32]
	r0 = r16
	call _Fwprep (retsize: 0;)
	branch p0 l00009448
	// succ:  l00009398 l00009448
l00009398:
	p0 = tstbit(r0, 0<32>)
	r0 = Mem0[r16 + 1<i32>:byte]
	branch r0 == 0<32> l000093B4
	// succ:  l000093A8 l000093B4
l000093A8:
	r0 = r0 & 4<32>
	branch p0 l000093CC
	// succ:  l000093B0 l000093CC
l000093B0:
	p0 = r0 == 0<32>
	r0 = r17
	call strlen (retsize: 0;)
	goto l000093B8
	// succ:  l000093B8
l000093B4:
	r0 = r17
	// succ:  l000093B8
l000093B8:
	r3 = r0
	p0 = p0 | !p0
	goto l000093E0
	// succ:  l000093E0
l000093CC:
	r3 = r0 + (0x41<32> - r17)
	p0 = p0 & p0
	Mem0[r29 + 2<i32>:byte] = r0
	r0 = p0
	// succ:  l000093E0
l000093E0:
	r2 = Mem0[r16 + 24<i32>:word32]
	r0 = Mem0[r16 + 16<i32>:word32]
	r4 = r2 - r0
	p0 = r3 >u r4
	r18 = minu(r3, r4)
	r2 = r18
	call fn000073E4 (retsize: 0;)
	r3 = p0
	r1 = Mem0[r29 + 4<i32>:word64]
	r0 = Mem0[r16 + 16<i32>:word32]
	Mem0[r16 + 4<i32>:byte] = r0
	r0 = r0 + r18
	branch p0 l00009378
	// succ:  l00009418 l00009378
l00009418:
	p0 = r1
	r0 = r16 + 0<32>
	branch p0 l00009378
	// succ:  l00009424 l00009378
l00009424:
	p0 = r0
	call fflush (retsize: 0;)
	branch p0 l00009374
	// succ:  l0000942C l00009374
l0000942C:
	p0 = r16 == 1<32>
	goto l00009448
	// succ:  l00009448
l00009434:
	branch r0 == 0<32> l00009454
	// succ:  l00009440 l00009454
l00009440:
	r0 = r0 & 8<32>
	r0 = r16
	branch p0 l00009450
	// succ:  l00009448 l00009450
l00009448:
	p0 = r0 == 0<32>
	r16 = 0xFFFFFFFF<32>
	goto l00009454
	// succ:  l00009454
l00009450:
	r0 = r16
	r16 = 0<32>
	// succ:  l00009454
l00009454:
	call _Unlockfilelock (retsize: 0;)
	r19_r18 = Mem0[r29 + 16<i32>:word64]
	r17_r16 = Mem0[r29 + 24<i32>:word64]
	r0 = r16
	v16 = r30
	r31 = Mem0[v16 + 4<i32>:word32]
	r30 = Mem0[v16:word32]
	r29 = v16 + 8<i32>
	return
	// succ:  fputs_exit
fputs_exit:


// ldexpl
// Return size: 0
define ldexpl
ldexpl_entry:
	r29 = fp
	// succ:  l00009470
l00009470:
	v3 = r29 - 8<i32>
	Mem0[v3:word32] = r30
	Mem0[v3 + 4<i32>:word32] = r31
	r30 = v3
	r29 = v3 - 16<i32>
	Mem0[r29 + 496<i32>:word64] = r17_r16
	r16 = r2
	Mem0[r29:word64] = r1_r0
	r0 = r29 + 0<32>
	branch p0 l000094AC
	// succ:  l00009484 l000094AC
l00009484:
	p0 = r8 == 0<32>
	call _LDtest (retsize: 0;)
	branch p0 l000094AC
	// succ:  l0000948C l000094AC
l0000948C:
	p0 = tstbit(r0, 0<32>)
	r1 = r16
	r0 = r29 + 0<32>
	call _LDscale (retsize: 0;)
	r0 = 4<32>
	// succ:  l000094AC
l000094AC:
	r17_r16 = Mem0[r29 + 8<i32>:word64]
	r1_r0 = Mem0[r29:word64]
	v14 = r30
	r31 = Mem0[v14 + 4<i32>:word32]
	r30 = Mem0[v14:word32]
	r29 = v14 + 8<i32>
	return
	// succ:  ldexpl_exit
ldexpl_exit:


// ldiv
// Return size: 0
define ldiv
ldiv_entry:
	r29 = fp
	// succ:  l000094C0
l000094C0:
	v3 = r29 - 8<i32>
	Mem0[v3:word32] = r30
	Mem0[v3 + 4<i32>:word32] = r31
	r30 = v3
	r29 = v3 - 8<i32>
	Mem0[r29 + 496<i32>:word64] = r17_r16
	r17_r16 = r1_r0
	call __hexagon_divsi3 (retsize: 0;)
	r2 = r0 * r17
	v12 = r30
	r31 = Mem0[v12 + 4<i32>:word32]
	r30 = Mem0[v12:word32]
	r29 = v12 + 8<i32>
	return
	// succ:  ldiv_exit
ldiv_exit:


// close
// Return size: 0
define close
close_entry:
	r29 = fp
	// succ:  l000094E0
l000094E0:
	// succ:  l000094E0_thunk___sys_close
l000094E0_thunk___sys_close:
	call __sys_close (retsize: 0;)
	return
	// succ:  close_exit
close_exit:


// write
// Return size: 0
define write
write_entry:
	r29 = fp
	// succ:  l000094F0
l000094F0:
	v3 = r29 - 8<i32>
	Mem0[v3:word32] = r30
	Mem0[v3 + 4<i32>:word32] = r31
	r30 = v3
	r29 = v3 - 8<i32>
	Mem0[r29 + 496<i32>:word64] = r17_r16
	r16 = r2
	call __sys_write (retsize: 0;)
	v9 = r30
	r31 = Mem0[v9 + 4<i32>:word32]
	r30 = Mem0[v9:word32]
	r29 = v9 + 8<i32>
	return
	// succ:  write_exit
write_exit:


// remove
// Return size: 0
define remove
remove_entry:
	r29 = fp
	// succ:  l00009510
l00009510:
	// succ:  l00009510_thunk___sys_remove
l00009510_thunk___sys_remove:
	call __sys_remove (retsize: 0;)
	return
	// succ:  remove_exit
remove_exit:


// sqrtl
// Return size: 0
define sqrtl
sqrtl_entry:
	r29 = fp
	// succ:  l00009520
l00009520:
	v3 = r29 - 8<i32>
	Mem0[v3:word32] = r30
	Mem0[v3 + 4<i32>:word32] = r31
	r30 = v3
	r29 = v3 - 24<i32>
	Mem0[r29 + 496<i32>:word64] = r17_r16
	r17_r16 = r1_r0
	Mem0[r29 + 8<i32>:word64] = r17_r16
	r1 = r29 + 8<32>
	r0 = r29 + 6<32>
	call _LDunscale (retsize: 0;)
	branch p0 l00009558
	// succ:  l00009538 l00009558
l00009538:
	p0 = r0 == 0<32>
	branch p0 l00009540
	// succ:  l0000953C l00009540
l0000953C:
	p0 = r0 == 2<32>
	branch p0 l00009558
	// succ:  l00009540 l00009558
l00009540:
	p0 = r0 == 4<32>
	r0 = r29 + 8<32>
	r0 = r0 | 6<32>
	branch tstbit(r0, -1<i32>) l0000955C
	// succ:  l00009554 l0000955C
l00009554:
	r0 = Mem0[r0:int16]
	r0 = 1<32>
	// succ:  l00009558
l00009558:
	r1_r0 = r17_r16
	call fn0000ADC0 (retsize: 0;)
	goto l00009560
	// succ:  l00009560
l0000955C:
	r1_r0 = r17_r16
	// succ:  l00009560
l00009560:
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  sqrtl_exit
sqrtl_exit:


// strrchr
// Return size: 0
define strrchr
strrchr_entry:
	r29 = fp
	// succ:  l00009570
l00009570:
	r1 = r1 & 0xFF<32>
	r2 = 0<32>
	// succ:  l00009574
l00009574:
	r3 = r0
	r3 = r3 + 1<i32>
	r4 = Mem0[r3:byte]
	p0 = r4 == 0<32>
	r0 = r3
	r2 = r0 + 0<32>
	p1 = r4 == r1
	branch p0 l00009574
	// succ:  l0000958C l00009574
l0000958C:
	return
	// succ:  strrchr_exit
strrchr_exit:


// _Atexit
// Return size: 0
define _Atexit
_Atexit_entry:
	r29 = fp
	// succ:  l00009590
l00009590:
	v3 = r29 - 8<i32>
	Mem0[v3:word32] = r30
	Mem0[v3 + 4<i32>:word32] = r31
	r30 = v3
	r29 = v3 - 8<i32>
	Mem0[r29 + 496<i32>:word64] = r17_r16
	r16 = r0
	r2 = Mem0[gp + 64<i32>:word32]
	r1 = Mem0[gp + 12<i32>:word32]
	call _Atrealloc (retsize: 0;)
	branch p0 l000095C4
	// succ:  l000095AC l000095C4
l000095AC:
	p0 = r0 == 0<32>
	r1 = Mem0[gp + 12<i32>:word32]
	r1 = Mem0[gp + 8<i32>:word32]
	r0 = r1 + 0xFFFFFFFF<32>
	Mem0[r30 + r0 * 4<32>:word32] = r16
	Mem0[gp:word32] = r0
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  _Atexit_exit
l000095C4:
	call abort (retsize: 0;)
	// succ:  l000095CC_thunk__Dunscale
l000095CC_thunk__Dunscale:
	call _Dunscale (retsize: 0;)
	return
	// succ:  _Atexit_exit
_Atexit_exit:


// _Dunscale
// Return size: 0
define _Dunscale
_Dunscale_entry:
	r29 = fp
	// succ:  l000095D0
l000095D0:
	v3 = r29 - 8<i32>
	Mem0[v3:word32] = r30
	Mem0[v3 + 4<i32>:word32] = r31
	r30 = v3
	r29 = v3 - 8<i32>
	Mem0[r29 + 496<i32>:word64] = r17_r16
	r17_r16 = r0_r1
	r2 = Mem0[r16 + 6<i32>:int16]
	r0 = r16
	r1 = CONVERT(SLICE(r2, ui3, 11), ui3, uint32)
	call _Dnorm (retsize: 0;)
	r1 = r0
	r0 = 0<32>
	Mem0[r17:word16] = 0<16>
	// succ:  l00009664
l00009664:
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  _Dunscale_exit
_Dunscale_exit:


// _Feraise
// Return size: 0
define _Feraise
_Feraise_entry:
	r29 = fp
	// succ:  l00009670
l00009670:
	v3 = r29 - 8<i32>
	Mem0[v3:word32] = r30
	Mem0[v3 + 4<i32>:word32] = r31
	r30 = v3
	r29 = v3 - 8<i32>
	r2 = r0 & 0xC<32>
	r1 = setbit(r0, 8<32>)
	Mem0[r29:word64] = r17_r16
	p0 = r2 == 0<32>
	r16 = r1 + 0<32>
	r16 = r0 + 0<32>
	r17 = r16 & 3<32>
	r0 = r16
	call feraiseexcept (retsize: 0;)
	branch p0 l000096A8
	// succ:  l00009698 l000096A8
l00009698:
	p0 = r9 == 0<32>
	call _Geterrno (retsize: 0;)
	Mem0[r0:word32] = 0x21<32>
	r17_r16 = Mem0[r29:word64]
	v14 = r30
	r31 = Mem0[v14 + 4<i32>:word32]
	r30 = Mem0[v14:word32]
	r29 = v14 + 8<i32>
	return
	// succ:  _Feraise_exit
l000096A8:
	branch r0 == 0<32> l000096BC
	// succ:  l000096B4 l000096BC
l000096B4:
	r0 = r16 & 0xC<32>
	Mem0[r0:word32] = 0x22<32>
	v15 = r30
	r31 = Mem0[v15 + 4<i32>:word32]
	r30 = Mem0[v15:word32]
	r29 = v15 + 8<i32>
	return
	// succ:  _Feraise_exit
l000096BC:
	// succ:  l000096BC_thunk__Fofind
l000096BC_thunk__Fofind:
	call _Fofind (retsize: 0;)
	return
	// succ:  _Feraise_exit
_Feraise_exit:


// _Fofind
// Return size: 0
define _Fofind
_Fofind_entry:
	r29 = fp
	// succ:  l000096C0
l000096C0:
	v3 = r29 - 8<i32>
	Mem0[v3:word32] = r30
	Mem0[v3 + 4<i32>:word32] = r31
	r30 = v3
	r29 = v3 - 8<i32>
	Mem0[r29 + 496<i32>:word64] = r17_r16
	r17_r16 = 0xE53800000000<64>
	branch p0 l000096F4
	// succ:  l000096D0 l000096F4
l000096D0:
	p0 = r8 >u -1<i32>
	branch r0 == 0<32> l00009700
	// succ:  l000096DC l00009700
l000096DC:
	r0 = Mem0[r17:word32]
	r1 = Mem0[r0:word16]
	r16 = r16 + 1<32>
	Mem0[r0:word16] = 0xFF7F<16>
	goto l0000971C
	// succ:  l0000971C
l000096F4:
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  _Fofind_exit
l00009700:
	r0 = 0x50<32>
	branch p0 l0000971C
	// succ:  l00009708 l0000971C
l00009708:
	p0 = r0 == 0<32>
	Mem0[r0 + 2<i32>:byte] = r16
	Mem0[r17:word32] = r0
	Mem0[r0:word16] = 0x80<16>
	r17_r16 = Mem0[r29:word64]
	v15 = r30
	r31 = Mem0[v15 + 4<i32>:word32]
	r30 = Mem0[v15:word32]
	r29 = v15 + 8<i32>
	return
	// succ:  _Fofind_exit
l0000971C:
	v14 = r30
	r31 = Mem0[v14 + 4<i32>:word32]
	r30 = Mem0[v14:word32]
	r29 = v14 + 8<i32>
	return
	// succ:  _Fofind_exit
_Fofind_exit:


// _Fofree
// Return size: 0
define _Fofree
_Fofree_entry:
	r29 = fp
	// succ:  l00009720
l00009720:
	v3 = r29 - 8<i32>
	Mem0[v3:word32] = r30
	Mem0[v3 + 4<i32>:word32] = r31
	r30 = v3
	r29 = v3 - 0<i32>
	r2 = r0 + 0x4C<32>
	r1 = Mem0[r0:byte]
	r1 = r1 & 0x80<32>
	r1 = -1<i32>
	r2 = 0x34<32>
	// succ:  l00009740
l00009740:
	r1 = r1 + 1<32>
	r4 = Mem0[r2 + 4<i32>:word32]
	r2 = r2 + 4<32>
	r3 = r2 + 0<32>
	branch p0 l00009740
	// succ:  l00009754 l00009740
l00009754:
	p0 = r4 == -1<i32>
	Mem0[r3:word32] = 0<32>
	call free (retsize: 0;)
	v12 = r30
	r31 = Mem0[v12 + 4<i32>:word32]
	r30 = Mem0[v12:word32]
	r29 = v12 + 8<i32>
	return
	// succ:  _Fofree_exit
_Fofree_exit:


// _Genld
// Return size: 0
define _Genld
_Genld_entry:
	r29 = fp
	// succ:  l00009780
l00009780:
	v3 = r29 - 8<i32>
	Mem0[v3:word32] = r30
	Mem0[v3 + 4<i32>:word32] = r31
	r30 = v3
	r29 = v3 - 48<i32>
	call __save_r16_through_r23 (retsize: 0;)
	r17_r16 = r2_r0
	r19_r18 = r4_r3
	r20 = r1
	call localeconv (retsize: 0;)
	r0 = Mem0[r0 + 44<i32>:word32]
	r3_r2 = 0xD78800000001<64>
	r1 = setbit(r20, 0xA<32>)
	r17 = r3 + 0<32>
	p1 = r1 == 0x66<32>
	p0 = r18 > 0<32>
	r18 = max(r2, r18)
	r21 = Mem0[r0:int8]
	branch p1 l000097E0
	// succ:  l000097C0 l000097E0
l000097C0:
	p2 = r20 == 0x47<32>
	p0 = r20 == 0x67<32>
	branch p3 l00009800
	// succ:  l000097D0 l00009800
l000097D0:
	p3 = p0 | p2
	p3 = r19 > 0xFFFFFFFB<32>
	branch p3 l000097FC
	// succ:  l000097D8 l000097FC
l000097D8:
	branch r19 > r0 l00009800
	goto l000097E4
	// succ:  l000097E4 l00009800
l000097E0:
	r0 = Mem0[r16 - 4<i32>:byte]
	r20 = r19 + 1<32>
	branch p1 l00009868
	goto l000097EC
	// succ:  l000097EC l00009868
l000097E4:
	r0 = Mem0[r16 + 48<i32>:word32]
	r0 = Mem0[r16 - 4<i32>:byte]
	r20 = r19 + 1<32>
	branch r0 == 0<32> l00009848
	goto l000097F8
	// succ:  l000097F8 l00009848
l000097EC:
	branch r0 == 0<32> l00009848
	// succ:  l000097F8 l00009848
l000097F8:
	r0 = r0 & 8<32>
	r0 = Mem0[r16 + 48<i32>:word32]
	// succ:  l000097FC
l000097FC:
	r22 = 0x70<32>
	branch p2 l00009810
	goto l00009804
	// succ:  l00009804 l00009810
l00009800:
	r22 = 0x70<32>
	// succ:  l00009804
l00009804:
	p1 = r20 == 0x61<32>
	branch p0 l000099CC
	// succ:  l00009810 l000099CC l000099D4
l00009810:
	branch p1 l000099D4
l00009848:
	Mem0[r16 + 48<i32>:word32] = r18
	r0 = r18 + 0<32>
	p0 = r0 > r18
	r1 = CONVERT(SLICE(r20, int16, 0), int16, int32)
	r0 = r0 - r1
	Mem0[r16 + 48<i32>:word32] = 0<32>
	Mem0[r16 + 48<i32>:word32] = r0
	p0 = r0 > 0xFFFFFFFF<32>
	// succ:  l00009868
l00009868:
	r19 = CONVERT(SLICE(r20, int16, 0), int16, int32)
	r1 = Mem0[r16 + 16<i32>:word32]
	r0 = Mem0[r16 + 28<i32>:word32]
	p0 = r19 > r18
	r0 = r1 + r0
	branch p0 l00009958
	// succ:  l00009880 l00009958
l00009880:
	r2 = r18
	r1 = r17
	call memcpy (retsize: 0;)
	r0 = Mem0[r16 + 16<i32>:word32]
	r1 = Mem0[r16 + 28<i32>:word32]
	r2 = r19 - r18
	Mem0[r16 + 32<i32>:word32] = r2
	r1 = r1 + r18
	p0 = r0 > 0<32>
	Mem0[r16 + 28<i32>:word32] = r1
	r2 = Mem0[r16 - 4<i32>:byte]
	branch p0 l000098AC
	// succ:  l000098A4 l000098AC
l000098A4:
	branch r2 == 0<32> l000098C8
	goto l000098B0
	// succ:  l000098B0 l000098C8
l000098AC:
	r0 = Mem0[r16 + 16<i32>:word32]
	// succ:  l000098B0
l000098B0:
	r2 = r2 & 8<32>
	r0 = r0 + r1
	Mem0[r0:byte] = r21
	r0 = Mem0[r16 + 16<i32>:word32]
	r1 = Mem0[r16 + 4<i32>:word32]
	r1 = r1 + 1<32>
	Mem0[r16 + 40<i32>:word32] = r0
	goto l00009B18
	// succ:  l00009B18
l000098C8:
	Mem0[r16 + 40<i32>:word32] = r0
l00009958:
	r2 = r19
	r1 = r17
	call memcpy (retsize: 0;)
	r3 = Mem0[r16 + 16<i32>:word32]
	r0 = Mem0[r16 + 28<i32>:word32]
	r2 = r18 - r20
	Mem0[r16 + 7<i32>:byte] = r0
	r0 = r0 + r19
	branch p0 l00009980
	// succ:  l00009978 l00009980
l00009978:
	p0 = r3 > 0<32>
	r1 = r1 & 8<32>
	// succ:  l00009980
l00009980:
	r1 = Mem0[r16 + 16<i32>:word32]
	r3 = r0
	Mem0[r16 + 28<i32>:word32] = r3
	r0 = r0 + r1
	Mem0[r0:byte] = r21
	r0 = Mem0[r16 + 28<i32>:word32]
	r3 = Mem0[r16 + 16<i32>:word32]
	r4 = Mem0[r16 + 16<i32>:word32]
	r5 = CONVERT(SLICE(r2, int16, 0), int16, int32)
	r1 = r17 + r19
	r2 = r3 + 0<32>
	r0 = r4 + r0
	p0 = r5 > r3
	r17 = CONVERT(SLICE(r2, int16, 0), int16, int32)
	r2 = r17
	call memcpy (retsize: 0;)
	r1 = Mem0[r16 + 16<i32>:word32]
	r0 = Mem0[r16 + 28<i32>:word32]
	Mem0[r16 + 7<i32>:byte] = r0
	r1 = r1 - r17
	r0 = r0 + r17
	Mem0[r16 + 32<i32>:word32] = r1
	r22 = r20
	p0 = r20 == 0x41<32>
	goto l000099D0
	// succ:  l000099D0
l000099CC:
	r22 = r20
	// succ:  l000099D0
l000099D0:
	r22 = 0x50<32>
	// succ:  l000099D4
l000099D4:
	r1 = Mem0[r16 + 16<i32>:word32]
	r0 = Mem0[r16 + 28<i32>:word32]
	r17 = r17 + 1<i32>
	r2 = Mem0[r17:int8]
	r0 = r1 + r0
	r3 = r0 + 1<32>
	Mem0[r0:byte] = r2
	branch r0 > 0<32> l00009A04
	// succ:  l000099F8 l00009A04
l000099F8:
	r0 = Mem0[r16 + 48<i32>:word32]
	branch r0 == 0<32> l00009A60
	// succ:  l00009A04 l00009A60
l00009A04:
	r0 = r0 & 8<32>
	r0 = r2 + r0
	r1 = r0 + 1<32>
	Mem0[r0:byte] = r21
	branch r2 > 0<32> l00009A60
	// succ:  l00009A20 l00009A60
l00009A20:
	r2 = Mem0[r16 + 48<i32>:word32]
	r5 = Mem0[r16 + 16<i32>:word32]
	r1 = Mem0[r16 + 28<i32>:word32]
	r1 = r17
	r0 = r5 + r1
	r4 = SLICE(r18, word16, 0) + SLICE(r0, word16, 0)
	r2 = r18 + 0xFFFFFFFF<32>
	p0 = r4 > r2
	r17 = CONVERT(SLICE(r2, int16, 0), int16, int32)
	r2 = r17
	call memcpy (retsize: 0;)
	r1 = Mem0[r16 + 28<i32>:word32]
	r0 = Mem0[r16 + 16<i32>:word32]
	Mem0[r16 + 7<i32>:byte] = r20
	r0 = r0 - r17
	r20 = r1 + r17
	Mem0[r16 + 32<i32>:word32] = r0
	r20 = Mem0[r16 + 28<i32>:word32]
	// succ:  l00009A60
l00009A60:
	r17 = Mem0[r16 + 16<i32>:word32]
	r21 = r20
	p0 = r19 > 0xFFFFFFFF<32>
	r0 = r17 + r20
	r21 = r21 + (r17 + 2<32>)
	Mem0[r0:byte] = r22
	r0 = r0 + 1<i32>
	branch p0 l00009A80
	// succ:  l00009A78 l00009A80
l00009A78:
	Mem0[r0:byte] = 0x2B<8>
	goto l00009A88
	// succ:  l00009A88
l00009A80:
	Mem0[r0:byte] = 0x2D<8>
	r19 = 0<32> - r19
	// succ:  l00009A88
l00009A88:
	r18 = 0<32>
	r23 = r29 + 0<32>
	branch p0 l00009AB4
	// succ:  l00009A94 l00009AB4
l00009A94:
	p0 = r11 > 0<32>
	call div (retsize: 0;)
	r18 = r18 + 1<32>
	Mem0[r23:byte] = r1
	r23 = r23
	r19 = CONVERT(SLICE(r0, int16, 0), int16, int32)
	r17 = r21 + 0<32>
	branch p0 l00009AD0
	// succ:  l00009AB4 l00009AD0
l00009AB4:
	p0 = r10 > 2<32>
	r0 = setbit(r22, 0xA<32>)
	p0 = r0 == 0x65<32>
	r17 = r21 + 0<32>
	branch p0 l00009AD4
	// succ:  l00009AC4 l00009AD4
l00009AC4:
	Mem0[r21:byte] = 0x30<8>
	goto l00009AD8
	// succ:  l00009AD8
l00009AD0:
	goto l00009ADC
	// succ:  l00009ADC
l00009AD4:
	branch p0 l00009B04
	// succ:  l00009AD8 l00009B04
l00009AD8:
	branch p0 l00009B0C
	// succ:  l00009ADC l00009B0C
l00009ADC:
	p0 = r10 > 0<32>
	r2 = r18
	r0 = r29 + 0<32>
	r1 = r17
	__nyi_loop0(0x00009AE8<p32>, r18)
	r2 = r2 + 0xFFFFFFFF<32>
	r3 = r0 + r2
	r3 = Mem0[r3 - 1<i32>:int8]
	r3 = r3 + 0x30<32>
	r17 = r17 + r18
	goto l00009B0C
	// succ:  l00009B0C
l00009B04:
	Mem0[r17:byte] = r0
	r17 = r17 + 1<i32>
	r0 = 0x30<32>
	goto l00009B10
	// succ:  l00009B10
l00009B0C:
	r1 = Mem0[r16 + 16<i32>:word32]
	r0 = Mem0[r16 + 28<i32>:word32]
	// succ:  l00009B10
l00009B10:
	r17 = r17 - (r1 + r0)
	// succ:  l00009B18
l00009B18:
	r0 = Mem0[r16 + 60<i32>:word16]
	branch r0 == 0<32> l00009B48
	// succ:  l00009B28 l00009B48
l00009B28:
	r0 = r0 & 0x14<32>
	r0 = Mem0[r16 + 8<i32>:word32]
	r3 = Mem0[r16:word32]
	r4 = Mem0[r16 + 24<i32>:word32]
	r5 = Mem0[r16 + 4<i32>:word32]
	r3 = r3 + (r2 + r1)
	r0 = r0 + (r3 + r5)
	Mem0[r16 + 24<i32>:word32] = r0
	r0 = r4 - r0
	p0 = r4 > r0
	// succ:  l00009B48
l00009B48:
	// succ:  l00009B4C_thunk__LDint
l00009B4C_thunk__LDint:
	call _LDint (retsize: 0;)
	return
	// succ:  _Genld_exit
_Genld_exit:


// _LDint
// Return size: 0
define _LDint
_LDint_entry:
	r29 = fp
	// succ:  l00009B50
l00009B50:
	v3 = r29 - 8<i32>
	Mem0[v3:word32] = r30
	Mem0[v3 + 4<i32>:word32] = r31
	r30 = v3
	r29 = v3 - 0<i32>
	call _Dint (retsize: 0;)
	v6 = r30
	r31 = Mem0[v6 + 4<i32>:word32]
	r30 = Mem0[v6:word32]
	r29 = v6 + 8<i32>
	return
	// succ:  _LDint_exit
_LDint_exit:


// fn00009B54
// Return size: 0
define fn00009B54
fn00009B54_entry:
	r29 = fp
	// succ:  l00009B54
l00009B54:
	v3 = r29 - 8<i32>
	Mem0[v3:word32] = r30
	Mem0[v3 + 4<i32>:word32] = r31
	r30 = v3
	r29 = v3 - 0<i32>
	v6 = r30
	r31 = Mem0[v6 + 4<i32>:word32]
	r30 = Mem0[v6:word32]
	r29 = v6 + 8<i32>
	return
	// succ:  fn00009B54_exit
fn00009B54_exit:


// _LDscale
// Return size: 0
define _LDscale
_LDscale_entry:
	r29 = fp
	// succ:  l00009B60
l00009B60:
	v3 = r29 - 8<i32>
	Mem0[v3:word32] = r30
	Mem0[v3 + 4<i32>:word32] = r31
	r30 = v3
	r29 = v3 - 0<i32>
	call _Dscale (retsize: 0;)
	v6 = r30
	r31 = Mem0[v6 + 4<i32>:word32]
	r30 = Mem0[v6:word32]
	r29 = v6 + 8<i32>
	return
	// succ:  _LDscale_exit
_LDscale_exit:


// _LDtest
// Return size: 0
define _LDtest
_LDtest_entry:
	r29 = fp
	// succ:  l00009B70
l00009B70:
	v3 = r29 - 8<i32>
	Mem0[v3:word32] = r30
	Mem0[v3 + 4<i32>:word32] = r31
	r30 = v3
	r29 = v3 - 0<i32>
	call _Dtest (retsize: 0;)
	v6 = r30
	r31 = Mem0[v6 + 4<i32>:word32]
	r30 = Mem0[v6:word32]
	r29 = v6 + 8<i32>
	return
	// succ:  _LDtest_exit
_LDtest_exit:


// div
// Return size: 0
define div
div_entry:
	r29 = fp
	// succ:  l00009B80
l00009B80:
	v3 = r29 - 8<i32>
	Mem0[v3:word32] = r30
	Mem0[v3 + 4<i32>:word32] = r31
	r30 = v3
	r29 = v3 - 8<i32>
	Mem0[r29 + 496<i32>:word64] = r17_r16
	r17_r16 = r1_r0
	call __hexagon_divsi3 (retsize: 0;)
	r2 = r0 * r17
	v12 = r30
	r31 = Mem0[v12 + 4<i32>:word32]
	r30 = Mem0[v12:word32]
	r29 = v12 + 8<i32>
	return
	// succ:  div_exit
div_exit:


// feraiseexcept
// Return size: 0
define feraiseexcept
feraiseexcept_entry:
	r29 = fp
	// succ:  l00009BA0
l00009BA0:
	v3 = r29 - 8<i32>
	Mem0[v3:word32] = r30
	Mem0[v3 + 4<i32>:word32] = r31
	r30 = v3
	r29 = v3 - 16<i32>
	Mem0[r29 + 496<i32>:word64] = r17_r16
	branch r16 == 0<32> l00009BA4_thunk__Force_raise
	goto l00009BB4
	// succ:  l00009BB4 l00009BA4_thunk__Force_raise
l00009BA4_thunk__Force_raise:
	call _Force_raise (retsize: 0;)
	return
	// succ:  feraiseexcept_exit
l00009BB4:
	r16 = r0 & 0x1F<32>
	r0 = r29 + 4<32>
	r1 = Mem0[r29 + 4<i32>:word64]
	r0 = r29 + 4<32>
	call fn00009C30 (retsize: 0;)
	r1 = r1 | r16 << 1<32>
	r0 = Mem0[r29 + 4<i32>:word32]
	r16 = r16 & r0 >>u 0x19<32>
	r0 = r16
	v10 = r30
	r31 = Mem0[v10 + 4<i32>:word32]
	r30 = Mem0[v10:word32]
	r29 = v10 + 8<i32>
	return
	// succ:  feraiseexcept_exit
feraiseexcept_exit:


// _Force_raise
// Return size: 0
define _Force_raise
_Force_raise_entry:
	r29 = fp
	// succ:  l00009BE0
l00009BE0:
	v3 = r29 - 8<i32>
	Mem0[v3:word32] = r30
	Mem0[v3 + 4<i32>:word32] = r31
	r30 = v3
	r29 = v3 - 16<i32>
	r3_r2 = Mem0[gp + 192<i32>:word64]
	Mem0[r29:word64] = r19_r18
	Mem0[r29 + 8<i32>:word64] = r17_r16
	r18 = 0xD798<32>
	r0 = Mem0[r18 - 8<i32>:word32]
	branch r0 == 0<32> l00009C18
	// succ:  l00009C08 l00009C18
l00009C08:
	r0 = r0 & r16
	r3_r2 = Mem0[r18 + 8<i32>:word64]
	r1_r0 = Mem0[r18:word64]
	r3_r2 = r1_r0
	r17 = r17 + 0xFFFFFFFF<32>
	r18 = r18 + 0x18<32>
	r1_r0 = r3_r2
	goto l00009C24
	// succ:  l00009C24
l00009C18:
	r17 = r17 + 0xFFFFFFFF<32>
	r18 = r18 + 0x18<32>
	// succ:  l00009C24
l00009C24:
	r19_r18 = Mem0[r29:word64]
	r17_r16 = Mem0[r29 + 8<i32>:word64]
	v18 = r30
	r31 = Mem0[v18 + 4<i32>:word32]
	r30 = Mem0[v18:word32]
	r29 = v18 + 8<i32>
	return
	// succ:  _Force_raise_exit
_Force_raise_exit:


// fesetenv
// Return size: 0
define fesetenv
fesetenv_entry:
	r29 = fp
	// succ:  l00009C2C
l00009C2C:
	r1 = Mem0[r0:word32]
	USR = r1
	return
	// succ:  fesetenv_exit
fesetenv_exit:


// fn00009C30
// Return size: 0
define fn00009C30
fn00009C30_entry:
	r29 = fp
	// succ:  l00009C30
l00009C30:
	USR = r1
	return
	// succ:  fn00009C30_exit
fn00009C30_exit:


// _Tls_get__Locale
// Return size: 0
define _Tls_get__Locale
_Tls_get__Locale_entry:
	r29 = fp
	// succ:  l00009C40
l00009C40:
	v3 = r29 - 8<i32>
	Mem0[v3:word32] = r30
	Mem0[v3 + 4<i32>:word32] = r31
	r30 = v3
	r29 = v3 - 16<i32>
	Mem0[r29 + 496<i32>:word64] = r17_r16
	r1 = 1<32>
	r17 = 0x10064<32>
	r16 = 0x10060<32>
	Mem0[r29:word64] = r19_r18
	// succ:  l00009C5C
l00009C5C:
	r0 = memw_locked(r16)
	p0 = r0 > 0<32>
	branch p0 l00009C70
	// succ:  l00009C68 l00009C70
l00009C68:
	memw_locked(r16, p0, r1)
	branch p0 l00009C5C
	// succ:  l00009C70 l00009C5C
l00009C70:
	r18 = 2<32>
	branch p0 l00009C90
	// succ:  l00009C78 l00009C90
l00009C78:
	p0 = r0 == 0<32>
	r1 = 0x6FF0<32>
	r0 = 0x10064<32>
	call sys_Tlsalloc (retsize: 0;)
	Mem0[r16:word32] = r18
	// succ:  l00009C90
l00009C90:
	branch r0 > 2<32> l00009C94
	goto l00009C9C
	// succ:  l00009C9C l00009C94
l00009C94:
	branch r0 > 2<32> l00009C94
	// succ:  l00009C9C l00009C94
l00009C9C:
	r0 = Mem0[r16:word32]
	r0 = Mem0[r17:word32]
	branch r16 == 0<32> l00009CE8
	// succ:  l00009CB0 l00009CE8
l00009CB0:
	r16 = r0
	r1_r0 = 0x5000000001<64>
	branch r16 == 0<32> l00009CE4
	// succ:  l00009CBC l00009CE4
l00009CBC:
	r16 = r0
	r0 = Mem0[r17:word32]
	r1 = r16
	branch p0 l00009CD0
	// succ:  l00009CC4 l00009CD0
l00009CC4:
	p0 = r0 == 0<32>
	r0 = r16
	r16 = 0<32>
	call free (retsize: 0;)
	goto l00009CE0
	// succ:  l00009CE0
l00009CD0:
	call __hexagon_memcpy_likely_aligned_min32bytes_mult8bytes (retsize: 0;)
	r2 = 0x50<32>
	// succ:  l00009CE0
l00009CE0:
	r19_r18 = Mem0[r29:word64]
	r17_r16 = Mem0[r29 + 8<i32>:word64]
	r0 = r16
	goto l00009CE8
	// succ:  l00009CE8
l00009CE4:
	r19_r18 = Mem0[r29:word64]
	r17_r16 = Mem0[r29 + 8<i32>:word64]
	// succ:  l00009CE8
l00009CE8:
	v15 = r30
	r31 = Mem0[v15 + 4<i32>:word32]
	r30 = Mem0[v15:word32]
	r29 = v15 + 8<i32>
	return
	// succ:  _Tls_get__Locale_exit
_Tls_get__Locale_exit:


// localeconv
// Return size: 0
define localeconv
localeconv_entry:
	r29 = fp
	// succ:  l00009CEC
l00009CEC:
	// succ:  l00009CEC_thunk__Tls_get__Locale
l00009CEC_thunk__Tls_get__Locale:
	call _Tls_get__Locale (retsize: 0;)
	return
	// succ:  localeconv_exit
localeconv_exit:


// _Dint
// Return size: 0
define _Dint
_Dint_entry:
	r29 = fp
	// succ:  l00009CF0
l00009CF0:
	r2 = Mem0[r0 + 6<i32>:word16]
	r3 = 0x7FF<32>
	branch r4 == r3 l00009D38
	// succ:  l00009D08 l00009D38
l00009D08:
	r3 = 2<32>
	r4 = CONVERT(SLICE(r2, ui3, 11), ui3, uint32)
	r1 = Mem0[r0 + 4<i32>:word16]
	r1 = Mem0[r0 + 2<i32>:word16]
	r0 = Mem0[r0:word16]
	r3 = 2<32>
	r3 = 1<32>
	p0 = r0 == 0<32>
	return
	// succ:  _Dint_exit
l00009D38:
	r3 = Mem0[r0 + 4<i32>:word16]
	r3 = Mem0[r0 + 2<i32>:word16]
	r5 = Mem0[r0:word16]
	r3 = 0<32>
	r3 = 0<32>
	r5 = 0x433<32> - r4
	branch r4 > 0<32> l00009D64_thunk__Dnorm
	goto l00009D74
	// succ:  l00009D74 l00009D64_thunk__Dnorm
l00009D64_thunk__Dnorm:
	call _Dnorm (retsize: 0;)
	return
	// succ:  _Dint_exit
l00009D74:
	r1 = r5 - r1
	r4 = SLICE(r5, word16, 0) - SLICE(r1, word16, 0)
	p0 = r1 > 0x34<32>
	r3 = 0xFFFF<32>
	branch p0 l00009DA4
	// succ:  l00009D84 l00009DA4
l00009D84:
	Mem0[r0 + 4<i32>:word16] = 0<16>
	Mem0[r0:word16] = 0<16>
	r1 = r2 & 0x8000<32>
	Mem0[r0 + 6<i32>:word16] = r1
	Mem0[r0 + 2<i32>:word16] = 0xFF80<16>
	return
	// succ:  _Dint_exit
l00009DA4:
	r1 = r4 & 0xF<32>
	r2 = r4 >> 4<32>
	r5 = Mem0[0x0000D868<p32> + r1:word16]
	r1 = CONVERT(SLICE(r4, ui0, 16), ui0, uint32)
	r3 = Mem0[0x0000D888<p32> + r2:word32]
	p0 = r1 == 1<32>
	r1 = Mem0[r12 + r3 * 2<32>:word16]
	r1 = r1 & r5
	r4 = r1
	branch p0 l00009E00
	// succ:  l00009DE0 l00009E00
l00009DE0:
	r4 = r4 ^ r4 & r5
	branch p0 l00009E08
	// succ:  l00009DE4 l00009E08
l00009DE4:
	p0 = r2 == 6<32>
	Mem0[r0 + 4<i32>:word16] = 0<16>
	r2 = Mem0[r0 + 4<i32>:int16]
	r1 = r2 | r1
	Mem0[r0 + 2<i32>:word16] = 0xFF80<16>
	r2 = Mem0[r0 + 2<i32>:int16]
	r1 = r2 | r1
	Mem0[r0:word16] = 0<16>
	r2 = Mem0[r0:int16]
	goto l00009E04
	// succ:  l00009E04
l00009E00:
	Mem0[r0:word16] = 0<16>
	// succ:  l00009E04
l00009E04:
	r1 = r2 | r1
	// succ:  l00009E08
l00009E08:
	r0 = CONVERT(SLICE(r1, uint16, 0), uint16, uint32)
	r3 = 0<32>
	r3 = 0xFFFFFFFF<32>
	p0 = !(r0 == 0<32>)
	return
	// succ:  _Dint_exit
_Dint_exit:


// _Dnorm
// Return size: 0
define _Dnorm
_Dnorm_entry:
	r29 = fp
	// succ:  l00009E20
l00009E20:
	r1 = Mem0[r0 + 6<i32>:word16]
	r1 = r1 & 0x8000<32>
	r3 = r1 & 0xF<32>
	Mem0[r0 + 6<i32>:word16] = r3
	branch p0 l00009E58
	// succ:  l00009E38 l00009E58
l00009E38:
	p0 = r3 == 0<32>
	branch r2 == 0<32> l00009E60
	// succ:  l00009E48 l00009E60
l00009E48:
	r2 = Mem0[r0 + 4<i32>:word16]
	r3 = 0<32>
	branch r2 == 0<32> l00009E5C
	// succ:  l00009E50 l00009E5C
l00009E50:
	branch r4 == 1<32> l00009F64
	goto l00009E5C
	// succ:  l00009E5C l00009F64
l00009E58:
	goto l00009E78
	// succ:  l00009E78
l00009E5C:
	r4 = Mem0[r0:word16]
	// succ:  l00009E60
l00009E60:
	r5 = Mem0[r0 + 2<i32>:int16]
	r3 = Mem0[r0 + 4<i32>:int16]
	r2 = r2 + 0xFFFFFFF0<32>
	goto l00009E68
	// succ:  l00009E68
l00009E64:
	r5 = Mem0[r0 + 2<i32>:int16]
	r3 = Mem0[r0 + 4<i32>:int16]
	// succ:  l00009E68
l00009E68:
	Mem0[r0:word16] = 0<16>
	r4 = Mem0[r0:int16]
	Mem0[r0:word16] = r5
	Mem0[r0 + 8<i32>:word16] = r3
	Mem0[r0 + 2<i32>:word16] = r4
	// succ:  l00009E78
l00009E78:
	branch p0 l00009E64
	// succ:  l00009E80 l00009E64
l00009E80:
	p0 = SLICE(r3, word16, 0) == SLICE(0<16>, word16, 0)
	r4 = r3 + 0<32>
	branch p0 l00009EF8
	// succ:  l00009E8C l00009EF8
l00009E8C:
	p0 = SLICE(r3, word16, 0) >u SLICE(0xF<16>, word16, 0)
	r8 = Mem0[r0 + 2<i32>:int16]
	r5 = Mem0[r0:int16]
	r7 = 0x10<32>
	r6 = Mem0[gp + 132<i32>:word32]
	r9 = Mem0[r0 + 4<i32>:int16]
	r2 = r2 + 0xFFFFFFFF<32>
	r12 = r8 & r6
	r4 = r9 & r6
	r13 = r5 & r6
	// succ:  l00009EA4
l00009EA4:
	r12 = r12 >>u 0xF<32>
	r4 = r4 >>u 0xF<32>
	r4 = r4 | r3 << 1<32>
	r13 = r13 >>u 0xF<32>
	r3 = r4
	r14 = CONVERT(SLICE(r4, uint16, 0), uint16, uint32)
	r13 = r13 | r8 << 1<32>
	r12 = r12 | r9 << 1<32>
	p0 = r7 >u r14
	r9_r8 = r12_r13
	branch p0 l00009EA4
	// succ:  l00009EE0 l00009EA4
l00009EE0:
	r5 = r5 << 1<32>
	Mem0[r0 + 6<i32>:word16] = r4
	Mem0[r0 + 2<i32>:word16] = r13
	Mem0[r0:word16] = r5
	Mem0[r0 + 4<i32>:word16] = r12
	// succ:  l00009EF4
l00009EF4:
	r3 = CONVERT(SLICE(r4, uint16, 0), uint16, uint32)
	// succ:  l00009EF8
l00009EF8:
	r5 = 0x20<32>
	r13 = Mem0[r0 + 2<i32>:int16]
	r3 = Mem0[r0:int16]
	r5 = Mem0[gp + 136<i32>:word32]
	r12 = Mem0[r0 + 4<i32>:int16]
	r2 = r2 + 1<32>
	r8 = r13 & r5
	r9 = r12 & r5
	r7 = r4 << 0xF<32>
	// succ:  l00009F14
l00009F14:
	r13 = CONVERT(SLICE(r4, uint16, 0), uint16, uint32)
	r12 = r3 & r5
	r3 = r13 << 0xF<32>
	r6 = r12 << 0xF<32>
	r6 = r6 | r8 >>u 1<32>
	r7 = r7 | r9 >>u 1<32>
	r3 = r3 | r12 >>u 1<32>
	p0 = SLICE(r4, word16, 0) >u SLICE(0x3F<16>, word16, 0)
	r13_r12 = r6_r7
	branch p0 l00009F14
	// succ:  l00009F4C l00009F14
l00009F4C:
	r4 = r13 >>u 1<32>
	Mem0[r0:word16] = r6
	Mem0[r0 + 8<i32>:word16] = r7
	Mem0[r0:word16] = r4
	Mem0[r0 + 8<i32>:word16] = r3
	r3 = r4 & 0xF<32>
	r1 = CONVERT(SLICE(r2, int16, 0), int16, int32)
	r3 = r3 | r1
	goto l00009F68
	// succ:  l00009F68
l00009F64:
	// succ:  l00009F68
l00009F68:
	return
	// succ:  _Dnorm_exit
_Dnorm_exit:


// _Dscale
// Return size: 0
define _Dscale
_Dscale_entry:
	r29 = fp
	// succ:  l00009F70
l00009F70:
	v3 = r29 - 8<i32>
	Mem0[v3:word32] = r30
	Mem0[v3 + 4<i32>:word32] = r31
	r30 = v3
	r29 = v3 - 8<i32>
	Mem0[r29 + 496<i32>:word64] = r17_r16
	r17_r16 = r1_r0
	r2 = Mem0[r16 + 6<i32>:int16]
	branch r0 == 0<32> l00009F9C
	// succ:  l00009F88 l00009F9C
l00009F88:
	r0 = CONVERT(SLICE(r2, ui3, 11), ui3, uint32)
	r0 = r16
	r1 = 0<32>
	branch p0 l0000A1D8
	// succ:  l00009F94 l0000A1D8
l00009F94:
	p0 = r16 > 0<32>
	goto l00009FD4
	// succ:  l00009FD4
l00009F9C:
	r3 = 0x7FF<32>
	r1 = 2<32>
	branch r0 == 0<32> l0000A1DC
	// succ:  l00009FB4 l0000A1DC
l00009FB4:
	r0 = r2 & 0xF<32>
	branch r0 == 0<32> l0000A1DC
	// succ:  l00009FBC l0000A1DC
l00009FBC:
	branch r0 == 0<32> l0000A1DC
	// succ:  l00009FC4 l0000A1DC
l00009FC4:
	r1 = 1<32>
	r1 = 2<32>
	p0 = !(r0 == 0<32>)
	goto l0000A1D8
	// succ:  l0000A1D8
l00009FD4:
	r2 = CONVERT(SLICE(r0, int16, 0), int16, int32)
	branch p0 l00009FE8
	// succ:  l00009FDC l00009FE8
l00009FDC:
	p0 = r9 > 0<32>
	branch r17 > r0 l0000A054
	goto l00009FEC
	// succ:  l00009FEC l0000A054
l00009FE8:
	r0 = Mem0[r16 + 6<i32>:word16]
	r1 = 0<32> - r2
	r3 = 0xFFFFFFCB<32>
	goto l00009FF8
	// succ:  l00009FF8
l00009FEC:
	r0 = 0x7FF<32> - r2
	r0 = Mem0[r16 + 6<i32>:word16]
	r1 = 0<32> - r2
	// succ:  l00009FF8
l00009FF8:
	r2 = r2 + r17
	r0 = r0 & 0x800F<32>
	r1 = 0xFFFF<32>
	r0 = r0 | r2 << 4<32>
	r0 = r0 & 0x8000<32>
	r1 = r0 & 0xF<32>
	Mem0[r16 + 4<i32>:word16] = 0<16>
	Mem0[r16:word16] = 0<16>
	p0 = r3 >u r2
	r1 = setbit(r1, 8<32>)
	Mem0[r16 + 8<i32>:word16] = r1
	r1 = -1<i32>
	branch p0 l0000A06C
	// succ:  l0000A040 l0000A06C
l0000A040:
	Mem0[r16 + 6<i32>:word16] = r0
	Mem0[r16 + 2<i32>:word16] = 0xFF80<16>
	goto l0000A1D8
	// succ:  l0000A1D8
l0000A054:
	r1_r0 = Mem0[r0:word64]
	branch tstbit(r2, -1<i32>) l0000A068
	// succ:  l0000A064 l0000A068
l0000A064:
	r2 = Mem0[r16 + 6<i32>:int16]
	Mem0[r16:word64] = r1_r0
	goto l0000A1D8
	// succ:  l0000A1D8
l0000A068:
	Mem0[r16:word64] = r1_r0
	// succ:  l0000A06C
l0000A06C:
	r2 = CONVERT(SLICE(r2, int16, 0), int16, int32)
	r3 = 0<32>
	r4 = r2 << 0x10<8>
	p0 = r4 > 0xFFF0FFFF<32>
	r4 = 0<32>
	branch p0 l0000A0F0
	// succ:  l0000A084 l0000A0F0
l0000A084:
	r13 = Mem0[r16 + 2<i32>:int16]
	r12 = Mem0[r16 + 4<i32>:int16]
	r4 = 0<32>
	r5 = Mem0[r16:int16]
	r6 = 0<32>
	// succ:  l0000A0A0
l0000A0A0:
	r9 = r1
	r4 = CONVERT(SLICE(r4, uint16, 0), uint16, uint32)
	r14 = 0x100000<32>
	r13_r12 = r12_r9
	r4 = !(r4 == 0<32>)
	r7 = r13
	r14 = r14 + (r2 << 0x10<32>)
	r5 = r7
	r1 = 0<32>
	r2 = r14 >> 0x10<32>
	r4 = r5 | r4
	p0 = r6 > r14
	branch p0 l0000A0A0
	// succ:  l0000A0D4 l0000A0A0
l0000A0D4:
	Mem0[r16 + 4<i32>:word16] = r9
	Mem0[r16 + 6<i32>:word16] = 0xFF80<16>
	r1 = 0<32>
	r8 = r13
	Mem0[r16:word16] = r7
	Mem0[r16 + 2<i32>:word16] = r8
	// succ:  l0000A0F0
l0000A0F0:
	r5 = 0<32> - r2
	r8 = CONVERT(SLICE(r1, uint16, 0), uint16, uint32)
	branch p0 l0000A148
	// succ:  l0000A100 l0000A148
l0000A100:
	p0 = SLICE(r5, word16, 0) == SLICE(0<16>, word16, 0)
	r3 = Mem0[r16 + 2<i32>:word16]
	r4 = CONVERT(SLICE(r4, uint16, 0), uint16, uint32)
	r2 = SLICE(r3, word16, 0) - SLICE(r2, word16, 0)
	r5 = Mem0[r16:word16]
	r6 = Mem0[r16 + 4<i32>:word16]
	r7 = 0x10<32> - r2
	r1 = r1 & r8 >>u r2
	Mem0[r16 + 6<i32>:word16] = r1
	r4 = !(r4 == 0<32>)
	r12 = r12 & r6 << r7
	r8 = r8 & r8 << r7
	r4 = r4 | r5 << r7
	r9 = r9 & r3 << r7
	r12 = r12 | r3 >>u r2
	r8 = r8 | r6 >>u r2
	Mem0[r16 + 2<i32>:word16] = r12
	Mem0[r16 + 4<i32>:word16] = r8
	r9 = r9 | r5 >>u r2
	Mem0[r16:word16] = r9
	r2 = CONVERT(SLICE(r4, uint16, 0), uint16, uint32)
	r3 = 1<32>
	r1 = r1 | r0
	goto l0000A150
	// succ:  l0000A150
l0000A148:
	r2 = CONVERT(SLICE(r4, uint16, 0), uint16, uint32)
	r3 = 1<32>
	// succ:  l0000A150
l0000A150:
	Mem0[r16 + 6<i32>:word16] = r1
	r2 = Mem0[r16:int16]
	branch p0 l0000A170
	// succ:  l0000A15C l0000A170
l0000A15C:
	p0 = r3 >u r2
	r3 = 0x8000<32>
	r2 = Mem0[r16:int16]
	branch p0 l0000A19C
	// succ:  l0000A170 l0000A19C
l0000A170:
	p0 = tstbit(r2, 0<32>)
	r2 = r2 + 1<32>
	Mem0[r16 + 8<i32>:word16] = r2
	r3 = CONVERT(SLICE(r2, uint16, 0), uint16, uint32)
	r2 = Mem0[r16 + 2<i32>:int16]
	branch p0 l0000A19C
	// succ:  l0000A180 l0000A19C
l0000A180:
	p0 = r3 == 0<32>
	r2 = r2 + 1<32>
	Mem0[r16 + 8<i32>:word16] = r2
	r3 = CONVERT(SLICE(r2, uint16, 0), uint16, uint32)
	r2 = Mem0[r16 + 4<i32>:int16]
	branch p0 l0000A19C
	// succ:  l0000A190 l0000A19C
l0000A190:
	p0 = r3 == 0<32>
	r2 = r2 + 1<32>
	Mem0[r16 + 8<i32>:word16] = r2
	r3 = CONVERT(SLICE(r2, uint16, 0), uint16, uint32)
	branch p0 l0000A1C8
	// succ:  l0000A19C l0000A1C8
l0000A19C:
	p0 = r3 == 0<32>
	r1 = CONVERT(SLICE(r1, uint16, 0), uint16, uint32)
	branch r0 == 0<32> l0000A1D4
	// succ:  l0000A1B0 l0000A1D4
l0000A1B0:
	r0 = Mem0[r16 + 4<i32>:word16]
	branch r0 == 0<32> l0000A1D4
	// succ:  l0000A1B8 l0000A1D4
l0000A1B8:
	r1 = 0xFFFF<32>
	p0 = r0 == 0<32>
	goto l0000A1D8
	// succ:  l0000A1D8
l0000A1C8:
	Mem0[r16 + 3<i32>:byte] = r0
	r0 = r1 + 1<32>
	// succ:  l0000A1D4
l0000A1D4:
	r1 = 0x3F<32>
	// succ:  l0000A1D8
l0000A1D8:
	v27 = r30
	r31 = Mem0[v27 + 4<i32>:word32]
	r30 = Mem0[v27:word32]
	r29 = v27 + 8<i32>
	return
	// succ:  _Dscale_exit
l0000A1DC:
	v26 = r30
	r31 = Mem0[v26 + 4<i32>:word32]
	r30 = Mem0[v26:word32]
	r29 = v26 + 8<i32>
	return
	// succ:  _Dscale_exit
_Dscale_exit:


// _Dtest
// Return size: 0
define _Dtest
_Dtest_entry:
	r29 = fp
	// succ:  l0000A1E0
l0000A1E0:
	r2 = Mem0[r0 + 6<i32>:word16]
	r1 = 0x7FF0<32>
	r3 = r2 & r1
	r1 = 2<32>
	branch r2 == 0<32> l0000A1F4_thunk_fegetenv
	goto l0000A200
	// succ:  l0000A200 l0000A1F4_thunk_fegetenv
l0000A1F4_thunk_fegetenv:
	call fegetenv (retsize: 0;)
	return
	// succ:  _Dtest_exit
l0000A200:
	r2 = r2 & 0xF<32>
	branch r2 == 0<32> l0000A200_thunk_fegetenv
	goto l0000A208
	// succ:  l0000A208 l0000A200_thunk_fegetenv
l0000A200_thunk_fegetenv:
	call fegetenv (retsize: 0;)
	return
	// succ:  _Dtest_exit
l0000A208:
	branch r2 == 0<32> l0000A208_thunk_fegetenv
	goto l0000A210
	// succ:  l0000A210 l0000A208_thunk_fegetenv
l0000A208_thunk_fegetenv:
	call fegetenv (retsize: 0;)
	return
	// succ:  _Dtest_exit
l0000A210:
	r1 = 1<32>
	r1 = 2<32>
	p0 = !(r0 == 0<32>)
	return
	// succ:  _Dtest_exit
_Dtest_exit:


// fegetenv
// Return size: 0
define fegetenv
fegetenv_entry:
	r29 = fp
	// succ:  l0000A260
l0000A260:
	r1 = USR
	Mem0[r0:word32] = r1
	return
	// succ:  fegetenv_exit
fegetenv_exit:


// __save_r16_through_r27
// Return size: 0
define __save_r16_through_r27
__save_r16_through_r27_entry:
	r29 = fp
	// succ:  l0000A270
l0000A270:
	Mem0[r30 - 40<i32>:word64] = r25_r24
	Mem0[r30 - 48<i32>:word64] = r27_r26
	// succ:  l0000A270_thunk___save_r16_through_r23
l0000A270_thunk___save_r16_through_r23:
	call __save_r16_through_r23 (retsize: 0;)
	return
	// succ:  __save_r16_through_r27_exit
__save_r16_through_r27_exit:


// __save_r16_through_r23
// Return size: 0
define __save_r16_through_r23
__save_r16_through_r23_entry:
	r29 = fp
	// succ:  l0000A278
l0000A278:
	Mem0[r30 - 24<i32>:word64] = r21_r20
	Mem0[r30 - 32<i32>:word64] = r23_r22
	// succ:  l0000A278_thunk___save_r16_through_r19
l0000A278_thunk___save_r16_through_r19:
	call __save_r16_through_r19 (retsize: 0;)
	return
	// succ:  __save_r16_through_r23_exit
__save_r16_through_r23_exit:


// __save_r16_through_r19
// Return size: 0
define __save_r16_through_r19
__save_r16_through_r19_entry:
	r29 = fp
	// succ:  l0000A280
l0000A280:
	Mem0[r30 - 8<i32>:word64] = r17_r16
	Mem0[r30 - 16<i32>:word64] = r19_r18
	return
	// succ:  __save_r16_through_r19_exit
__save_r16_through_r19_exit:


// __save_r16_through_r27_stkchk
// Return size: 0
define __save_r16_through_r27_stkchk
__save_r16_through_r27_stkchk_entry:
	r29 = fp
	// succ:  l0000A290
l0000A290:
	Mem0[r30 - 40<i32>:word64] = r25_r24
	Mem0[r30 - 48<i32>:word64] = r27_r26
	// succ:  l0000A290_thunk___save_r16_through_r23_stkchk
l0000A290_thunk___save_r16_through_r23_stkchk:
	call __save_r16_through_r23_stkchk (retsize: 0;)
	return
	// succ:  __save_r16_through_r27_stkchk_exit
__save_r16_through_r27_stkchk_exit:


// __save_r16_through_r23_stkchk
// Return size: 0
define __save_r16_through_r23_stkchk
__save_r16_through_r23_stkchk_entry:
	r29 = fp
	// succ:  l0000A298
l0000A298:
	Mem0[r30 - 24<i32>:word64] = r21_r20
	Mem0[r30 - 32<i32>:word64] = r23_r22
	// succ:  l0000A298_thunk___save_r16_through_r19_stkchk
l0000A298_thunk___save_r16_through_r19_stkchk:
	call __save_r16_through_r19_stkchk (retsize: 0;)
	return
	// succ:  __save_r16_through_r23_stkchk_exit
__save_r16_through_r23_stkchk_exit:


// __save_r16_through_r19_stkchk
// Return size: 0
define __save_r16_through_r19_stkchk
__save_r16_through_r19_stkchk_entry:
	r29 = fp
	// succ:  l0000A2A0
l0000A2A0:
	Mem0[r30 - 8<i32>:word64] = r17_r16
	Mem0[r30 - 16<i32>:word64] = r19_r18
	r17 = UGP
	r16 = Mem0[r17 + 68<i32>:word32]
	return
	// succ:  __save_r16_through_r19_stkchk_exit
__save_r16_through_r19_stkchk_exit:


// __save_r16_through_r25
// Return size: 0
define __save_r16_through_r25
__save_r16_through_r25_entry:
	r29 = fp
	// succ:  l0000A2C0
l0000A2C0:
	Mem0[r30 - 32<i32>:word64] = r23_r22
	Mem0[r30 - 40<i32>:word64] = r25_r24
	// succ:  l0000A2C0_thunk___save_r16_through_r21
l0000A2C0_thunk___save_r16_through_r21:
	call __save_r16_through_r21 (retsize: 0;)
	return
	// succ:  __save_r16_through_r25_exit
__save_r16_through_r25_exit:


// __save_r16_through_r21
// Return size: 0
define __save_r16_through_r21
__save_r16_through_r21_entry:
	r29 = fp
	// succ:  l0000A2C8
l0000A2C8:
	Mem0[r30 - 16<i32>:word64] = r19_r18
	Mem0[r30 - 24<i32>:word64] = r21_r20
	// succ:  l0000A2C8_thunk___save_r16_through_r17
l0000A2C8_thunk___save_r16_through_r17:
	call __save_r16_through_r17 (retsize: 0;)
	return
	// succ:  __save_r16_through_r21_exit
__save_r16_through_r21_exit:


// __save_r16_through_r17
// Return size: 0
define __save_r16_through_r17
__save_r16_through_r17_entry:
	r29 = fp
	// succ:  l0000A2D0
l0000A2D0:
	Mem0[r30 - 8<i32>:word64] = r17_r16
	return
	// succ:  __save_r16_through_r17_exit
__save_r16_through_r17_exit:


// __save_r16_through_r25_stkchk
// Return size: 0
define __save_r16_through_r25_stkchk
__save_r16_through_r25_stkchk_entry:
	r29 = fp
	// succ:  l0000A2D8
l0000A2D8:
	Mem0[r30 - 32<i32>:word64] = r23_r22
	Mem0[r30 - 40<i32>:word64] = r25_r24
	// succ:  l0000A2D8_thunk___save_r16_through_r21_stkchk
l0000A2D8_thunk___save_r16_through_r21_stkchk:
	call __save_r16_through_r21_stkchk (retsize: 0;)
	return
	// succ:  __save_r16_through_r25_stkchk_exit
__save_r16_through_r25_stkchk_exit:


// __save_r16_through_r21_stkchk
// Return size: 0
define __save_r16_through_r21_stkchk
__save_r16_through_r21_stkchk_entry:
	r29 = fp
	// succ:  l0000A2E0
l0000A2E0:
	Mem0[r30 - 16<i32>:word64] = r19_r18
	Mem0[r30 - 24<i32>:word64] = r21_r20
	// succ:  l0000A2E0_thunk___save_r16_through_r17_stkchk
l0000A2E0_thunk___save_r16_through_r17_stkchk:
	call __save_r16_through_r17_stkchk (retsize: 0;)
	return
	// succ:  __save_r16_through_r21_stkchk_exit
__save_r16_through_r21_stkchk_exit:


// __save_r16_through_r17_stkchk
// Return size: 0
define __save_r16_through_r17_stkchk
__save_r16_through_r17_stkchk_entry:
	r29 = fp
	// succ:  l0000A2E8
l0000A2E8:
	Mem0[r30 - 8<i32>:word64] = r17_r16
	r17 = UGP
	r16 = Mem0[r17 + 68<i32>:word32]
	return
	// succ:  __save_r16_through_r17_stkchk_exit
__save_r16_through_r17_stkchk_exit:


// __restore_r16_through_r23_and_deallocframe_before_tailcall
// Return size: 0
define __restore_r16_through_r23_and_deallocframe_before_tailcall
__restore_r16_through_r23_and_deallocframe_before_tailcall_entry:
	r29 = fp
	// succ:  l0000A304
l0000A304:
	r21_r20 = Mem0[r30 - 24<i32>:word64]
	r23_r22 = Mem0[r30 - 32<i32>:word64]
	// succ:  l0000A304_thunk___restore_r16_through_r19_and_deallocframe_before_tailcall
l0000A304_thunk___restore_r16_through_r19_and_deallocframe_before_tailcall:
	call __restore_r16_through_r19_and_deallocframe_before_tailcall (retsize: 0;)
	return
	// succ:  __restore_r16_through_r23_and_deallocframe_before_tailcall_exit
__restore_r16_through_r23_and_deallocframe_before_tailcall_exit:


// __restore_r16_through_r19_and_deallocframe_before_tailcall
// Return size: 0
define __restore_r16_through_r19_and_deallocframe_before_tailcall
__restore_r16_through_r19_and_deallocframe_before_tailcall_entry:
	r29 = fp
	// succ:  l0000A310
l0000A310:
	r19_r18 = Mem0[r30 - 16<i32>:word64]
	// succ:  l0000A310_thunk___restore_r16_through_r17_and_deallocframe_before_tailcall
l0000A310_thunk___restore_r16_through_r17_and_deallocframe_before_tailcall:
	call __restore_r16_through_r17_and_deallocframe_before_tailcall (retsize: 0;)
	return
	// succ:  __restore_r16_through_r19_and_deallocframe_before_tailcall_exit
__restore_r16_through_r19_and_deallocframe_before_tailcall_exit:


// __restore_r16_through_r27_and_deallocframe_before_tailcall
// Return size: 0
define __restore_r16_through_r27_and_deallocframe_before_tailcall
__restore_r16_through_r27_and_deallocframe_before_tailcall_entry:
	r29 = fp
	// succ:  l0000A318
l0000A318:
	r27_r26 = Mem0[r30 - 48<i32>:word64]
	// succ:  l0000A318_thunk___restore_r16_through_r25_and_deallocframe_before_tailcall
l0000A318_thunk___restore_r16_through_r25_and_deallocframe_before_tailcall:
	call __restore_r16_through_r25_and_deallocframe_before_tailcall (retsize: 0;)
	return
	// succ:  __restore_r16_through_r27_and_deallocframe_before_tailcall_exit
__restore_r16_through_r27_and_deallocframe_before_tailcall_exit:


// __restore_r16_through_r25_and_deallocframe_before_tailcall
// Return size: 0
define __restore_r16_through_r25_and_deallocframe_before_tailcall
__restore_r16_through_r25_and_deallocframe_before_tailcall_entry:
	r29 = fp
	// succ:  l0000A320
l0000A320:
	r23_r22 = Mem0[r30 - 32<i32>:word64]
	r25_r24 = Mem0[r30 - 40<i32>:word64]
	// succ:  l0000A320_thunk___restore_r16_through_r21_and_deallocframe_before_tailcall
l0000A320_thunk___restore_r16_through_r21_and_deallocframe_before_tailcall:
	call __restore_r16_through_r21_and_deallocframe_before_tailcall (retsize: 0;)
	return
	// succ:  __restore_r16_through_r25_and_deallocframe_before_tailcall_exit
__restore_r16_through_r25_and_deallocframe_before_tailcall_exit:


// __restore_r16_through_r21_and_deallocframe_before_tailcall
// Return size: 0
define __restore_r16_through_r21_and_deallocframe_before_tailcall
__restore_r16_through_r21_and_deallocframe_before_tailcall_entry:
	r29 = fp
	// succ:  l0000A328
l0000A328:
	r19_r18 = Mem0[r30 - 16<i32>:word64]
	r21_r20 = Mem0[r30 - 24<i32>:word64]
	// succ:  l0000A328_thunk___restore_r16_through_r17_and_deallocframe_before_tailcall
l0000A328_thunk___restore_r16_through_r17_and_deallocframe_before_tailcall:
	call __restore_r16_through_r17_and_deallocframe_before_tailcall (retsize: 0;)
	return
	// succ:  __restore_r16_through_r21_and_deallocframe_before_tailcall_exit
__restore_r16_through_r21_and_deallocframe_before_tailcall_exit:


// __restore_r16_through_r17_and_deallocframe_before_tailcall
// Return size: 0
define __restore_r16_through_r17_and_deallocframe_before_tailcall
__restore_r16_through_r17_and_deallocframe_before_tailcall_entry:
	r29 = fp
	// succ:  l0000A330
l0000A330:
	v3 = r30
	r31 = Mem0[v3 + 4<i32>:word32]
	r30 = Mem0[v3:word32]
	r29 = v3 + 8<i32>
	r17_r16 = Mem0[r30 - 8<i32>:word64]
	return
	// succ:  __restore_r16_through_r17_and_deallocframe_before_tailcall_exit
__restore_r16_through_r17_and_deallocframe_before_tailcall_exit:


// __restore_r16_through_r23_and_deallocframe
// Return size: 0
define __restore_r16_through_r23_and_deallocframe
__restore_r16_through_r23_and_deallocframe_entry:
	r29 = fp
	// succ:  l0000A340
l0000A340:
	r21_r20 = Mem0[r30 - 24<i32>:word64]
	r23_r22 = Mem0[r30 - 32<i32>:word64]
	// succ:  l0000A340_thunk___restore_r16_through_r19_and_deallocframe
l0000A340_thunk___restore_r16_through_r19_and_deallocframe:
	call __restore_r16_through_r19_and_deallocframe (retsize: 0;)
	return
	// succ:  __restore_r16_through_r23_and_deallocframe_exit
__restore_r16_through_r23_and_deallocframe_exit:


// __restore_r16_through_r19_and_deallocframe
// Return size: 0
define __restore_r16_through_r19_and_deallocframe
__restore_r16_through_r19_and_deallocframe_entry:
	r29 = fp
	// succ:  l0000A348
l0000A348:
	r19_r18 = Mem0[r30 - 16<i32>:word64]
	// succ:  l0000A348_thunk___restore_r16_through_r17_and_deallocframe
l0000A348_thunk___restore_r16_through_r17_and_deallocframe:
	call __restore_r16_through_r17_and_deallocframe (retsize: 0;)
	return
	// succ:  __restore_r16_through_r19_and_deallocframe_exit
__restore_r16_through_r19_and_deallocframe_exit:


// __restore_r16_through_r27_and_deallocframe
// Return size: 0
define __restore_r16_through_r27_and_deallocframe
__restore_r16_through_r27_and_deallocframe_entry:
	r29 = fp
	// succ:  l0000A350
l0000A350:
	r27_r26 = Mem0[r30 - 48<i32>:word64]
	// succ:  l0000A350_thunk___restore_r16_through_r25_and_deallocframe
l0000A350_thunk___restore_r16_through_r25_and_deallocframe:
	call __restore_r16_through_r25_and_deallocframe (retsize: 0;)
	return
	// succ:  __restore_r16_through_r27_and_deallocframe_exit
__restore_r16_through_r27_and_deallocframe_exit:


// __restore_r16_through_r25_and_deallocframe
// Return size: 0
define __restore_r16_through_r25_and_deallocframe
__restore_r16_through_r25_and_deallocframe_entry:
	r29 = fp
	// succ:  l0000A354
l0000A354:
	r23_r22 = Mem0[r30 - 32<i32>:word64]
	r25_r24 = Mem0[r30 - 40<i32>:word64]
	// succ:  l0000A354_thunk___restore_r16_through_r21_and_deallocframe
l0000A354_thunk___restore_r16_through_r21_and_deallocframe:
	call __restore_r16_through_r21_and_deallocframe (retsize: 0;)
	return
	// succ:  __restore_r16_through_r25_and_deallocframe_exit
__restore_r16_through_r25_and_deallocframe_exit:


// __restore_r16_through_r21_and_deallocframe
// Return size: 0
define __restore_r16_through_r21_and_deallocframe
__restore_r16_through_r21_and_deallocframe_entry:
	r29 = fp
	// succ:  l0000A360
l0000A360:
	r19_r18 = Mem0[r30 - 16<i32>:word64]
	r21_r20 = Mem0[r30 - 24<i32>:word64]
	// succ:  l0000A360_thunk___restore_r16_through_r17_and_deallocframe
l0000A360_thunk___restore_r16_through_r17_and_deallocframe:
	call __restore_r16_through_r17_and_deallocframe (retsize: 0;)
	return
	// succ:  __restore_r16_through_r21_and_deallocframe_exit
__restore_r16_through_r21_and_deallocframe_exit:


// __restore_r16_through_r17_and_deallocframe
// Return size: 0
define __restore_r16_through_r17_and_deallocframe
__restore_r16_through_r17_and_deallocframe_entry:
	r29 = fp
	// succ:  l0000A368
l0000A368:
	v3 = r30
	r31 = Mem0[v3 + 4<i32>:word32]
	r30 = Mem0[v3:word32]
	r29 = v3 + 8<i32>
	return
	// succ:  __restore_r16_through_r17_and_deallocframe_exit
__restore_r16_through_r17_and_deallocframe_exit:


// __deallocframe
// Return size: 0
define __deallocframe
__deallocframe_entry:
	r29 = fp
	// succ:  l0000A370
l0000A370:
	v3 = r30
	r31 = Mem0[v3 + 4<i32>:word32]
	r30 = Mem0[v3:word32]
	r29 = v3 + 8<i32>
	return
	// succ:  __deallocframe_exit
__deallocframe_exit:


// __hexagon_memcpy_likely_aligned_min32bytes_mult8bytes
// Return size: 0
define __hexagon_memcpy_likely_aligned_min32bytes_mult8bytes
__hexagon_memcpy_likely_aligned_min32bytes_mult8bytes_entry:
	r29 = fp
	// succ:  l0000A380
l0000A380:
	r5_r4 = Mem0[r1:word64]
	r3 = 0xFFFFFFFD<32>
	p0 = bitsclr(r0, 7<32>)
	p0 = bitsclr(r1, 7<32>)
	Mem0[r0:word64] = r5_r4
	r0 = r0 + 8<i32>
	r5_r4 = Mem0[r1 + 8<i32>:word64]
	r3 = r3 + (r2 >>u 3<32>)
	branch p0 l0000A390_thunk_memcpy
	goto l0000A3A0
	// succ:  l0000A3A0 l0000A390_thunk_memcpy
l0000A390_thunk_memcpy:
	call memcpy (retsize: 0;)
	return
	// succ:  __hexagon_memcpy_likely_aligned_min32bytes_mult8bytes_exit
l0000A3A0:
	Mem0[r0:word64] = r5_r4
	r0 = r0 + 8<i32>
	r5_r4 = Mem0[r1 + 16<i32>:word64]
	r1 = r1 + 0x18<32>
	__nyi_loop0(0x0000A3B0<p32>, r3)
	Mem0[r0:word64] = r5_r4
	r0 = r0 + 8<i32>
	r1 = r1 + 8<i32>
	r5_r4 = Mem0[r1:word64]
	Mem0[r0:word64] = r5_r4
	return
	// succ:  __hexagon_memcpy_likely_aligned_min32bytes_mult8bytes_exit
__hexagon_memcpy_likely_aligned_min32bytes_mult8bytes_exit:


// __qdsp_divdi3
// Return size: 0
define __qdsp_divdi3
__qdsp_divdi3_entry:
	r29 = fp
	// succ:  l0000A3E0
l0000A3E0:
	p3 = tstbit(r3, 0x1F<32>)
	p2 = tstbit(r1, 0x1F<32>)
	r3_r2 = abs(r3_r2)
	r1_r0 = abs(r1_r0)
	r3_r2 = r1_r0
	r5_r4 = r3_r2
	r7 = cl0(r3_r2)
	r6 = cl0(r1_r0)
	r15_r14 = 1<64>
	r1_r0 = 0<64>
	r10 = r7 - r6
	p3 = p2 ^ p3
	r11 = r10 + 1<32>
	r15_r14 = r15_r14 << r10
	r13_r12 = r5_r4 << r10
	p0 = r5_r4 >u r3_r2
	__nyi_loop0(0x0000A428<p32>, r11)
	branch p0 l0000A444
	// succ:  l0000A428 l0000A444
l0000A428:
	p0 = r13_r12 >u r3_r2
	r9_r8 = r15_r14 + r1_r0
	r7_r6 = r3_r2 - r13_r12
	r3_r2 = vmux(p0, r3_r2, r7_r6)
	r1_r0 = vmux(p0, r1_r0, r9_r8)
	r13_r12 = r13_r12 >>u 1<32>
	r15_r14 = r15_r14 >>u 1<32>
	// succ:  l0000A444
l0000A444:
	r3_r2 = -r1_r0
	return
	// succ:  __qdsp_divdi3_exit
__qdsp_divdi3_exit:


// __hexagon_divsi3
// Return size: 0
define __hexagon_divsi3
__hexagon_divsi3_entry:
	r29 = fp
	// succ:  l0000A460
l0000A460:
	p1 = r1 > 0xFFFFFFFF<32>
	p0 = r0 > 0xFFFFFFFF<32>
	r2 = abs(r1)
	r1 = abs(r0)
	p2 = r2 >u r1
	r5 = r1 - r2
	r4 = cl0(r2)
	r3 = cl0(r1)
	p0 = r2 >u r5
	r0 = 0<32>
	return
	// succ:  __hexagon_divsi3_exit
__hexagon_divsi3_exit:


// __hexagon_udivdi3
// Return size: 0
define __hexagon_udivdi3
__hexagon_udivdi3_entry:
	r29 = fp
	// succ:  l0000A4E0
l0000A4E0:
	r3_r2 = r1_r0
	r5_r4 = r3_r2
	r7 = cl0(r3_r2)
	r6 = cl0(r1_r0)
	r15_r14 = 1<64>
	r1_r0 = 0<64>
	r10 = r7 - r6
	r11 = r10 + 1<32>
	r15_r14 = r15_r14 << r10
	r13_r12 = r5_r4 << r10
	p0 = r5_r4 >u r3_r2
	__nyi_loop0(0x0000A514<p32>, r11)
	return
	// succ:  __hexagon_udivdi3_exit
__hexagon_udivdi3_exit:


// fn0000A4E4
// Return size: 0
define fn0000A4E4
fn0000A4E4_entry:
	r29 = fp
	// succ:  l0000A4E4
l0000A4E4:
	r3_r2 = r1_r0
	r5_r4 = r3_r2
	r7 = cl0(r3_r2)
	r15_r14 = 1<64>
	r1_r0 = 0<64>
	r10 = r7 - r6
	r11 = r10 + 1<32>
	r15_r14 = r15_r14 << r10
	r13_r12 = r5_r4 << r10
	p0 = r5_r4 >u r3_r2
	__nyi_loop0(0x0000A514<p32>, r11)
	return
	// succ:  fn0000A4E4_exit
fn0000A4E4_exit:


// __qdsp_udivsi3
// Return size: 0
define __qdsp_udivsi3
__qdsp_udivsi3_entry:
	r29 = fp
	// succ:  l0000A540
l0000A540:
	p0 = r1 >u r0
	r5_r4 = 0x100000000<64>
	r3 = cl0(r1)
	r2 = cl0(r0)
	return
	// succ:  __qdsp_udivsi3_exit
__qdsp_udivsi3_exit:


// __qdsp_umoddi3
// Return size: 0
define __qdsp_umoddi3
__qdsp_umoddi3_entry:
	r29 = fp
	// succ:  l0000A590
l0000A590:
	r3_r2 = r1_r0
	r5_r4 = r3_r2
	r7 = cl0(r3_r2)
	r6 = cl0(r1_r0)
	r15_r14 = 1<64>
	r1_r0 = 0<64>
	r10 = r7 - r6
	r11 = r10 + 1<32>
	r15_r14 = r15_r14 << r10
	r13_r12 = r5_r4 << r10
	p0 = r5_r4 >u r3_r2
	__nyi_loop0(0x0000A5C4<p32>, r11)
	branch p0 l0000A5E0
	// succ:  l0000A5C4 l0000A5E0
l0000A5C4:
	p0 = r13_r12 >u r3_r2
	r9_r8 = r15_r14 + r1_r0
	r7_r6 = r3_r2 - r13_r12
	r3_r2 = vmux(p0, r3_r2, r7_r6)
	r1_r0 = vmux(p0, r1_r0, r9_r8)
	r13_r12 = r13_r12 >>u 1<32>
	r15_r14 = r15_r14 >>u 1<32>
	// succ:  l0000A5E0
l0000A5E0:
	return
	// succ:  __qdsp_umoddi3_exit
__qdsp_umoddi3_exit:


// __hexagon_adddf3
// Return size: 0
define __hexagon_adddf3
__hexagon_adddf3_entry:
	r29 = fp
	// succ:  l0000A600
l0000A600:
	r13_r12 = 0x2000000000000000<64>
	r5 = CONVERT(SLICE(r3, ui19, 11), ui19, uint32)
	r4 = CONVERT(SLICE(r1, ui19, 11), ui19, uint32)
	// succ:  l0000A600_thunk_fn0000A610
l0000A600_thunk_fn0000A610:
	call fn0000A610 (retsize: 0;)
	return
	// succ:  __hexagon_adddf3_exit
__hexagon_adddf3_exit:


// fn0000A610
// Return size: 0
define fn0000A610
fn0000A610_entry:
	r29 = fp
	// succ:  l0000A610
l0000A610:
	p2 = r5 >u r4
	r9_r8 = r13_r12
	p3 = dfclass(r3_r2, 2<32>)
	p3 = dfclass(r1_r0, 2<32>)
	r5_r4 = r4_r5
	r3_r2 = r1_r0
	r1_r0 = r3_r2
	branch p3 l0000A620_thunk_fn0000A764
	goto l0000A620_thunk_fn0000A630
	// succ:  l0000A620_thunk_fn0000A630 l0000A620_thunk_fn0000A764
l0000A610:
	p2 = r5 >u r4
	r9_r8 = r13_r12
	p3 = dfclass(r3_r2, 2<32>)
	p3 = dfclass(r1_r0, 2<32>)
	r5_r4 = r4_r5
	r3_r2 = r1_r0
	r1_r0 = r3_r2
	branch p3 l0000A764
	goto l0000A620_thunk_fn0000A630
	// succ:  l0000A620_thunk_fn0000A630 l0000A620_thunk_fn0000A764
l0000A620_thunk_fn0000A630:
	call fn0000A630 (retsize: 0;)
	return
	// succ:  fn0000A610_exit
l0000A620_thunk_fn0000A630:
	call fn0000A630 (retsize: 0;)
	return
	// succ:  fn0000A610_exit
l0000A620_thunk_fn0000A764:
	call fn0000A764 (retsize: 0;)
	return
	// succ:  fn0000A610_exit
l0000A620_thunk_fn0000A764:
	call fn0000A764 (retsize: 0;)
	return
	// succ:  fn0000A610_exit
fn0000A610_exit:


// fn0000A630
// Return size: 0
define fn0000A630
fn0000A630_entry:
	r29 = fp
	// succ:  l0000A630
l0000A630:
	r7_r6 = 0x3E00000001<64>
	r15 = r4 - r5
	r9_r8 = insert(r2, 0x34<32>, 0xC<32>)
	r13_r12 = insert(r0, 0x34<32>, 0xC<32>)
	r14 = 0<32>
	p2 = r1 > 0xFFFFFFFF<32>
	r11_r10 = -r13_r12
	r15 = min(r7, r15)
	// succ:  l0000A640_thunk_fn0000A764
l0000A640_thunk_fn0000A764:
	call fn0000A764 (retsize: 0;)
	return
	// succ:  fn0000A630_exit
fn0000A630_exit:


// __hexagon_fast2_subdf3
// Return size: 0
define __hexagon_fast2_subdf3
__hexagon_fast2_subdf3_entry:
	r29 = fp
	goto l0000A6A4
	// succ:  l0000A6A4
l0000A604:
	r13_r12 = 0x2000000000000000<64>
	r5 = CONVERT(SLICE(r3, ui19, 11), ui19, uint32)
	// succ:  l0000A604_thunk_fn0000A610
l0000A604_thunk_fn0000A610:
	call fn0000A610 (retsize: 0;)
	return
	// succ:  __hexagon_fast2_subdf3_exit
l0000A6A4:
	goto l0000A604
	// succ:  l0000A604
__hexagon_fast2_subdf3_exit:


// fn0000A764
// Return size: 0
define fn0000A764
fn0000A764_entry:
	r29 = fp
	goto l0000A764
	// succ:  l0000A764
l0000A644:
	r15_r14 = 0<64>
	r13_r12 = r11_r10
	r9_r8 = r9_r8 >> r15
	r11_r10 = r9_r8 << r14 & (1<u64> << r15) - 1<64>
	p3 = r3 > 0xFFFFFFFF<32>
	r5 = r4 + 0xFFFFFBC4<32>
	r8 = r8 | r6
	p1 = r11_r10 == r15_r14
	r7_r6 = 0x7F60000003D<64>
	r11_r10 = r13_r12 - r9_r8
	r13_r12 = r9_r8 + r13_r12
	r13_r12 = r11_r10
	branch p0 l0000A6D4
	// succ:  l0000A68C l0000A6D4
l0000A68C:
	p0 = r4 >u r7
	p0 = !(r4 >u r6)
	p0 = r12 == 0<32>
	p0 = r13 == 0<32>
	branch p0 l0000A6B4
	// succ:  l0000A69C l0000A6B4
l0000A69C:
	r1_r0 = CONVERT(r13_r12, int64, real64)
	return
	// succ:  fn0000A764_exit
l0000A6B4:
	r1_r0 = 0<64>
	r3 = 1<32>
	r3 = r3 << 0x1F<32>
	r28 = CONVERT(SLICE(r28, ui18, 2), ui18, uint32)
	r1 = r1 ^ r3
	return
	// succ:  fn0000A764_exit
l0000A6D4:
	p0 = r12 == 0<32>
	p0 = r13 == 0<32>
	branch p0 l0000A6B4
	// succ:  l0000A6E0 l0000A6B4
l0000A6E0:
	r1 = r1 + (r5 << 0x14<32>)
	r28 = CONVERT(SLICE(r1, ui19, 11), ui19, uint32)
	r3_r2 = 0x10000000000000<64>
	r5 = r5 + r28
	branch p0 l0000A728
	// succ:  l0000A700 l0000A728
l0000A700:
	p0 = r5 > 0x7FE<32>
	r28 = 1<32> - r5
	return
	// succ:  fn0000A764_exit
l0000A728:
	r13_r12 = 0x7FEFFFFFFFFFFFFF<64>
	r9_r8 = 0x7FF0000000000000<64>
	r28 = r28 | 0x28<32>
	r5 = CONVERT(SLICE(r28, ui18, 2), ui18, uint32)
	r28 = r5
	r5 = r5 ^ r1 >>u 0x1F<32>
	USR = r28
	r13_r12 = r9_r8
	p0 = !(r5 == 2<32>)
	p0 = !(r28 == 1<32>)
	r1_r0 = insert(r12, 0x3F<32>, 7<32>)
	return
	// succ:  fn0000A764_exit
l0000A764:
	r9_r8 = CONVERT(SLICE(r3_r2, ui7, 63), ui7, uint64)
	r13_r12 = CONVERT(SLICE(r1_r0, ui7, 63), ui7, uint64)
	r3_r2 = r1_r0
	r1_r0 = r3_r2
	p3 = r13_r12 >u r9_r8
	r9_r8 = r13_r12
	r13_r12 = r9_r8
	branch p0 l0000A81C
	// succ:  l0000A788 l0000A81C
l0000A788:
	p0 = dfclass(r1_r0, 0xF<32>)
	branch p1 l0000A860
	// succ:  l0000A790 l0000A860
l0000A790:
	p1 = dfclass(r1_r0, 8<32>)
	r13_r12 = 0<64>
	branch p2 l0000A834
	// succ:  l0000A79C l0000A834
l0000A79C:
	p2 = dfclass(r3_r2, 1<32>)
	r13_r12 = 0x2000000000000000<64>
	branch p0 l0000A7CC
	// succ:  l0000A7AC l0000A7CC
l0000A7AC:
	p0 = dfclass(r1_r0, 4<32>)
	r5 = 1<32>
	r9_r8 = r9_r8 << 9<32>
	r4 = CONVERT(SLICE(r1, ui19, 11), ui19, uint32)
	r7_r6 = 0x3E00000001<64>
	r15 = r4 - r5
	goto l0000A644
	// succ:  l0000A644
l0000A7CC:
	r9_r8 = CONVERT(SLICE(r3_r2, ui7, 63), ui7, uint64)
	p1 = r3 > 0xFFFFFFFF<32>
	p0 = r1 > 0xFFFFFFFF<32>
	r9_r8 = -r9_r8
	r13_r12 = -r13_r12
	r9_r8 = r3_r2
	r13_r12 = r1_r0
	r13_r12 = r9_r8 + r13_r12
	r3_r2 = 0<64>
	p0 = r13 > 0xFFFFFFFF<32>
	r9_r8 = -r13_r12
	r3 = 0x80000000<32>
	r1_r0 = r13_r12
	r1_r0 = r9_r8
	r1 = r1 | r3
	branch p0 l0000A83C
	// succ:  l0000A814 l0000A83C
l0000A814:
	p0 = r1_r0 == r3_r2
	return
	// succ:  fn0000A764_exit
l0000A81C:
	r3_r2 = r1_r0
	p0 = dfclass(r3_r2, 0xF<32>)
	r1_r0 = 0xFFFFFFFFFFFFFFFF<64>
	return
	// succ:  fn0000A764_exit
l0000A834:
	return
	// succ:  fn0000A764_exit
l0000A83C:
	return
	// succ:  fn0000A764_exit
l0000A860:
	p0 = !(r1 == r3)
	return
	// succ:  fn0000A764_exit
fn0000A764_exit:


// __hexagon_divdf3
// Return size: 0
define __hexagon_divdf3
__hexagon_divdf3_entry:
	r29 = fp
	// succ:  l0000A880
l0000A880:
	r15_r14 = 0x4000000000000000<64>
	p3 = dfclass(r3_r2, 2<32>)
	p3 = dfclass(r1_r0, 2<32>)
	r7_r6 = 0<64>
	r13_r12 = r15_r14
	r15_r14 = insert(r0, 0x34<32>, 0xC<32>)
	branch p3 l0000AA18
	// succ:  l0000A8A0 l0000AA18
l0000A8A0:
	r11_r10 = 1<64>
	r5 = CONVERT(SLICE(r3, ui19, 11), ui19, uint32)
	r4 = CONVERT(SLICE(r1, ui19, 11), ui19, uint32)
	r4 = r4 - r5
	r9_r8 = r15_r14
	r13_r12 = insert(r2, 0x34<32>, 0xC<32>)
	__nyi_loop0(0x0000A8BC<p32>, 0x18<32>)
	r15_r14 = r9_r8 - r13_r12
	r9_r8 = r15_r14
	p0 = r15 > 0xFFFFFFFF<32>
	r9_r8 = r9_r8 << 1<32>
	r7_r6 = r7_r6 + r7_r6 + p0
	r8 = 0x3FE<32>
	r9 = 0xFFFFFC02<32>
	r6 = r6 | r10
	p1 = r11_r10 >u r9_r8
	p0 = !(r4 > r8)
	p0 = r4 > r9
	r28 = r1 ^ r3
	r15_r14 = -r7_r6
	r15_r14 = r7_r6
	p1 = r28 > 0xFFFFFFFF<32>
	branch p0 l0000A914
	// succ:  l0000A8FC l0000A914
l0000A8FC:
	r4 = r4 + 0xFFFFFFC9<32>
	r1_r0 = CONVERT(r15_r14, int64, real64)
	return
	// succ:  __hexagon_divdf3_exit
l0000A914:
	r4 = r4 + 0xFFFFFFC9<32>
	r1_r0 = CONVERT(r15_r14, int64, real64)
	r5 = CONVERT(SLICE(r1, ui19, 11), ui19, uint32)
	r1 = r1 + (r4 << 0x14<32>)
	r13_r12 = abs(r15_r14)
	r4 = r4 + r5
	branch p0 l0000A9DC
	// succ:  l0000A938 l0000A9DC
l0000A938:
	p0 = r4 > 0x7FE<32>
	r28 = 0x3F<32>
	branch p0 l0000A99C
	// succ:  l0000A940 l0000A99C
l0000A940:
	p0 = r4 > 0<32>
	p3 = r15 > 0xFFFFFFFF<32>
	r4 = 3<32> - r4
	r5 = clb(r12) + 0xFFFFFFF4<32>
	r7 = USR
	r6 = 0x30<32>
	r4 = 0<32>
	r5 = min(r28, r4)
	r13_r12 = r13_r12 << r5
	r13_r12 = r13_r12 >> r5
	r9_r8 = r13_r12 << r4 & (1<u64> << r5) - 1<64>
	r12 = r12 | r10
	r13 = setbit(r13, 0xE<32>)
	p0 = r11_r10 >u r9_r8
	r7 = r7 | r6
	p1 = bitsclr(r12, 7<32>)
	r15_r14 = -r13_r12
	r28 = 0xFFFFFBCA<32>
	r3_r2 = 0<64>
	r15_r14 = r13_r12
	USR = r7
	p0 = isunordered(r3_r2, r3_r2)
	r1_r0 = CONVERT(r15_r14, int64, real64)
	return
	// succ:  __hexagon_divdf3_exit
l0000A99C:
	r15_r14 = abs(r15_r14)
	r28 = 0x7FEFFFFF<32>
	r28 = 0x7FFF<32>
	p0 = r0 == 0<32>
	return
	// succ:  __hexagon_divdf3_exit
l0000A9DC:
	r1_r0 = r15_r14
	r15_r14 = 0x3FFFFFFFFF<64>
	r28 = r28 | 0x28<32>
	r7 = CONVERT(SLICE(r28, ui18, 2), ui18, uint32)
	r13_r12 = 0x7FF0000000000000<64>
	r6 = r7
	r7 = r7 ^ r1 >>u 0x1F<32>
	USR = r28
	r15_r14 = r13_r12
	p0 = !(r7 == 2<32>)
	p0 = r15_r14 == r15_r14
	p0 = !(r6 == 1<32>)
	return
	// succ:  __hexagon_divdf3_exit
l0000AA18:
	p0 = dfclass(r3_r2, 0xF<32>)
	p0 = dfclass(r1_r0, 0xF<32>)
	p1 = dfclass(r3_r2, 8<32>)
	p1 = dfclass(r1_r0, 8<32>)
	p2 = dfclass(r3_r2, 1<32>)
	p2 = dfclass(r1_r0, 1<32>)
	branch p1 l0000AB14
	// succ:  l0000AA38 l0000AB14 l0000AAF0
l0000AA38:
	branch p0 l0000AAF0
l0000AAF0:
	r3_r2 = r1_r0
	r1_r0 = r3_r2
	p1 = dfclass(r3_r2, 0x10<32>)
	p0 = dfclass(r1_r0, 0x10<32>)
	r14 = CONVERT(r3_r2, real64, real32)
	r15 = CONVERT(r1_r0, real64, real32)
	return
	// succ:  __hexagon_divdf3_exit
l0000AB14:
	r28 = 1<32>
	return
	// succ:  __hexagon_divdf3_exit
__hexagon_divdf3_exit:


// __hexagon_fast_muldf3
// Return size: 0
define __hexagon_fast_muldf3
__hexagon_fast_muldf3_entry:
	r29 = fp
	// succ:  l0000AB20
l0000AB20:
	r13_r12 = 0x4000000000000000<64>
	p0 = dfclass(r3_r2, 2<32>)
	p0 = dfclass(r1_r0, 2<32>)
	r9_r8 = 1<64>
	r28 = 0xFFFFFC00<32>
	r5_r4 = r3_r2 << 0xA<32>
	r13_r12 = insert(r0, 0x34<32>, 0xC<32>)
	r5_r4 = insert(r8, 2<32>, 0x3A<32>)
	r7_r6 = r4 *u64 r13
	r15_r14 = r12 *u64 r4
	r5_r4 = 0x7FC00000000<64>
	r11_r10 = r13 *u64 r5
	r7_r6 = r7_r6 + (r15_r14 >>u 0x20<32>)
	p1 = r6 == 0<32>
	p1 = r14 == 0<32>
	branch p0 l0000ACC8
	// succ:  l0000AB70 l0000ACC8
l0000AB70:
	r11_r10 = r11_r10 + (r7_r6 >>u 0x20<32>)
	r10 = r10 | r8
	r7 = CONVERT(SLICE(r3, ui19, 11), ui19, uint32)
	r6 = CONVERT(SLICE(r1, ui19, 11), ui19, uint32)
	r28 = r1 ^ r3
	r6 = r6 + (r28 + r7)
	r15_r14 = -r11_r10
	p0 = !(r6 > r5)
	p2 = r28 > 0xFFFFFFFF<32>
	branch p0 l0000ABE4
	// succ:  l0000AB98 l0000ABE4
l0000AB98:
	p0 = r6 > -1<i32>
	r11_r10 = r15_r14
	r6 = r6 + 0xFFFFFBC6<32>
	r1_r0 = CONVERT(r11_r10, int64, real64)
	return
	// succ:  __hexagon_fast_muldf3_exit
l0000ABB0:
	r5 = 0x7FFF<32>
	p0 = r0 == 0<32>
	return
	// succ:  __hexagon_fast_muldf3_exit
l0000ABE4:
	r7 = r6 + 0xFFFFFBC6<32>
	r13_r12 = abs(r11_r10)
	r4 = 0x7FEFFFFF<32>
	r7 = CONVERT(SLICE(r1, ui19, 11), ui19, uint32)
	r1 = r1 + (r7 << 0x14<32>)
	r5 = 0<32>
	r7 = r7 + (r6 + 0xFFFFFBC6<32>)
	branch p0 l0000AC88
	// succ:  l0000AC14 l0000AC88
l0000AC14:
	p0 = r7 > 0x7FE<32>
	r28 = 0x3F<32>
	r5 = r6 - r5
	branch p0 l0000ABB0
	// succ:  l0000AC20 l0000ABB0
l0000AC20:
	p0 = r23 > 1<32>
	r5 = 5<32> - r5
	r4 = 0<32>
	r11_r10 = r13_r12
	r5 = min(r28, r5)
	p3 = r11 > 0xFFFFFFFF<32>
	r15_r14 = r11_r10 << r4 & (1<u64> << r5) - 1<64>
	r28 = USR
	r4 = 0x30<32>
	r1 = insert(0xB<32>, 0x13<32>)
	r11_r10 = r11_r10 >> r5
	r10 = r10 | r8
	r11 = setbit(r11, 0xE<32>)
	p0 = r9_r8 >u r15_r14
	r28 = r4 | r28
	p1 = bitsclr(r10, 7<32>)
	r15_r14 = -r11_r10
	r11_r10 = r15_r14
	USR = r28
	p0 = r1_r0 == r1_r0
	r1_r0 = CONVERT(r11_r10, int64, real64)
	return
	// succ:  __hexagon_fast_muldf3_exit
l0000AC88:
	r1_r0 = r11_r10
	r13_r12 = 0x3FFFFFFFFF<64>
	r5_r4 = 0x7FF0000000000000<64>
	r28 = r28 | 0x28<32>
	r14 = CONVERT(SLICE(r28, ui18, 2), ui18, uint32)
	r28 = r14
	r14 = r14 ^ r1 >>u 0x1F<32>
	USR = r28
	r13_r12 = r5_r4
	p0 = !(r14 == 2<32>)
	p0 = r1_r0 == r1_r0
	p0 = !(r28 == 1<32>)
	return
	// succ:  __hexagon_fast_muldf3_exit
l0000ACC8:
	r5_r4 = CONVERT(SLICE(r3_r2, ui7, 63), ui7, uint64)
	r3_r2 = r1_r0
	r1_r0 = r3_r2
	p3 = r13_r12 >u r5_r4
	r5_r4 = r13_r12
	r13_r12 = r5_r4
	branch p0 l0000AD78
	// succ:  l0000ACE8 l0000AD78
l0000ACE8:
	p0 = dfclass(r1_r0, 0xF<32>)
	p1 = dfclass(r3_r2, 0xE<32>)
	p1 = dfclass(r1_r0, 8<32>)
	p0 = dfclass(r3_r2, 1<32>)
	p0 = dfclass(r1_r0, 8<32>)
	p2 = dfclass(r3_r2, 1<32>)
	branch p1 l0000AD98
	// succ:  l0000AD00 l0000AD98
l0000AD00:
	r28 = 0x7C000000<32>
	branch p2 l0000AD94
	// succ:  l0000AD10 l0000AD94 l0000AD5C
l0000AD10:
	branch p0 l0000AD5C
l0000AD5C:
	r28 = USR
	r28 = r28 | 2<32>
	r1_r0 = 0xFFFFFFFFFFFFFFFF<64>
	USR = r28
	return
	// succ:  __hexagon_fast_muldf3_exit
l0000AD78:
	r3_r2 = r1_r0
	r28 = CONVERT(r1_r0, real64, real32)
	r1_r0 = 0xFFFFFFFFFFFFFFFF<64>
	return
	// succ:  __hexagon_fast_muldf3_exit
l0000AD94:
	r3_r2 = r1_r0
	// succ:  l0000AD98
l0000AD98:
	r3 = CONVERT(SLICE(r3, ui25, 1), ui25, int32)
	return
	// succ:  __hexagon_fast_muldf3_exit
__hexagon_fast_muldf3_exit:


// fn0000ADC0
// Return size: 0
define fn0000ADC0
fn0000ADC0_entry:
	r29 = fp
	// succ:  l0000ADC0
l0000ADC0:
	r15_r14 = 0x1000000000000000<64>
	branch p3 l0000AE50
	// succ:  l0000ADD0 l0000AE50
l0000ADD0:
	p3 = dfclass(r1_r0, 2<32>)
	r7_r6 = r15_r14
	r4 = CONVERT(SLICE(r1, ui19, 11), ui19, uint32)
	r15_r14 = insert(r0, 0x34<32>, 0xC<32>)
	// succ:  l0000ADE0
l0000ADE0:
	r28 = 0x3FF<32>
	r4 = vavgh(r28, r4)
	r13_r12 = r15_r14 << 1<32>
	p0 = tstbit(r4, 0<32>)
	r3_r2 = r7_r6 >>u 1<32>
	r9_r8 = vmux(p0, r15_r14, r13_r12)
	r28 = 1<32>
	r9_r8 = r9_r8 - r7_r6
	r11_r10 = r3_r2
	r9_r8 = r9_r8 << 1<32>
	r3_r2 = r3_r2 + (r7_r6 << 1<32>)
	r13_r12 = r9_r8
	r3_r2 = r11_r10
	r11_r10 = r7_r6 | r11_r10
	r9_r8 = r9_r8 - r3_r2
	r7_r6 = r11_r10
	r9_r8 = r13_r12
	r3_r2 = r3_r2 >>u 1<32>
	p0 = r9 > 0xFFFFFFFF<32>
	r6 = r6 | r28
	p0 = r8 == 0<32>
	p0 = r9 == 0<32>
	r4 = r4 + 0xFFFFFBC5<32>
	r1_r0 = CONVERT(r7_r6, int64, real64)
	return
	// succ:  fn0000ADC0_exit
l0000AE50:
	branch p0 l0000AE88
	// succ:  l0000AE54 l0000AE88
l0000AE54:
	branch p0 l0000AE94
	// succ:  l0000AE5C l0000AE94
l0000AE5C:
	p0 = dfclass(r1_r0, 1<32>)
	branch p0 l0000AE94
	// succ:  l0000AE60 l0000AE94
l0000AE60:
	p0 = tstbit(r1, 0<32>)
	branch p0 l0000AE94
	// succ:  l0000AE68 l0000AE94
l0000AE68:
	p0 = dfclass(r1_r0, 8<32>)
	r7_r6 = 0x1000000000000000<64>
	r4 = clb(r0) + 0xFFFFFFEA<32>
	r5 = r4 + 8<32>
	r4 = 1<32> - r4
	goto l0000ADE0
	// succ:  l0000ADE0
l0000AE88:
	r1_r0 = 0xFFFFFFFFFFFFFFFF<64>
	return
	// succ:  fn0000ADC0_exit
l0000AE94:
	r4 = 0x7F800001<32>
	return
	// succ:  fn0000ADC0_exit
fn0000ADC0_exit:


// _exit
// Return size: 0
define _exit
_exit_entry:
	r29 = fp
	// succ:  l0000AEB0
l0000AEB0:
	v3 = r29 - 8<i32>
	Mem0[v3:word32] = r30
	Mem0[v3 + 4<i32>:word32] = r31
	r30 = v3
	r29 = v3 - 8<i32>
	r1 = Mem0[gp + 224<i32>:word32]
	r3 = r0
	Mem0[r29 + 4<i32>:word32] = r3
	r4 = r29 + 4<32>
	branch p0 l0000AEE4
	// succ:  l0000AECC l0000AEE4
l0000AECC:
	p0 = r1 == 0<32>
	r0 = 0x18<32>
	r1 = r4
	r2 = r3
	trap0(0<32>)
	r3 = r0
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  _exit_exit
l0000AEE4:
	call thread_stop (retsize: 0;)
	r3 = 0<32>
	v14 = r30
	r31 = Mem0[v14 + 4<i32>:word32]
	r30 = Mem0[v14:word32]
	r29 = v14 + 8<i32>
	return
	// succ:  _exit_exit
_exit_exit:


// lockMutex
// Return size: 0
define lockMutex
lockMutex_entry:
	r29 = fp
	// succ:  l0000AEF0
l0000AEF0:
	r2 = memw_locked(r0)
	r1 = CONVERT(SLICE(r2, int16, 0), int16, int32)
	r3 = r2 >> 0x10<32>
	r4 = htid
	r2 = r2 + 1<32>
	r4 = r4 << 0x10<32>
	p1 = r3 == r4
	branch p1 l0000AF20
	// succ:  l0000AF0C_thunk_fn0000AF10 l0000AF0C_thunk_fn0000AF20
l0000AF0C_thunk_fn0000AF10:
	call fn0000AF10 (retsize: 0;)
	return
	// succ:  lockMutex_exit
l0000AF0C_thunk_fn0000AF20:
	call fn0000AF20 (retsize: 0;)
	return
	// succ:  lockMutex_exit
lockMutex_exit:


// fn0000AEF4
// Return size: 0
define fn0000AEF4
fn0000AEF4_entry:
	r29 = fp
	// succ:  l0000AEF4
l0000AEF4:
	r1 = CONVERT(SLICE(r2, int16, 0), int16, int32)
	r3 = r2 >> 0x10<32>
	r4 = htid
	r2 = r2 + 1<32>
	r4 = r4 << 0x10<32>
	p1 = r3 == r4
	branch p1 l0000AF0C_thunk_fn0000AF20
	// succ:  l0000AF0C_thunk_fn0000AF10 l0000AF0C_thunk_fn0000AF20
l0000AF0C_thunk_fn0000AF10:
	call fn0000AF10 (retsize: 0;)
	return
	// succ:  fn0000AEF4_exit
l0000AF0C_thunk_fn0000AF20:
	call fn0000AF20 (retsize: 0;)
	return
	// succ:  fn0000AEF4_exit
fn0000AEF4_exit:


// fn0000AF10
// Return size: 0
define fn0000AF10
fn0000AF10_entry:
	r29 = fp
	// succ:  l0000AF10
l0000AF10:
	r2 = r4 + 1<32>
	p1 = r1 == 0<32>
	branch p1 l0000AF20
	goto l0000AF1C
	// succ:  l0000AF1C l0000AF18_thunk_fn0000AF20
l0000AF18_thunk_fn0000AF20:
	call fn0000AF20 (retsize: 0;)
	return
	// succ:  fn0000AF10_exit
l0000AF1C:
	// succ:  l0000AF1C_thunk_lockMutex
l0000AF1C_thunk_lockMutex:
	call lockMutex (retsize: 0;)
	return
	// succ:  fn0000AF10_exit
fn0000AF10_exit:


// fn0000AF20
// Return size: 0
define fn0000AF20
fn0000AF20_entry:
	r29 = fp
	// succ:  l0000AF20
l0000AF20:
	memw_locked(r0, p0, r2)
	branch p0 l0000AEF0
	goto l0000AF28
	// succ:  l0000AF28 l0000AF24_thunk_lockMutex
l0000AF24_thunk_lockMutex:
	call lockMutex (retsize: 0;)
	return
	// succ:  fn0000AF20_exit
l0000AF28:
	return
	// succ:  fn0000AF20_exit
fn0000AF20_exit:


// __sys_Mtxunlock
// Return size: 0
define __sys_Mtxunlock
__sys_Mtxunlock_entry:
	r29 = fp
	// succ:  l0000AF30
l0000AF30:
	r1 = memw_locked(r0)
	// succ:  l0000AF30_thunk_fn0000AF34
l0000AF30_thunk_fn0000AF34:
	call fn0000AF34 (retsize: 0;)
	return
	// succ:  __sys_Mtxunlock_exit
__sys_Mtxunlock_exit:


// fn0000AF34
// Return size: 0
define fn0000AF34
fn0000AF34_entry:
	r29 = fp
	// succ:  l0000AF34
l0000AF34:
	r3 = 1<32>
	r5 = CONVERT(SLICE(r1, ui19, 3), ui19, uint32)
	r4 = htid
	r3 = vsubh(r1, r3)
	p1 = r5 == r4
	return
	// succ:  fn0000AF34_exit
fn0000AF34_exit:


// __sys_Mtxinit
// Return size: 0
define __sys_Mtxinit
__sys_Mtxinit_entry:
	r29 = fp
	// succ:  l0000AF60
l0000AF60:
	r1 = 0<32>
	Mem0[r0:word32] = r1
	return
	// succ:  __sys_Mtxinit_exit
__sys_Mtxinit_exit:


// __sys_Mtxdst
// Return size: 0
define __sys_Mtxdst
__sys_Mtxdst_entry:
	r29 = fp
	// succ:  l0000AF70
l0000AF70:
	return
	// succ:  __sys_Mtxdst_exit
__sys_Mtxdst_exit:


// __trylockMutex
// Return size: 0
define __trylockMutex
__trylockMutex_entry:
	r29 = fp
	// succ:  l0000AF80
l0000AF80:
	r4 = htid
	// succ:  l0000AF84
l0000AF84:
	r2 = memw_locked(r0)
	r3 = r2 >> 0x10<32>
	p1 = r3 == r4
	r2 = r2 + 1<32>
	branch p1 l0000AFB4
	// succ:  l0000AF98 l0000AFB4
l0000AF98:
	r3 = CONVERT(SLICE(r2, int16, 0), int16, int32)
	p1 = r3 == 0<32>
	r5 = r4 << 0x10<32>
	r2 = r5 + 0<32>
	r2 = r2 + 1<32>
	branch p1 l0000AFB4
	// succ:  l0000AFB0 l0000AFB4
l0000AFB0:
	return
	// succ:  __trylockMutex_exit
l0000AFB4:
	memw_locked(r0, p0, r2)
	branch p0 l0000AF84
	// succ:  l0000AFBC l0000AF84
l0000AFBC:
	return
	// succ:  __trylockMutex_exit
__trylockMutex_exit:


// __sys_close
// Return size: 0
define __sys_close
__sys_close_entry:
	r29 = fp
	// succ:  l0000AFC0
l0000AFC0:
	v3 = r29 - 8<i32>
	Mem0[v3:word32] = r30
	Mem0[v3 + 4<i32>:word32] = r31
	r30 = v3
	r29 = v3 - 16<i32>
	r1 = Mem0[gp + 224<i32>:word32]
	Mem0[r29 + 4<i32>:word32] = r0
	Mem0[r29 + 8<i32>:word64] = r17_r16
	branch p0 l0000B004
	// succ:  l0000AFD4 l0000B004
l0000AFD4:
	p0 = r1 == 0<32>
	r16 = r29 + 4<32>
	r1 = 4<32>
	r0 = r29 + 4<32>
	call hexagon_cache_cleaninv (retsize: 0;)
	r0 = 2<32>
	r1 = r16
	trap0(0<32>)
	r2 = r0
	r16 = r1
	branch p0 l0000B010
	// succ:  l0000AFF8 l0000B010
l0000AFF8:
	p0 = r2 == -1<i32>
	call _Geterrno (retsize: 0;)
	Mem0[r0:word32] = r16
	r2 = -1<i32>
	goto l0000B010
	// succ:  l0000B010
l0000B004:
	call _Geterrno (retsize: 0;)
	Mem0[r0:word32] = 0x59<32>
	r2 = 0xFFFFFFFF<32>
	// succ:  l0000B010
l0000B010:
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  __sys_close_exit
__sys_close_exit:


// __sys_remove
// Return size: 0
define __sys_remove
__sys_remove_entry:
	r29 = fp
	// succ:  l0000B020
l0000B020:
	v3 = r29 - 8<i32>
	Mem0[v3:word32] = r30
	Mem0[v3 + 4<i32>:word32] = r31
	r30 = v3
	r29 = v3 - 16<i32>
	r1 = Mem0[gp + 224<i32>:word32]
	Mem0[r29 + 8<i32>:word64] = r17_r16
	r16 = r0
	branch p0 l0000B084
	// succ:  l0000B034 l0000B084
l0000B034:
	p0 = r1 == 0<32>
	Mem0[r29:word32] = r16
	r0 = r16
	r17 = r29 + 0<32>
	call strlen (retsize: 0;)
	r0 = r16
	r1 = r0
	r2 = setbit(r17, 4<32>)
	Mem0[r2:word32] = r1
	call strlen (retsize: 0;)
	r1 = r0
	r0 = r16
	call hexagon_cache_cleaninv (retsize: 0;)
	r0 = r29 + 0<32>
	r1 = 8<32>
	call hexagon_cache_cleaninv (retsize: 0;)
	r0 = 0xE<32>
	r1 = r17
	trap0(0<32>)
	r2 = r0
	r16 = r1
	branch p0 l0000B090
	// succ:  l0000B078 l0000B090
l0000B078:
	p0 = r2 == -1<i32>
	call _Geterrno (retsize: 0;)
	Mem0[r0:word32] = r16
	r2 = -1<i32>
	goto l0000B090
	// succ:  l0000B090
l0000B084:
	call _Geterrno (retsize: 0;)
	Mem0[r0:word32] = 0x59<32>
	r2 = 0xFFFFFFFF<32>
	// succ:  l0000B090
l0000B090:
	v14 = r30
	r31 = Mem0[v14 + 4<i32>:word32]
	r30 = Mem0[v14:word32]
	r29 = v14 + 8<i32>
	return
	// succ:  __sys_remove_exit
__sys_remove_exit:


// __sys_sbrk
// Return size: 0
define __sys_sbrk
__sys_sbrk_entry:
	r29 = fp
	// succ:  l0000B0A0
l0000B0A0:
	v3 = r29 - 8<i32>
	Mem0[v3:word32] = r30
	Mem0[v3 + 4<i32>:word32] = r31
	r30 = v3
	r29 = v3 - 8<i32>
	Mem0[r29 + 496<i32>:word64] = r17_r16
	r17 = r0
	r0 = 0x1006C<32>
	call lockMutex (retsize: 0;)
	r1 = 0xE018<32>
	r2 = Mem0[r1:word32]
	r3 = 0<32>
	r16 = r3 + 0<32>
	r16 = r2 + 0<32>
	p0 = !(r2 == 0<32>)
	Mem0[r0:word32] = r16
	branch p0 l0000B118
	// succ:  l0000B0E4 l0000B118
l0000B0E4:
	p0 = r9 == 0<32>
	r2 = Mem0[r1:word32]
	r3 = r17
	r3 = r3 + (r16 + 7<32>)
	r1 = r3 & 0xFFFFFFF8<32>
	branch r2 == 0<32> l0000B10C
	// succ:  l0000B104 l0000B10C
l0000B104:
	r2 = Mem0[gp + 112<i32>:word32]
	Mem0[r16:word32] = r17
	Mem0[r0:word32] = r1
	goto l0000B118
	// succ:  l0000B118
l0000B10C:
	r16 = 0xFFFFFFFF<32>
	call _Geterrno (retsize: 0;)
	Mem0[r0:word32] = 0xC<32>
	// succ:  l0000B118
l0000B118:
	r0 = 0x1006C<32>
	call __sys_Mtxunlock (retsize: 0;)
	v16 = r30
	r31 = Mem0[v16 + 4<i32>:word32]
	r30 = Mem0[v16:word32]
	r29 = v16 + 8<i32>
	return
	// succ:  __sys_sbrk_exit
__sys_sbrk_exit:


// BeforeBegin
// Return size: 0
define BeforeBegin
BeforeBegin_entry:
	r29 = fp
	// succ:  l0000B130
l0000B130:
	r0 = 0x10070<32>
	// succ:  l0000B130_thunk___sys_Mtxinit
l0000B130_thunk___sys_Mtxinit:
	call __sys_Mtxinit (retsize: 0;)
	return
	// succ:  BeforeBegin_exit
BeforeBegin_exit:


// AtEnd
// Return size: 0
define AtEnd
AtEnd_entry:
	r29 = fp
	// succ:  l0000B140
l0000B140:
	r0 = 0x10070<32>
	// succ:  l0000B140_thunk___sys_Mtxdst
l0000B140_thunk___sys_Mtxdst:
	call __sys_Mtxdst (retsize: 0;)
	return
	// succ:  AtEnd_exit
AtEnd_exit:


// sys_Tlsalloc
// Return size: 0
define sys_Tlsalloc
sys_Tlsalloc_entry:
	r29 = fp
	// succ:  l0000B150
l0000B150:
	v3 = r29 - 8<i32>
	Mem0[v3:word32] = r30
	Mem0[v3 + 4<i32>:word32] = r31
	r30 = v3
	r29 = v3 - 8<i32>
	Mem0[r29 + 496<i32>:word64] = r17_r16
	branch p0 l0000B1C4
	// succ:  l0000B15C l0000B1C4
l0000B15C:
	p0 = r8 == 0<32>
	r0 = 0x10070<32>
	call lockMutex (retsize: 0;)
	r1 = 0xEC18<32>
	r0 = 0xFE104FFF<32>
	r17 = 0xB<32>
	r2 = 0x2C<32>
	// succ:  l0000B180
l0000B180:
	r3 = r0 + 0x1EFB001<32>
	p0 = r3 >u 0x3F<32>
	branch p0 l0000B1B4
	// succ:  l0000B190 l0000B1B4
l0000B190:
	r3 = Mem0[r2 + 4<i32>:word32]
	r1 = r1 + 0x18<32>
	r2 = r2 + 4<32>
	r0 = r0 + 1<32>
	branch p0 l0000B180
	// succ:  l0000B1A0 l0000B180
l0000B1A0:
	p0 = r19 == 1<32>
	Mem0[r2:word32] = 1<32>
	r3 = 0<32>
	__nyi_loop0(0x0000B1A8<p32>, 6<32>)
	Mem0[r1:word32] = r3
	r1 = r1 + 4<i32>
	Mem0[r16:word32] = r0
	r17 = 0<32>
	// succ:  l0000B1B4
l0000B1B4:
	r0 = 0x10070<32>
	call __sys_Mtxunlock (retsize: 0;)
	// succ:  l0000B1C4
l0000B1C4:
	v16 = r30
	r31 = Mem0[v16 + 4<i32>:word32]
	r30 = Mem0[v16:word32]
	r29 = v16 + 8<i32>
	return
	// succ:  sys_Tlsalloc_exit
sys_Tlsalloc_exit:


// sys_Tlsfree
// Return size: 0
define sys_Tlsfree
sys_Tlsfree_entry:
	r29 = fp
	// succ:  l0000B1D0
l0000B1D0:
	v3 = r29 - 8<i32>
	Mem0[v3:word32] = r30
	Mem0[v3 + 4<i32>:word32] = r31
	r30 = v3
	r29 = v3 - 8<i32>
	Mem0[r29 + 496<i32>:word64] = r17_r16
	r17 = r0 + 0x1EFB000<32>
	p0 = r17 >u 0x3F<32>
	r16 = 0x16<32>
	branch p0 l0000B21C
	// succ:  l0000B1E8 l0000B21C
l0000B1E8:
	branch r0 == 0<32> l0000B1E8_thunk_sys_Tlsset
	goto l0000B1F8
	// succ:  l0000B1F8 l0000B1E8_thunk_sys_Tlsset
l0000B1E8_thunk_sys_Tlsset:
	call sys_Tlsset (retsize: 0;)
	return
	// succ:  sys_Tlsfree_exit
l0000B1F8:
	r0 = Mem0[0x0000EB30<p32> + r17:word32]
	r16 = 0xEB30<32>
	r0 = 0x30<32>
	call lockMutex (retsize: 0;)
	r16 = 0<32>
	r0 = r16 + (r17 << 2<32>)
	Mem0[r0:word32] = 0<32>
	r0 = 0x30<32>
	call __sys_Mtxunlock (retsize: 0;)
	// succ:  l0000B21C
l0000B21C:
	v11 = r30
	r31 = Mem0[v11 + 4<i32>:word32]
	r30 = Mem0[v11:word32]
	r29 = v11 + 8<i32>
	return
	// succ:  sys_Tlsfree_exit
sys_Tlsfree_exit:


// sys_Tlsset
// Return size: 0
define sys_Tlsset
sys_Tlsset_entry:
	r29 = fp
	// succ:  l0000B224
l0000B224:
	r0 = 0x16<32>
	r2 = r0 + 0x1EFB000<32>
	p0 = r2 >u 0x3F<32>
	branch p0 l0000B258
	// succ:  l0000B238 l0000B258
l0000B238:
	r3 = Mem0[0x0000EB30<p32> + r2:word32]
	r3 = htid
	r0 = 0<32>
	r4 = 0x30<32>
	r2 = r4 + 0x18<32> * r2
	Mem0[r14 + r3 * 4<32>:word32] = r1
	// succ:  l0000B258
l0000B258:
	return
	// succ:  sys_Tlsset_exit
sys_Tlsset_exit:


// sys_Tlsget
// Return size: 0
define sys_Tlsget
sys_Tlsget_entry:
	r29 = fp
	// succ:  l0000B260
l0000B260:
	r0 = 0<32>
	r1 = r0 + 0x1EFB000<32>
	p0 = r1 >u 0x3F<32>
	branch p0 l0000B294
	// succ:  l0000B274 l0000B294
l0000B274:
	branch r2 == 0<32> l0000B29C
	// succ:  l0000B284 l0000B29C
l0000B284:
	r2 = Mem0[0x0000EB30<p32> + r1:word32]
	r2 = 0xEC30<32>
	r1 = r2 + 0x18<32> * r1
	r0 = Mem0[r30 + r0 * 4<32>:word32]
	// succ:  l0000B294
l0000B294:
	return
	// succ:  sys_Tlsget_exit
l0000B29C:
	// succ:  l0000B29C_thunk___sys_write
l0000B29C_thunk___sys_write:
	call __sys_write (retsize: 0;)
	return
	// succ:  sys_Tlsget_exit
sys_Tlsget_exit:


// __sys_write
// Return size: 0
define __sys_write
__sys_write_entry:
	r29 = fp
	// succ:  l0000B2A0
l0000B2A0:
	v3 = r29 - 8<i32>
	Mem0[v3:word32] = r30
	Mem0[v3 + 4<i32>:word32] = r31
	r30 = v3
	r29 = v3 - 24<i32>
	r4 = Mem0[gp + 224<i32>:word32]
	r3 = r0
	Mem0[r29 + 16<i32>:word64] = r17_r16
	r0 = r1
	branch p0 l0000B2F8
	// succ:  l0000B2B8 l0000B2F8
l0000B2B8:
	p0 = r4 == 0<32>
	Mem0[r29:word32] = r3
	r16 = r29 + 0<32>
	r1 = r2
	r4 = setbit(r16, 4<32>)
	Mem0[r16 + 8<i32>:word32] = r2
	Mem0[r4:word32] = r0
	call hexagon_cache_cleaninv (retsize: 0;)
	r0 = r29 + 0<32>
	r1 = 0xC<32>
	call hexagon_cache_cleaninv (retsize: 0;)
	r0 = 5<32>
	r1 = r16
	trap0(0<32>)
	r2 = r0
	r16 = r1
	branch p0 l0000B304
	// succ:  l0000B2EC l0000B304
l0000B2EC:
	p0 = r2 == -1<i32>
	call _Geterrno (retsize: 0;)
	Mem0[r0:word32] = r16
	r2 = -1<i32>
	goto l0000B304
	// succ:  l0000B304
l0000B2F8:
	call _Geterrno (retsize: 0;)
	Mem0[r0:word32] = 0x59<32>
	r2 = 0xFFFFFFFF<32>
	// succ:  l0000B304
l0000B304:
	v15 = r30
	r31 = Mem0[v15 + 4<i32>:word32]
	r30 = Mem0[v15:word32]
	r29 = v15 + 8<i32>
	return
	// succ:  __sys_write_exit
__sys_write_exit:


// sqrt
// Return size: 0
define sqrt
sqrt_entry:
	r29 = fp
	// succ:  l0000B310
l0000B310:
	v3 = r29 - 8<i32>
	Mem0[v3:word32] = r30
	Mem0[v3 + 4<i32>:word32] = r31
	r30 = v3
	r29 = v3 - 24<i32>
	Mem0[r29 + 496<i32>:word64] = r17_r16
	r17_r16 = r1_r0
	Mem0[r29 + 8<i32>:word64] = r17_r16
	r1 = r29 + 8<32>
	r0 = r29 + 6<32>
	call _Dunscale (retsize: 0;)
	branch p0 l0000B348
	// succ:  l0000B328 l0000B348
l0000B328:
	p0 = r0 == 0<32>
	branch p0 l0000B330
	// succ:  l0000B32C l0000B330
l0000B32C:
	p0 = r0 == 2<32>
	branch p0 l0000B348
	// succ:  l0000B330 l0000B348
l0000B330:
	p0 = r0 == 4<32>
	r0 = r29 + 8<32>
	r0 = r0 | 6<32>
	branch tstbit(r0, -1<i32>) l0000B34C
	// succ:  l0000B344 l0000B34C
l0000B344:
	r0 = Mem0[r0:int16]
	r0 = 1<32>
	// succ:  l0000B348
l0000B348:
	r1_r0 = r17_r16
	call fn0000ADC0 (retsize: 0;)
	goto l0000B350
	// succ:  l0000B350
l0000B34C:
	r1_r0 = r17_r16
	// succ:  l0000B350
l0000B350:
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  sqrt_exit
sqrt_exit:


