// hexagon_start_init
// Return size: 0
define hexagon_start_init
hexagon_start_init_entry:
	r29 = fp
	// succ:  l00000098
l00000098:
	r0 = rev
	r0 = r0 & 0xFF<32>
	p0 = r0 == 2<32>
	branch p0 l000000B4
	// succ:  l000000A8 l000000B4
l000000A8:
	r0 = SEQ(0x100<16>, SLICE(r0, word16, 0))
	r0 = SEQ(SLICE(r0, word16, 16), 0<16>)
	reseved60 = r0
	// succ:  l000000B4
l000000B4:
	r0 = SEQ(0<16>, SLICE(r0, word16, 0))
	r0 = SEQ(SLICE(r0, word16, 16), 0<16>)
	p0 = r0 == 0<32>
	branch p0 l000000C8
	// succ:  l000000C4 l000000C8
l000000C4:
	reseved60 = r0
	// succ:  l000000C8
l000000C8:
	r0 = SEQ(0<16>, SLICE(r0, word16, 0))
	r0 = SEQ(SLICE(r0, word16, 16), 0<16>)
	p0 = r0 == 0<32>
	branch p0 l000000DC
	// succ:  l000000D8 l000000DC
l000000D8:
	reseved61 = r0
	// succ:  l000000DC
l000000DC:
	r0 = SEQ(0<16>, SLICE(r0, word16, 0))
	r0 = SEQ(SLICE(r0, word16, 16), 0<16>)
	p0 = r0 == 0<32>
	branch p0 l000000F0
	// succ:  l000000EC l000000F0
l000000EC:
	reseved62 = r0
	// succ:  l000000F0
l000000F0:
	r0 = SEQ(0<16>, SLICE(r0, word16, 0))
	r0 = SEQ(SLICE(r0, word16, 16), 0<16>)
	p0 = r0 == 0<32>
	branch p0 l00000104
	// succ:  l00000100 l00000104
l00000100:
	reseved63 = r0
	// succ:  l00000104
l00000104:
	dckill()
	isync()
	ickill()
	isync()
	r0 = SEQ(0<16>, SLICE(r0, word16, 0))
	r0 = SEQ(SLICE(r0, word16, 16), 0<16>)
	p0 = r0 == 0<32>
	branch p0 l00000124
	// succ:  l00000120_1 l00000124
l00000120_1:
	call r0 (retsize: 0;)
	// succ:  l00000124
l00000124:
	r0 = 0<32>
	ssr = r0
	isync()
	r0 = SEQ(0<16>, SLICE(r0, word16, 0))
	r0 = SEQ(SLICE(r0, word16, 16), 0<16>)
	p0 = r0 == 0<32>
	r0 = r0 + 0xFFFFFFFF<32>
	r1 = SEQ(0<16>, SLICE(r1, word16, 0))
	r1 = SEQ(SLICE(r1, word16, 16), 0xC0<16>)
	r0 = Mem0[r1:word32]
	r0 = SEQ(0<16>, SLICE(r0, word16, 0))
	r0 = SEQ(SLICE(r0, word16, 16), 0<16>)
	p0 = r0 == 0<32>
	r0 = r0 + 0xFFFFFFFF<32>
	r1 = SEQ(0<16>, SLICE(r1, word16, 0))
	r1 = SEQ(SLICE(r1, word16, 16), 0xD0<16>)
	r0 = Mem0[r1:word32]
	r0 = SEQ(0<16>, SLICE(r0, word16, 0))
	r0 = SEQ(SLICE(r0, word16, 16), 0xC0<16>)
	r0 = Mem0[r0:word32]
	p0 = r0 == 0<32>
	r0 = SEQ(0<16>, SLICE(r0, word16, 0))
	r0 = SEQ(SLICE(r0, word16, 16), 0xD0<16>)
	r0 = Mem0[r0:word32]
	p1 = r0 == 0<32>
	p2 = p0 | p1
	r0 = syscfg
	r3 = p2 ? 0<32> : 0x28<32>
	r0 = r0 | r3
	syscfg = r0
	isync()
	r0 = SEQ(0<16>, SLICE(r0, word16, 0))
	r0 = SEQ(SLICE(r0, word16, 16), 0<16>)
	p3 = r0 == 0<32>
	r0 = r0 + 0xFFFFFFFF<32>
	r1 = SEQ(0<16>, SLICE(r1, word16, 0))
	r1 = SEQ(SLICE(r1, word16, 16), 0x90E3<16>)
	r0 = Mem0[r1:word32]
	r0 = SEQ(0<16>, SLICE(r0, word16, 0))
	r0 = SEQ(SLICE(r0, word16, 16), 0x90E3<16>)
	r0 = Mem0[r0:word32]
	p3 = r0 == 0<32>
	p0 = p2 | p3
	r0 = p0 ? 0<32> : 1<32>
	r1 = SEQ(0<16>, SLICE(r1, word16, 0))
	r1 = SEQ(SLICE(r1, word16, 16), 0xF0<16>)
	Mem0[r1:word32] = r0
	r0 = Mem0[r1:word32]
	r0 = SEQ(0<16>, SLICE(r0, word16, 0))
	r0 = SEQ(SLICE(r0, word16, 16), 0<16>)
	p0 = r0 == 0<32>
	r0 = r0 + 0xFFFFFFFF<32>
	r1 = SEQ(0<16>, SLICE(r1, word16, 0))
	r1 = SEQ(SLICE(r1, word16, 16), 0xE0<16>)
	r0 = Mem0[r1:word32]
	r0 = SEQ(0<16>, SLICE(r0, word16, 0))
	r0 = SEQ(SLICE(r0, word16, 16), 0xE0<16>)
	r0 = Mem0[r0:word32]
	p0 = r0 == 0<32>
	p0 = !p0
	r0 = p0
	isdben = r0
	brkpt()
	r0 = SEQ(0<16>, SLICE(r0, word16, 0))
	r0 = SEQ(SLICE(r0, word16, 16), 0<16>)
	p0 = r0 == 0<32>
	r0 = r0 + 0xFFFFFFFF<32>
	r1 = SEQ(0<16>, SLICE(r1, word16, 0))
	r1 = SEQ(SLICE(r1, word16, 16), 0x3F10<16>)
	r0 = Mem0[r1:word32]
	r0 = SEQ(0<16>, SLICE(r0, word16, 0))
	r0 = SEQ(SLICE(r0, word16, 16), 0<16>)
	p0 = r0 == 0<32>
	r0 = r0 + 0xFFFFFFFF<32>
	r1 = SEQ(0<16>, SLICE(r1, word16, 0))
	r1 = SEQ(SLICE(r1, word16, 16), 0x3F20<16>)
	r0 = Mem0[r1:word32]
	r0 = SEQ(0<16>, SLICE(r0, word16, 0))
	r0 = SEQ(SLICE(r0, word16, 16), 0<16>)
	p0 = r0 == 0<32>
	r0 = r0 + 0xFFFFFFFF<32>
	r1 = SEQ(0<16>, SLICE(r1, word16, 0))
	r1 = SEQ(SLICE(r1, word16, 16), 0x3F30<16>)
	r0 = Mem0[r1:word32]
	r0 = SEQ(0<16>, SLICE(r0, word16, 0))
	r0 = SEQ(SLICE(r0, word16, 16), 0<16>)
	p0 = r0 == 0<32>
	r0 = r0 + 0xFFFFFFFF<32>
	r1 = SEQ(0<16>, SLICE(r1, word16, 0))
	r1 = SEQ(SLICE(r1, word16, 16), 0x3F40<16>)
	r0 = Mem0[r1:word32]
	r0 = SEQ(0<16>, SLICE(r0, word16, 0))
	r0 = SEQ(SLICE(r0, word16, 16), 0<16>)
	p0 = r0 == 0<32>
	r0 = r0 + 0xFFFFFFFF<32>
	r1 = SEQ(0<16>, SLICE(r1, word16, 0))
	r1 = SEQ(SLICE(r1, word16, 16), 0x3F80<16>)
	r0 = Mem0[r1:word32]
	r0 = SEQ(0<16>, SLICE(r0, word16, 0))
	r0 = SEQ(SLICE(r0, word16, 16), 0<16>)
	p0 = r0 == 0<32>
	r0 = r0 + 0xFFFFFFFF<32>
	r1 = SEQ(0<16>, SLICE(r1, word16, 0))
	r1 = SEQ(SLICE(r1, word16, 16), 0x3F90<16>)
	r0 = Mem0[r1:word32]
	r0 = SEQ(0<16>, SLICE(r0, word16, 0))
	r0 = SEQ(SLICE(r0, word16, 16), 0<16>)
	p0 = r0 == 0<32>
	r0 = r0 + 0xFFFFFFFF<32>
	r1 = SEQ(0<16>, SLICE(r1, word16, 0))
	r1 = SEQ(SLICE(r1, word16, 16), 0x3FA0<16>)
	r0 = Mem0[r1:word32]
	r0 = SEQ(0<16>, SLICE(r0, word16, 0))
	r0 = SEQ(SLICE(r0, word16, 16), 0<16>)
	p0 = r0 == 0<32>
	r1 = SEQ(0<16>, SLICE(r1, word16, 0))
	r1 = SEQ(SLICE(r1, word16, 16), 0x3F70<16>)
	r0 = Mem0[r1:word32]
	r0 = SEQ(0<16>, SLICE(r0, word16, 0))
	r0 = SEQ(SLICE(r0, word16, 16), 0<16>)
	p0 = r0 == 0<32>
	r1 = SEQ(0<16>, SLICE(r1, word16, 0))
	r1 = SEQ(SLICE(r1, word16, 16), 0x3F60<16>)
	r0 = Mem0[r1:word32]
	r0 = SEQ(0<16>, SLICE(r0, word16, 0))
	r0 = SEQ(SLICE(r0, word16, 16), 0<16>)
	p0 = r0 == 0<32>
	r0 = r0 + 0xFFFFFFFF<32>
	r1 = SEQ(0<16>, SLICE(r1, word16, 0))
	r1 = SEQ(SLICE(r1, word16, 16), 0x3FB0<16>)
	r0 = Mem0[r1:word32]
	r0 = SEQ(0<16>, SLICE(r0, word16, 0))
	r0 = SEQ(SLICE(r0, word16, 16), 0<16>)
	p0 = r0 == 0<32>
	r0 = r0 + 0xFFFFFFFF<32>
	r1 = SEQ(0<16>, SLICE(r1, word16, 0))
	r1 = SEQ(SLICE(r1, word16, 16), 0x3FC0<16>)
	r0 = Mem0[r1:word32]
	r0 = SEQ(0<16>, SLICE(r0, word16, 0))
	r0 = SEQ(SLICE(r0, word16, 16), 0<16>)
	p0 = r0 == 0<32>
	r0 = r0 + 0xFFFFFFFF<32>
	r1 = SEQ(0<16>, SLICE(r1, word16, 0))
	r1 = SEQ(SLICE(r1, word16, 16), 0x3FD0<16>)
	r0 = Mem0[r1:word32]
	r0 = SEQ(0<16>, SLICE(r0, word16, 0))
	r0 = SEQ(SLICE(r0, word16, 16), 0<16>)
	p0 = r0 == 0<32>
	r0 = r0 + 0xFFFFFFFF<32>
	r1 = SEQ(0<16>, SLICE(r1, word16, 0))
	r1 = SEQ(SLICE(r1, word16, 16), 0x3FE0<16>)
	r0 = Mem0[r1:word32]
	r0 = SEQ(0<16>, SLICE(r0, word16, 0))
	r0 = SEQ(SLICE(r0, word16, 16), 0<16>)
	p0 = r0 == 0<32>
	r0 = r0 + 0xFFFFFFFF<32>
	r1 = SEQ(0<16>, SLICE(r1, word16, 0))
	r1 = SEQ(SLICE(r1, word16, 16), 0x3F00<16>)
	r0 = Mem0[r1:word32]
	r0 = SEQ(0<16>, SLICE(r0, word16, 0))
	r0 = SEQ(SLICE(r0, word16, 16), 0<16>)
	p0 = r0 == 0<32>
	r0 = r0 + 0xFFFFFFFF<32>
	r1 = SEQ(0<16>, SLICE(r1, word16, 0))
	r1 = SEQ(SLICE(r1, word16, 16), 0x3F50<16>)
	r0 = Mem0[r1:word32]
	r0 = SEQ(0<16>, SLICE(r0, word16, 0))
	r0 = SEQ(SLICE(r0, word16, 16), 0<16>)
	p0 = r0 == 0<32>
	r1 = SEQ(0<16>, SLICE(r1, word16, 0))
	r1 = SEQ(SLICE(r1, word16, 16), 0x3FF0<16>)
	r0 = Mem0[r1:word32]
	r0 = SEQ(0<16>, SLICE(r0, word16, 0))
	r0 = SEQ(SLICE(r0, word16, 16), 0x3F60<16>)
	r0 = Mem0[r0:word32]
	evb = r0
	r0 = SEQ(0<16>, SLICE(r0, word16, 0))
	r0 = SEQ(SLICE(r0, word16, 16), 0x6B30<16>)
	r0 = Mem0[r0:word32]
	sgp0 = r0
	r0 = SEQ(0<16>, SLICE(r0, word16, 0))
	r0 = SEQ(SLICE(r0, word16, 16), 0x3FB0<16>)
	r0 = Mem0[r0:word32]
	p0 = r0 == 0<32>
	p0 = !p0
	r1 = p0
	r0 = syscfg
	r0 = insert(1<32>, 1<32>)
	syscfg = r0
	r0 = SEQ(0<16>, SLICE(r0, word16, 0))
	r0 = SEQ(SLICE(r0, word16, 16), 0x3FC0<16>)
	r0 = Mem0[r0:word32]
	p0 = r0 == 0<32>
	p0 = !p0
	r1 = p0
	r0 = syscfg
	r0 = insert(1<32>, 9<32>)
	syscfg = r0
	r0 = SEQ(0<16>, SLICE(r0, word16, 0))
	r0 = SEQ(SLICE(r0, word16, 16), 0x3FD0<16>)
	r0 = Mem0[r0:word32]
	p0 = r0 == 0<32>
	p0 = !p0
	r1 = p0
	r0 = syscfg
	r0 = insert(1<32>, 9<32>)
	syscfg = r0
	r0 = SEQ(0<16>, SLICE(r0, word16, 0))
	r0 = SEQ(SLICE(r0, word16, 16), 0x3FE0<16>)
	r0 = Mem0[r0:word32]
	p0 = r0 == 0<32>
	p0 = !p0
	r1 = p0
	r0 = ssr
	r0 = insert(1<32>, 0x19<32>)
	ssr = r0
	r0 = rev
	r0 = r0 & 0xFF<32>
	p0 = r0 >u 2<32>
	branch p0 l000004F8
	// succ:  l000004E8 l000004F8
l000004E8:
	r0 = syscfg
	r1 = CONVERT(SLICE(r0, ui18, 2), ui18, uint32)
	p0 = r1 == 0<32>
	branch p0 l00000570
	// succ:  l000004F8 l00000570
l000004F8:
	r0 = ccr
	r3 = 0<32>
	r0 = insert(4<32>, 0x14<32>)
	ccr = r0
	r0 = syscfg
	r0 = insert(3<32>, 0x13<32>)
	isync()
	r1 = rev
	r1 = r1 & 0xFF<32>
	p0 = r1 == 2<32>
	branch p0 l00000538
	// succ:  l00000534 l00000538
l00000534:
	syncht()
	// succ:  l00000538
l00000538:
	syscfg = r0
	isync()
	l2kill()
	r2 = rev
	r2 = CONVERT(SLICE(r2, ui12, 4), ui12, uint32)
	r2 = Mem0[0x00001B44<p32> + r2:int8]
	r3 = SEQ(0<16>, SLICE(r3, word16, 0))
	r3 = SEQ(SLICE(r3, word16, 16), 0x3F00<16>)
	r3 = Mem0[r3:word32]
	r3 = min(r3, r2)
	r0 = insert(3<32>, 0x13<32>)
	syscfg = r0
	isync()
	// succ:  l00000570
l00000570:
	r1 = SEQ(0<16>, SLICE(r1, word16, 0))
	r1 = SEQ(SLICE(r1, word16, 16), 0x3F10<16>)
	r1 = Mem0[r1:word32]
	r0 = SEQ(0<16>, SLICE(r0, word16, 0))
	r0 = SEQ(SLICE(r0, word16, 16), 0x3F30<16>)
	r0 = Mem0[r0:word32]
	r2 = syscfg
	r2 = insert(1<32>, 1<32>)
	r2 = insert(1<32>, 1<32>)
	r0 = rev
	r0 = r0 & 0xFF<32>
	p0 = r0 == 2<32>
	branch p0 l000005C8
	// succ:  l000005A4 l000005C8
l000005A4:
	r0 = SEQ(0<16>, SLICE(r0, word16, 0))
	r0 = SEQ(SLICE(r0, word16, 16), 0<16>)
	p0 = r0 == 0<32>
	branch p0 l000005B8
	// succ:  l000005B4 l000005B8
l000005B4:
	r2 = setbit(r2, 0x10<32>)
	// succ:  l000005B8
l000005B8:
	r1 = SEQ(0<16>, SLICE(r1, word16, 0))
	r1 = SEQ(SLICE(r1, word16, 16), 0x3F50<16>)
	r1 = Mem0[r1:word32]
	r2 = insert(1<32>, 0x11<32>)
	// succ:  l000005C8
l000005C8:
	syscfg = r2
	isync()
	r2 = ccr
	r0 = SEQ(0<16>, SLICE(r0, word16, 0))
	r0 = SEQ(SLICE(r0, word16, 16), 0x3F20<16>)
	r0 = Mem0[r0:word32]
	r1 = SEQ(0<16>, SLICE(r1, word16, 0))
	r1 = SEQ(SLICE(r1, word16, 16), 0x3F40<16>)
	r1 = Mem0[r1:word32]
	r0 = r0 | r1 << 1<32>
	r2 = insert(2<32>, 0x12<32>)
	r2 = setbit(r2, 8<32>)
	ccr = r2
	r0 = r0 & 0<32>
	r0 = setbit(r0, 0<32>)
	USR = r0
	isync()
	r0 = SEQ(0<16>, SLICE(r0, word16, 0))
	r0 = SEQ(SLICE(r0, word16, 16), 0x3F80<16>)
	r0 = Mem0[r0:word32]
	p0 = r0 == 0<32>
	branch p0 l000006A8
	// succ:  l00000620 l000006A8
l00000620:
	r0 = SEQ(0<16>, SLICE(r0, word16, 0))
	r0 = SEQ(SLICE(r0, word16, 16), 0<16>)
	p0 = r0 > 1<32>
	branch p0 l0000065C
	// succ:  l00000630 l0000065C
l00000630:
	r0 = SEQ(0<16>, SLICE(r0, word16, 0))
	r0 = SEQ(SLICE(r0, word16, 16), 0x3FA0<16>)
	r0 = Mem0[r0:word32]
	p3 = r0 == 0<32>
	r0 = p3 ? 0x1F<32> : 0x3F<32>
	r3_r2 = 0<64>
	// succ:  l00000648
l00000648:
	tlbw(r3_r2, r0)
	isync()
	r0 = r0 + 0xFFFFFFFF<32>
	p0 = r0 == 0<32>
	branch p0 l00000648
	// succ:  l0000065C l00000648
l0000065C:
	r2 = SEQ(0<16>, SLICE(r2, word16, 0))
	r2 = SEQ(SLICE(r2, word16, 16), 0<16>)
	r2 = r2 >>u 0xC<32>
	r1 = SEQ(0xFC3<16>, SLICE(r1, word16, 0))
	r1 = SEQ(SLICE(r1, word16, 16), 0<16>)
	r0 = SEQ(0xDC03<16>, SLICE(r0, word16, 0))
	r0 = SEQ(SLICE(r0, word16, 16), 0<16>)
	r1 = r1 | r2
	r0 = r0 | r2 << 1<32>
	r0 = setbit(r0, 8<32>)
	r0 = r0 & 0xFFFFFFF0<32>
	r2 = 0<32>
	tlbw(r1_r0, r3)
	r0 = syscfg
	r0 = setbit(r0, 0<32>)
	r1 = p3
	r0 = insert(1<32>, 1<32>)
	syscfg = r0
	isync()
	// succ:  l000006A8
l000006A8:
	r0 = 0<32>
	imask = r0
	r1 = 0xFFFFFFFF<32>
	iel = r1
	iahl = r1
	cswi(r1)
	r0 = ssr
	r0 = setbit(r0, 4<32>)
	ssr = r0
	r0 = syscfg
	r0 = setbit(r0, 8<32>)
	syscfg = r0
	isync()
	r0 = SEQ(0<16>, SLICE(r0, word16, 0))
	r0 = SEQ(SLICE(r0, word16, 16), 0<16>)
	p0 = r0 == 0<32>
	branch p0 l000006F4
	// succ:  l000006EC l000006F4
l000006EC:
	ccr = r0
	isync()
	// succ:  l000006F4
l000006F4:
	r0 = SEQ(0<16>, SLICE(r0, word16, 0))
	r0 = SEQ(SLICE(r0, word16, 16), 0<16>)
	p0 = r0 == 0<32>
	branch p0 l0000070C
	// succ:  l00000704 l0000070C
l00000704:
	USR = r0
	isync()
	// succ:  l0000070C
l0000070C:
	r0 = SEQ(0<16>, SLICE(r0, word16, 0))
	r0 = SEQ(SLICE(r0, word16, 16), 0<16>)
	p0 = r0 == 0<32>
	branch p0 l00000724
	// succ:  l0000071C l00000724
l0000071C:
	syscfg = r0
	isync()
	// succ:  l00000724
l00000724:
	r0 = SEQ(0<16>, SLICE(r0, word16, 0))
	r0 = SEQ(SLICE(r0, word16, 16), 0x90E3<16>)
	r0 = Mem0[r0:word32]
	p0 = r0 == 0<32>
	branch p0 l00000760
	// succ:  l00000738 l00000760
l00000738:
	r0 = SEQ(0<16>, SLICE(r0, word16, 0))
	r0 = SEQ(SLICE(r0, word16, 16), 0x8063<16>)
	r1 = 0x20<32>
	r28 = SEQ(0<16>, SLICE(r28, word16, 0))
	r28 = SEQ(SLICE(r28, word16, 16), 0x5841<16>)
	call r28 (retsize: 0;)
	r0 = 0x16<32>
	r1 = SEQ(0<16>, SLICE(r1, word16, 0))
	r1 = SEQ(SLICE(r1, word16, 16), 0x80A3<16>)
	trap0(0<32>)
	// succ:  l00000760
l00000760:
	r28 = SEQ(0<16>, SLICE(r28, word16, 0))
	r28 = SEQ(SLICE(r28, word16, 16), 0xEEE0<16>)
	call r28 (retsize: 0;)
	return
	// succ:  hexagon_start_init_exit
hexagon_start_init_exit:


// __coredump
// Return size: 0
define __coredump
__coredump_entry:
	r29 = fp
	// succ:  l00000770
l00000770:
	r0 = SEQ(0<16>, SLICE(r0, word16, 0))
	r0 = SEQ(SLICE(r0, word16, 16), 0x3FF0<16>)
	r0 = Mem0[r0:word32]
	Mem0[r0:word64] = r1_r0
	r0 = r0 + 8<i32>
	Mem0[r0:word64] = r3_r2
	r0 = r0 + 8<i32>
	Mem0[r0:word64] = r5_r4
	r0 = r0 + 8<i32>
	Mem0[r0:word64] = r7_r6
	dccleana(r0)
	r0 = r0 + 8<32>
	Mem0[r0:word64] = r9_r8
	r0 = r0 + 8<i32>
	Mem0[r0:word64] = r11_r10
	r0 = r0 + 8<i32>
	Mem0[r0:word64] = r13_r12
	r0 = r0 + 8<i32>
	Mem0[r0:word64] = r15_r14
	dccleana(r0)
	r0 = r0 + 8<32>
	Mem0[r0:word64] = r17_r16
	r0 = r0 + 8<i32>
	Mem0[r0:word64] = r19_r18
	r0 = r0 + 8<i32>
	Mem0[r0:word64] = r21_r20
	r0 = r0 + 8<i32>
	Mem0[r0:word64] = r23_r22
	dccleana(r0)
	r0 = r0 + 8<32>
	Mem0[r0:word64] = r25_r24
	r0 = r0 + 8<i32>
	Mem0[r0:word64] = r27_r26
	r0 = r0 + 8<i32>
	Mem0[r0:word64] = r29_r28
	r0 = r0 + 8<i32>
	Mem0[r0:word64] = r31_r30
	dccleana(r0)
	r0 = r0 + 8<32>
	r1 = SA0
	Mem0[r0:word32] = r1
	r0 = r0 + 4<i32>
	r1 = LC0
	Mem0[r0:word32] = r1
	r0 = r0 + 4<i32>
	r1 = SA1
	Mem0[r0:word32] = r1
	r0 = r0 + 4<i32>
	r1 = LC1
	Mem0[r0:word32] = r1
	r0 = r0 + 4<i32>
	r1 = P3:0
	Mem0[r0:word32] = r1
	r0 = r0 + 4<i32>
	r1 = M0
	Mem0[r0:word32] = r1
	r0 = r0 + 4<i32>
	r1 = M1
	Mem0[r0:word32] = r1
	r0 = r0 + 4<i32>
	r1 = USR
	Mem0[r0:word32] = r1
	dccleana(r0)
	r0 = r0 + 4<32>
	r1 = PC
	Mem0[r0:word32] = r1
	r0 = r0 + 4<i32>
	r1 = UGP
	Mem0[r0:word32] = r1
	r0 = r0 + 4<i32>
	r1 = sgp0
	Mem0[r0:word32] = r1
	r0 = r0 + 4<i32>
	r1 = ssr
	Mem0[r0:word32] = r1
	r0 = r0 + 4<i32>
	r1 = imask
	Mem0[r0:word32] = r1
	r0 = r0 + 4<i32>
	r1 = badva
	Mem0[r0:word32] = r1
	r0 = r0 + 4<i32>
	r1 = elr
	Mem0[r0:word32] = r1
	r0 = r0 + 4<i32>
	r1 = stid
	Mem0[r0:word32] = r1
	dccleana(r0)
	r0 = r0 + 4<32>
	r1 = evb
	Mem0[r0:word32] = r1
	r0 = r0 + 4<i32>
	r1 = ipend
	Mem0[r0:word32] = r1
	r0 = r0 + 4<i32>
	r1 = syscfg
	Mem0[r0:word32] = r1
	r0 = r0 + 4<i32>
	r1 = modectl
	Mem0[r0:word32] = r1
	r0 = r0 + 4<i32>
	r1 = rev
	Mem0[r0:word32] = r1
	r0 = r0 + 4<i32>
	r1 = 0<32>
	Mem0[r0:word32] = r1
	r0 = r0 + 4<i32>
	r1 = 0<32>
	Mem0[r0:word32] = r1
	r0 = r0 + 4<i32>
	r1 = 0<32>
	Mem0[r0:word32] = r1
	dccleana(r0)
	r0 = r0 + 4<32>
	r1 = diag
	Mem0[r0:word32] = r1
	r0 = r0 + 4<i32>
	r1 = iad
	Mem0[r0:word32] = r1
	r0 = r0 + 4<i32>
	r1 = iel
	Mem0[r0:word32] = r1
	r0 = r0 + 4<i32>
	r1 = iahl
	Mem0[r0:word32] = r1
	r0 = r0 + 4<i32>
	r1 = pcyclehi
	Mem0[r0:word32] = r1
	r0 = r0 + 4<i32>
	r1 = pcyclelo
	Mem0[r0:word32] = r1
	r0 = r0 + 4<i32>
	r1 = isdbst
	Mem0[r0:word32] = r1
	r0 = r0 + 4<i32>
	r1 = isdbcfg0
	Mem0[r0:word32] = r1
	dccleana(r0)
	r0 = r0 + 4<32>
	r1 = isdbcfg1
	Mem0[r0:word32] = r1
	r0 = r0 + 4<i32>
	r1 = brkptpc0
	Mem0[r0:word32] = r1
	r0 = r0 + 4<i32>
	r1 = brkptcfg0
	Mem0[r0:word32] = r1
	r0 = r0 + 4<i32>
	r1 = brkptpc1
	Mem0[r0:word32] = r1
	r0 = r0 + 4<i32>
	r1 = brkptcfg1
	Mem0[r0:word32] = r1
	r0 = r0 + 4<i32>
	r1 = isdben
	Mem0[r0:word32] = r1
	r0 = r0 + 4<i32>
	r1 = isdgpr
	Mem0[r0:word32] = r1
	dccleana(r0)
	r1 = Mem0[r0 - 276<i32>:word32]
	r0 = ssr
	r0 = clrbit(r0, 0<32>)
	r0 = clrbit(r0, 2<32>)
	ssr = r0
	isync()
	r0 = 0xCD<32>
	trap0(0<32>)
	r2 = 0xFFFFFFFF<32>
	r0 = 0xFFFFFFFF<32>
	stop(r0)
__coredump_exit:


// event_handle_reset
// Return size: 0
define event_handle_reset
event_handle_reset_entry:
	r29 = fp
	goto l00000970
	// succ:  l00000970
l00000964_thunk_event_handle_reset:
	call event_handle_reset (retsize: 0;)
	return
	// succ:  event_handle_reset_exit
l00000970:
	r1 = htid
	r0 = SEQ(0<16>, SLICE(r0, word16, 0))
	r29 = SEQ(0<16>, SLICE(r29, word16, 0))
	r28 = SEQ(0<16>, SLICE(r28, word16, 0))
	r0 = SEQ(SLICE(r0, word16, 16), 0x6C50<16>)
	r29 = SEQ(SLICE(r29, word16, 16), 0x6BF0<16>)
	r1 = r1 << 2<32>
	r28 = SEQ(SLICE(r28, word16, 16), 0x6B90<16>)
	r0 = r0 + r1
	r29 = r29 + r1
	r28 = r28 + r1
	r2 = 0<32>
	ssr = r2
	isync()
	imask = r2
	r2 = SEQ(0<16>, SLICE(r2, word16, 0))
	r2 = SEQ(SLICE(r2, word16, 16), 0x6B30<16>)
	r2 = r2 + r1
	r2 = Mem0[r2:word32]
	sgp0 = r2
	r2 = SEQ(4<16>, SLICE(r2, word16, 0))
	r2 = SEQ(SLICE(r2, word16, 16), 0<16>)
	gp = r2
	r2 = SEQ(0x10<16>, SLICE(r2, word16, 0))
	r2 = SEQ(SLICE(r2, word16, 16), 0<16>)
	ssr = r2
	r2 = SEQ(0<16>, SLICE(r2, word16, 0))
	r2 = SEQ(SLICE(r2, word16, 16), 0x3FE0<16>)
	r2 = Mem0[r2:word32]
	p0 = !(r2 == 0<32>)
	r1 = p0
	r2 = ssr
	r2 = insert(1<32>, 0x19<32>)
	ssr = r2
	r2 = SEQ(4<16>, SLICE(r2, word16, 0))
	USR = r2
	r2 = SEQ(0x4C<16>, SLICE(r2, word16, 0))
	ccr = r2
	isync()
	r2 = SEQ(0xEAFA<16>, SLICE(r2, word16, 0))
	r2 = SEQ(SLICE(r2, word16, 16), 0xFBBE<16>)
	r3 = r2
	r1 = r2
	r11_r10 = r3_r2
	r9_r8 = r3_r2
	r7_r6 = r3_r2
	r5_r4 = r3_r2
	r19_r18 = r3_r2
	r17_r16 = r3_r2
	r15_r14 = r3_r2
	r13_r12 = r3_r2
	r27_r26 = r3_r2
	r25_r24 = r3_r2
	r23_r22 = r3_r2
	r21_r20 = r3_r2
	r29 = Mem0[r29:word32]
	r28 = Mem0[r28:word32]
	r31 = SEQ(0<16>, SLICE(r31, word16, 0))
	r0 = Mem0[r0:word32]
	r30 = 0<32>
	goto l00000A54_thunk_event_handle_nmi
	// succ:  l00000A54_thunk_event_handle_nmi
l00000970:
	goto l00000964_thunk_event_handle_reset
	// succ:  l00000964_thunk_event_handle_reset
l00000A54_thunk_event_handle_nmi:
	call event_handle_nmi (retsize: 0;)
	return
	// succ:  event_handle_reset_exit
event_handle_reset_exit:


// thread_start
// Return size: 0
define thread_start
thread_start_entry:
	r29 = fp
	// succ:  l00000A64
l00000A64:
	call r28 (retsize: 0;)
	return
	// succ:  thread_start_exit
thread_start_exit:


// event_handle_nmi
// Return size: 0
define event_handle_nmi
event_handle_nmi_entry:
	r29 = fp
	// succ:  l00000A68
l00000A68:
	r0 = 1<32>
	stid = r0
	// succ:  l00000A70_thunk___coredump
l00000A70_thunk___coredump:
	call __coredump (retsize: 0;)
	return
	// succ:  event_handle_nmi_exit
event_handle_nmi_exit:


// event_handle_error
// Return size: 0
define event_handle_error
event_handle_error_entry:
	r29 = fp
	// succ:  l00000A74
l00000A74:
	r0 = 2<32>
	stid = r0
	// succ:  l00000A7C_thunk___coredump
l00000A7C_thunk___coredump:
	call __coredump (retsize: 0;)
	return
	// succ:  event_handle_error_exit
event_handle_error_exit:


// event_handle_rsvd
// Return size: 0
define event_handle_rsvd
event_handle_rsvd_entry:
	r29 = fp
	// succ:  l00000A80
l00000A80:
	r0 = SEQ(0x7AB7<16>, SLICE(r0, word16, 0))
	r0 = SEQ(SLICE(r0, word16, 16), 0xFBBE<16>)
	stid = r0
	// succ:  l00000A8C_thunk___coredump
l00000A8C_thunk___coredump:
	call __coredump (retsize: 0;)
	return
	// succ:  event_handle_rsvd_exit
event_handle_rsvd_exit:


// event_handle_tlbmissx
// Return size: 0
define event_handle_tlbmissx
event_handle_tlbmissx_entry:
	r29 = fp
	// succ:  l00000AC0
l00000AC0:
	crswap(r29, sgp0)
	r29 = r29 + 0xFFFFFFC0<32>
	Mem0[r29:word64] = r1_r0
	Mem0[r29 + 8<i32>:word64] = r3_r2
	Mem0[r29 + 16<i32>:word64] = r5_r4
	Mem0[r29 + 24<i32>:word64] = r7_r6
	Mem0[r29 + 32<i32>:word64] = r9_r8
	r9 = P3:0
	r8 = ssr
	r7 = elr
	p1 = tstbit(r8, 0<32>)
	r0 = SEQ(0<16>, SLICE(r0, word16, 0))
	branch p1 l00000B00
	// succ:  l00000AF8 l00000B00
l00000AF8:
	r7 = r7 >>u 0xC<32>
	r7 = r7 + 1<32>
	r1 = 6<32>
	r0 = SEQ(SLICE(r0, word16, 16), 0x6E10<16>)
	goto l00000B04
	// succ:  l00000B04
l00000B00:
	r1 = 6<32>
	// succ:  l00000B04
l00000B04:
	r6 = memw_locked(r0)
	p0 = r6 > 0x7E<32>
	r6 = r6 + 1<32>
	r3 = SEQ(0<16>, SLICE(r3, word16, 0))
	r6 = p0 ? r1 : r6
	memw_locked(r0, p0, r6)
	r3 = SEQ(SLICE(r3, word16, 16), 0x3F70<16>)
	branch p0 l00000B04
	// succ:  l00000B24 l00000B04
l00000B24:
	r3 = Mem0[r3:word32]
	r7 = r7 >>u 8<32>
	r3 = r3 + (r7 << 1<32>)
	r3 = Mem0[r3:int16]
	r7 = r7 << 8<32>
	r5 = CONVERT(SLICE(r3, ui4, 12), ui4, uint32)
	r1 = 0<32>
	r0 = 0x10<32>
	r4 = CONVERT(SLICE(r3, ui4, 4), ui4, uint32)
	r0 = SEQ(0xC003<16>, SLICE(r0, word16, 0))
	r1 = SEQ(3<16>, SLICE(r1, word16, 0))
	r4 = r4 << 0x18<32>
	r0 = r0 | r5 << 9<32>
	r1 = r1 | r7
	r4 = SEQ(0<16>, SLICE(r4, word16, 0))
	r0 = r0 | r4
	r5 = 1<32>
	r4 = SEQ(SLICE(r4, word16, 16), 0x6E00<16>)
	// succ:  l00000B68
l00000B68:
	r2 = memw_locked(r4)
	p0 = r2 == 0<32>
	branch p0 l00000B68
	// succ:  l00000B74 l00000B68
l00000B74:
	memw_locked(r4, p0, r5)
	branch p0 l00000B68
	// succ:  l00000B7C l00000B68
l00000B7C:
	r5 = tlbp(r1)
	p0 = tstbit(r5, 0x1F<32>)
	branch p0 l00000B90
	// succ:  l00000B88 l00000B90
l00000B88:
	tlbw(r1_r0, r6)
	isync()
	// succ:  l00000B90
l00000B90:
	r1 = 0<32>
	// succ:  l00000B94
l00000B94:
	r2 = memw_locked(r4)
	memw_locked(r4, p0, r1)
	branch p0 l00000B94
	// succ:  l00000BA0 l00000B94
l00000BA0:
	P3:0 = r9
	r7_r6 = Mem0[r29 + 24<i32>:word64]
	r9_r8 = Mem0[r29 + 32<i32>:word64]
	r3_r2 = Mem0[r29 + 8<i32>:word64]
	r5_r4 = Mem0[r29 + 16<i32>:word64]
	r1_r0 = Mem0[r29:word64]
	r29 = r29 + 0x40<32>
	crswap(r29, sgp0)
	rte()
	return
	// succ:  event_handle_tlbmissx_exit
event_handle_tlbmissx_exit:


// event_handle_tlbmissrw
// Return size: 0
define event_handle_tlbmissrw
event_handle_tlbmissrw_entry:
	r29 = fp
	// succ:  l00000BC0
l00000BC0:
	crswap(r29, sgp0)
	r29 = r29 + 0xFFFFFFC0<32>
	Mem0[r29:word64] = r1_r0
	Mem0[r29 + 8<i32>:word64] = r3_r2
	Mem0[r29 + 16<i32>:word64] = r5_r4
	Mem0[r29 + 24<i32>:word64] = r7_r6
	Mem0[r29 + 32<i32>:word64] = r9_r8
	r8 = ssr
	r7 = badva
	r1 = 6<32>
	r0 = SEQ(SLICE(r0, word16, 16), 0x6E10<16>)
	r9 = P3:0
	r0 = SEQ(0<16>, SLICE(r0, word16, 0))
	r7 = r7 >>u 0x14<32>
	// succ:  l00000BF8
l00000BF8:
	r6 = memw_locked(r0)
	r3 = SEQ(0<16>, SLICE(r3, word16, 0))
	p0 = r6 > 0x7E<32>
	r6 = r6 + 1<32>
	r3 = SEQ(SLICE(r3, word16, 16), 0x3F70<16>)
	r6 = p0 ? r1 : r6
	memw_locked(r0, p0, r6)
	branch p0 l00000BF8
	// succ:  l00000C18 l00000BF8
l00000C18:
	r3 = Mem0[r3:word32]
	r3 = r3 + (r7 << 1<32>)
	r3 = Mem0[r3:int16]
	r7 = r7 << 8<32>
	r5 = CONVERT(SLICE(r3, ui4, 12), ui4, uint32)
	r1 = 0<32>
	r0 = 0x10<32>
	r4 = CONVERT(SLICE(r3, ui4, 4), ui4, uint32)
	r0 = SEQ(0xC003<16>, SLICE(r0, word16, 0))
	r1 = SEQ(3<16>, SLICE(r1, word16, 0))
	r4 = r4 << 0x18<32>
	r0 = r0 | r5 << 9<32>
	r1 = r1 | r7
	r4 = SEQ(0<16>, SLICE(r4, word16, 0))
	r0 = r0 | r4
	r5 = 1<32>
	r4 = SEQ(SLICE(r4, word16, 16), 0x6E00<16>)
	// succ:  l00000C58
l00000C58:
	r2 = memw_locked(r4)
	memw_locked(r4, p0, r5)
	p1 = r2 == 0<32>
	branch p0 l00000C58
	// succ:  l00000C68 l00000C58
l00000C68:
	branch p1 l00000C58
	// succ:  l00000C6C l00000C58
l00000C6C:
	r5 = tlbp(r1)
	p0 = tstbit(r5, 0x1F<32>)
	branch p0 l00000C80
	// succ:  l00000C78 l00000C80
l00000C78:
	tlbw(r1_r0, r6)
	isync()
	// succ:  l00000C80
l00000C80:
	r1 = 0<32>
	// succ:  l00000C84
l00000C84:
	r2 = memw_locked(r4)
	memw_locked(r4, p0, r1)
	branch p0 l00000C84
	// succ:  l00000C90 l00000C84
l00000C90:
	P3:0 = r9
	r7_r6 = Mem0[r29 + 24<i32>:word64]
	r9_r8 = Mem0[r29 + 32<i32>:word64]
	r3_r2 = Mem0[r29 + 8<i32>:word64]
	r5_r4 = Mem0[r29 + 16<i32>:word64]
	r1_r0 = Mem0[r29:word64]
	r29 = r29 + 0x40<32>
	crswap(r29, sgp0)
	rte()
	return
	// succ:  event_handle_tlbmissrw_exit
event_handle_tlbmissrw_exit:


// event_handle_trap0
// Return size: 0
define event_handle_trap0
event_handle_trap0_entry:
	r29 = fp
	// succ:  l00000CB0
l00000CB0:
	crswap(r29, sgp0)
	Mem0[r29 - 40<i32>:word64] = r5_r4
	p0 = r0 == 0x40<32>
	r29 = r29 + 0xFFFFFFD8<32>
	r5 = P3:0
	Mem0[r29 + 8<i32>:word64] = r3_r2
	r4 = SEQ(0x5555<16>, SLICE(r4, word16, 0))
	p2 = r0 == 0x52<32>
	p1 = r0 == 0x44<32>
	r3 = SEQ(0<16>, SLICE(r3, word16, 0))
	r3 = SEQ(SLICE(r3, word16, 16), 0xF0<16>)
	r3 = Mem0[r3:word32]
	branch p3 l00000E00
	// succ:  l00000CE8 l00000E00
l00000CE8:
	p3 = r3 == 1<32>
	Mem0[r29 + 16<i32>:word64] = r7_r6
	r4 = SEQ(SLICE(r4, word16, 16), 0x5555<16>)
	p0 = p1 | p2
	branch p0 l00000DDC
	// succ:  l00000CF8 l00000DDC
l00000CF8:
	Mem0[r29 + 24<i32>:word64] = r9_r8
	r6 = 0xCD<32>
	r3 = SEQ(0<16>, SLICE(r3, word16, 0))
	branch p0 l00000DDC
	// succ:  l00000D08 l00000DDC
l00000D08:
	p3 = r0 == r6
	p2 = r0 == 0x18<32>
	r4 = SEQ(0<16>, SLICE(r4, word16, 0))
	r3 = SEQ(SLICE(r3, word16, 16), 0x100<16>)
	r7 = Mem0[r3:word32]
	r4 = SEQ(SLICE(r4, word16, 16), 0x80<16>)
	p3 = p2 | p3
	r9 = r5
	r8 = htid
	p0 = r7 == 0<32>
	branch p3 l00000E14
	// succ:  l00000D40 l00000E14
l00000D40:
	r6 = SEQ(8<16>, SLICE(r6, word16, 0))
	r7 = Mem0[r3:word32]
	r5 = 1<32>
	branch p0 l00000D44
	goto l00000D4C
	// succ:  l00000D4C l00000D44
l00000D44:
	r7 = Mem0[r3:word32]
	r5 = 1<32>
	branch p0 l00000D44
	// succ:  l00000D4C l00000D44
l00000D4C:
	p0 = r7 == 0<32>
	r7 = memw_locked(r3)
	memw_locked(r3, p1, r5)
	p0 = r7 == 0<32>
	branch p1 l00000D4C
	// succ:  l00000D5C l00000D4C
l00000D5C:
	branch p0 l00000D40
	// succ:  l00000D60 l00000D40
l00000D60:
	Mem0[r4:word64] = r1_r0
	r2 = p2 ? r2 : r8
	Mem0[r4 + 8<i32>:word32] = r2
	Mem0[r4 + 12<i32>:word32] = r5
	dccleaninva(r4)
	r6 = Mem0[r4 + 15<i32>:int8]
	dccleaninva(r4)
	r6 = SEQ(0<16>, SLICE(r6, word16, 0))
	r6 = SEQ(SLICE(r6, word16, 16), 0xF0<16>)
	r6 = Mem0[r6:word32]
	r5 = 0<32>
	r6 = 0<32>
	branch p0 l00000DA0
	// succ:  l00000D90 l00000DA0
l00000D90:
	p0 = r6 == 2<32>
	r6 = Mem0[r4 + 12<i32>:word32]
	dccleaninva(r4)
	r1_r0 = Mem0[r4:word64]
	r5 = 0<32>
	// succ:  l00000DA0
l00000DA0:
	r7 = memw_locked(r3)
	memw_locked(r3, p1, r5)
	Mem0[r29 + 32<i32>:word32] = r4
	p0 = r6 == 0<32>
	branch p1 l00000DA0
	// succ:  l00000DB0 l00000DA0
l00000DB0:
	r7_r6 = Mem0[r29 + 16<i32>:word64]
	r5_r4 = Mem0[r29:word64]
	branch p0 l00000DD0
	// succ:  l00000DB8 l00000DD0
l00000DB8:
	r9_r8 = Mem0[r29 + 24<i32>:word64]
	r3_r2 = Mem0[r29 + 8<i32>:word64]
	r29 = r29 + 0x28<32>
	P3:0 = r9
	crswap(r29, sgp0)
	rte()
	return
	// succ:  event_handle_trap0_exit
l00000DD0:
	r4 = Mem0[r29 + 32<i32>:word32]
	goto l00000D44
	// succ:  l00000D44
l00000DDC:
	r1 = pcyclehi
	r0 = pcyclelo
	r7_r6 = Mem0[r29 + 16<i32>:word64]
	r3_r2 = r0 *u64 r4
	branch p2 l00000DFC
	// succ:  l00000DF0 l00000DFC
l00000DF0:
	r3_r2 = r3_r2 >>u 0x20<32>
	r1_r0 = r1 *u64 r4
	r1_r0 = r3_r2 + r1_r0
	// succ:  l00000DFC
l00000DFC:
	r5_r4 = Mem0[r29:word64]
	r3_r2 = Mem0[r29 + 8<i32>:word64]
	r29 = r29 + 0x28<32>
	P3:0 = r5
	goto l00000E08
	// succ:  l00000E08
l00000E00:
	r5_r4 = Mem0[r29:word64]
	r3_r2 = Mem0[r29 + 8<i32>:word64]
	r29 = r29 + 0x28<32>
	// succ:  l00000E08
l00000E08:
	crswap(r29, sgp0)
	rte()
	return
	// succ:  event_handle_trap0_exit
l00000E14:
	r6 = SEQ(SLICE(r6, word16, 16), 0x98<16>)
	goto l00000D44
	// succ:  l00000D44
event_handle_trap0_exit:


// event_handle_trap1
// Return size: 0
define event_handle_trap1
event_handle_trap1_entry:
	r29 = fp
	// succ:  l00000E30
l00000E30:
	r0 = 9<32>
	stid = r0
	// succ:  l00000E38_thunk___coredump
l00000E38_thunk___coredump:
	call __coredump (retsize: 0;)
	return
	// succ:  event_handle_trap1_exit
event_handle_trap1_exit:


// event_handle_int
// Return size: 0
define event_handle_int
event_handle_int_entry:
	r29 = fp
	// succ:  l00000E3C
l00000E3C:
	crswap(r29, sgp0)
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 160<i32>
	Mem0[r29:word64] = r1_r0
	r0 = SA0
	Mem0[r29 + 8<i32>:word64] = r3_r2
	r1 = LC0
	Mem0[r29 + 16<i32>:word64] = r5_r4
	r2 = SA1
	Mem0[r29 + 24<i32>:word64] = r7_r6
	r3 = LC1
	Mem0[r29 + 32<i32>:word64] = r9_r8
	r4 = P3:0
	Mem0[r29 + 40<i32>:word64] = r11_r10
	r5 = M0
	Mem0[r29 + 48<i32>:word64] = r13_r12
	r6 = M1
	Mem0[r29 + 56<i32>:word64] = r15_r14
	r7 = USR
	Mem0[r29 + 64<i32>:word64] = r17_r16
	r8 = UGP
	r9 = elr
	Mem0[r29 + 72<i32>:word64] = r19_r18
	Mem0[r29 + 80<i32>:word64] = r21_r20
	Mem0[r29 + 88<i32>:word64] = r23_r22
	Mem0[r29 + 96<i32>:word64] = r25_r24
	Mem0[r29 + 104<i32>:word64] = r27_r26
	Mem0[r29 + 112<i32>:word64] = r1_r0
	r0 = ssr
	Mem0[r29 + 120<i32>:word64] = r3_r2
	r2 = r0
	r7 = insert(8<32>, 0x10<32>)
	r1 = SEQ(0<16>, SLICE(r1, word16, 0))
	Mem0[r29 + 128<i32>:word64] = r5_r4
	r1 = SEQ(SLICE(r1, word16, 16), 0x4000<16>)
	r0 = r0 & 0x1F<32>
	Mem0[r29 + 136<i32>:word64] = r7_r6
	r1 = r1 + (r0 << 2<32>)
	Mem0[r29 + 144<i32>:word64] = r9_r8
	r1 = Mem0[r1:word32]
	r31 = r28
	r3 = 0<32>
	Mem0[r29 + 152<i32>:word64] = r31_r30
	p0 = r1 == 0<32>
	r2 = insert(3<32>, 0x13<32>)
	branch p0 l00000F24
	// succ:  l00000EEC l00000F24
l00000EEC:
	ssr = r2
	crswap(r29, sgp0)
	call r1 (retsize: 0;)
	crswap(r29, sgp0)
	r0 = ssr
	r7_r6 = Mem0[r29 + 136<i32>:word64]
	r1 = 6<32>
	r26 = SEQ(0<16>, SLICE(r26, word16, 0))
	r26 = SEQ(SLICE(r26, word16, 16), 4<16>)
	r0 = insert(3<32>, 0x13<32>)
	r7 = r7 >> 0x10<32>
	r7 = r7 & 0x1F<32>
	r26 = r26 & r26 << r7
	ssr = r0
	ciad(r26)
	// succ:  l00000F24
l00000F24:
	r9_r8 = Mem0[r29 + 144<i32>:word64]
	r31_r30 = Mem0[r29 + 152<i32>:word64]
	elr = r9
	r5_r4 = Mem0[r29 + 128<i32>:word64]
	r7_r6 = Mem0[r29 + 136<i32>:word64]
	UGP = r8
	r1_r0 = Mem0[r29 + 112<i32>:word64]
	r3_r2 = Mem0[r29 + 120<i32>:word64]
	r28 = r31
	USR = r7
	r25_r24 = Mem0[r29 + 96<i32>:word64]
	r27_r26 = Mem0[r29 + 104<i32>:word64]
	M1 = r6
	r21_r20 = Mem0[r29 + 80<i32>:word64]
	r23_r22 = Mem0[r29 + 88<i32>:word64]
	M0 = r5
	r17_r16 = Mem0[r29 + 64<i32>:word64]
	r19_r18 = Mem0[r29 + 72<i32>:word64]
	P3:0 = r4
	r13_r12 = Mem0[r29 + 48<i32>:word64]
	r15_r14 = Mem0[r29 + 56<i32>:word64]
	LC1 = r3
	r9_r8 = Mem0[r29 + 32<i32>:word64]
	r11_r10 = Mem0[r29 + 40<i32>:word64]
	SA1 = r2
	r5_r4 = Mem0[r29 + 16<i32>:word64]
	r7_r6 = Mem0[r29 + 24<i32>:word64]
	LC0 = r1
	r1_r0 = Mem0[r29:word64]
	r3_r2 = Mem0[r29 + 8<i32>:word64]
	SA0 = r0
	v46 = r30
	r31 = Mem0[v46 + 4<i32>:word32]
	r30 = Mem0[v46:word32]
	r29 = v46 + 8<i32>
	crswap(r29, sgp0)
	rte()
	return
	// succ:  event_handle_int_exit
event_handle_int_exit:


// .NoHandler
// Return size: 0
define .NoHandler
.NoHandler_entry:
	r29 = fp
	// succ:  l00000FA0
l00000FA0:
	return
	// succ:  .NoHandler_exit
.NoHandler_exit:


// hexagon_pre_main
// Return size: 0
define hexagon_pre_main
hexagon_pre_main_entry:
	r29 = fp
	// succ:  l00003BB8
l00003BB8:
	r30 = 0<32>
	r0 = SEQ(0<16>, SLICE(r0, word16, 0))
	r0 = SEQ(SLICE(r0, word16, 16), 0<16>)
	p0 = r0 == 0<32>
	r1 = SEQ(0<16>, SLICE(r1, word16, 0))
	r1 = SEQ(SLICE(r1, word16, 16), 0x8063<16>)
	r0 = Mem0[r1:word32]
	r4 = SEQ(0<16>, SLICE(r4, word16, 0))
	r4 = SEQ(SLICE(r4, word16, 16), 0x8063<16>)
	r4 = Mem0[r4:word32]
	r5 = SEQ(0<16>, SLICE(r5, word16, 0))
	r5 = SEQ(SLICE(r5, word16, 16), 0<16>)
	p0 = r5 == 0<32>
	r0 = SEQ(0x1000<16>, SLICE(r0, word16, 0))
	r0 = SEQ(SLICE(r0, word16, 16), 0<16>)
	r5 = r0 + 0<32>
	r5 = r4 + r5
	r5 = r5 + 0xF<32>
	r5 = r5 & 0xFFFFFFF0<32>
	r1 = SEQ(0<16>, SLICE(r1, word16, 0))
	r1 = SEQ(SLICE(r1, word16, 16), 0x8073<16>)
	Mem0[r1:word32] = r5
	r5 = Mem0[r1:word32]
	r7 = SEQ(0<16>, SLICE(r7, word16, 0))
	r7 = SEQ(SLICE(r7, word16, 16), 0<16>)
	p0 = r7 == 0<32>
	r0 = SEQ(0x40<16>, SLICE(r0, word16, 0))
	r0 = SEQ(SLICE(r0, word16, 16), 0<16>)
	r7 = r0 + 0<32>
	r6 = r5 + r7
	r6 = r6 & 0xFFFFFFF0<32>
	r0 = SEQ(SLICE(r0, word16, 16), 0x8083<16>)
	r0 = SEQ(0<16>, SLICE(r0, word16, 0))
	r0 = Mem0[r0:word32]
	p0 = r0 == 0<32>
	branch p0 l00003C78
	// succ:  l00003C4C l00003C78
l00003C4C:
	r1 = SEQ(0<16>, SLICE(r1, word16, 0))
	r1 = SEQ(SLICE(r1, word16, 16), 0x8083<16>)
	Mem0[r1:word32] = r6
	r6 = Mem0[r1:word32]
	r0 = SEQ(0<16>, SLICE(r0, word16, 0))
	r0 = SEQ(SLICE(r0, word16, 16), 0<16>)
	p0 = r0 == 0<32>
	r1 = SEQ(0<16>, SLICE(r1, word16, 0))
	r1 = SEQ(SLICE(r1, word16, 16), 0x8083<16>)
	r0 = Mem0[r1:word32]
	// succ:  l00003C78
l00003C78:
	r6 = SEQ(0<16>, SLICE(r6, word16, 0))
	r6 = SEQ(SLICE(r6, word16, 16), 0x8083<16>)
	r6 = Mem0[r6:word32]
	r7 = r6 - r7
	r7 = r7 + 0xF<32>
	r7 = r7 & 0xFFFFFFF0<32>
	r1 = SEQ(0<16>, SLICE(r1, word16, 0))
	r1 = SEQ(SLICE(r1, word16, 16), 0x8093<16>)
	Mem0[r1:word32] = r7
	r7 = Mem0[r1:word32]
	r1 = SEQ(0<16>, SLICE(r1, word16, 0))
	r1 = SEQ(SLICE(r1, word16, 16), 0<16>)
	branch p0 l00003CBC
	// succ:  l00003CAC l00003CBC
l00003CAC:
	p0 = r1 >u -1<i32>
	r0 = SEQ(0<16>, SLICE(r0, word16, 0))
	r0 = SEQ(SLICE(r0, word16, 16), 0x8083<16>)
	r0 = Mem0[r0:word32]
	r29 = r0 & 0xFFFFFFF0<32>
	// succ:  l00003CBC
l00003CBC:
	r0 = SEQ(4<16>, SLICE(r0, word16, 0))
	r0 = SEQ(SLICE(r0, word16, 16), 0<16>)
	gp = r0
	r28 = SEQ(0<16>, SLICE(r28, word16, 0))
	r28 = SEQ(SLICE(r28, word16, 16), 0x4B01<16>)
	r0 = SEQ(0<16>, SLICE(r0, word16, 0))
	r0 = SEQ(SLICE(r0, word16, 16), 0x80B3<16>)
	r1 = 0x400<32>
	call r28 (retsize: 0;)
	r0 = SEQ(0<16>, SLICE(r0, word16, 0))
	r0 = SEQ(SLICE(r0, word16, 16), 0<16>)
	branch p0 l00003CE8_thunk_hexagon_start_main
	goto l00003CEC
	// succ:  l00003CEC l00003CE8_thunk_hexagon_start_main
l00003CE8_thunk_hexagon_start_main:
	call hexagon_start_main (retsize: 0;)
	return
	// succ:  hexagon_pre_main_exit
l00003CEC:
	p0 = r0 > 2<32>
	r0 = SEQ(0<16>, SLICE(r0, word16, 0))
	r0 = SEQ(SLICE(r0, word16, 16), 0x9C03<16>)
	r2 = SEQ(0<16>, SLICE(r2, word16, 0))
	r2 = SEQ(SLICE(r2, word16, 16), 0xC903<16>)
	r28 = SEQ(0<16>, SLICE(r28, word16, 0))
	r28 = SEQ(SLICE(r28, word16, 16), 0x4E41<16>)
	r2 = r2 - r0
	call r28 (retsize: 0;)
	r1 = 0<32>
	r0 = SEQ(4<16>, SLICE(r0, word16, 0))
	r0 = SEQ(SLICE(r0, word16, 16), 0x400<16>)
	r2 = SEQ(4<16>, SLICE(r2, word16, 0))
	r2 = SEQ(SLICE(r2, word16, 16), 0x400<16>)
	r28 = SEQ(0<16>, SLICE(r28, word16, 0))
	r28 = SEQ(SLICE(r28, word16, 16), 0x4E41<16>)
	r2 = r2 - r0
	call r28 (retsize: 0;)
	r1 = 0<32>
	// succ:  l00003D28_thunk_hexagon_start_main
l00003D28_thunk_hexagon_start_main:
	call hexagon_start_main (retsize: 0;)
	return
	// succ:  hexagon_pre_main_exit
hexagon_pre_main_exit:


// hexagon_start_main
// Return size: 0
define hexagon_start_main
hexagon_start_main_entry:
	r29 = fp
	// succ:  l00003D34
l00003D34:
	r2 = SEQ(0<16>, SLICE(r2, word16, 0))
	r2 = SEQ(SLICE(r2, word16, 16), 0<16>)
	r3 = SEQ(0<16>, SLICE(r3, word16, 0))
	r3 = SEQ(SLICE(r3, word16, 16), 0x90C3<16>)
	p0 = r2 > 1<32>
	r1_r0 = Mem0[r3:word64]
	r1 = 0<32>
	r0 = 0<32>
	r2 = SEQ(0<16>, SLICE(r2, word16, 0))
	r2 = SEQ(SLICE(r2, word16, 16), 0xF700<16>)
	r3 = SEQ(0<16>, SLICE(r3, word16, 0))
	r3 = SEQ(SLICE(r3, word16, 16), 0xCD82<16>)
	r4 = SEQ(0xEAFA<16>, SLICE(r4, word16, 0))
	r4 = SEQ(SLICE(r4, word16, 16), 0xFBBE<16>)
	r5 = r4
	r13_r12 = r5_r4
	r11_r10 = r5_r4
	r9_r8 = r5_r4
	r7_r6 = r5_r4
	r21_r20 = r5_r4
	r19_r18 = r5_r4
	r17_r16 = r5_r4
	r15_r14 = r5_r4
	r27_r26 = r5_r4
	r25_r24 = r5_r4
	r23_r22 = r5_r4
	r28 = SEQ(0<16>, SLICE(r28, word16, 0))
	r28 = SEQ(SLICE(r28, word16, 16), 0x5301<16>)
	call r28 (retsize: 0;)
	r0 = SEQ(0<16>, SLICE(r0, word16, 0))
	r0 = SEQ(SLICE(r0, word16, 16), 0<16>)
	p0 = r0 == 0<32>
	branch p0 l00003DB8
	// succ:  l00003DB4_1 l00003DB8
l00003DB4_1:
	call r0 (retsize: 0;)
	// succ:  l00003DB8
l00003DB8:
	r0 = 0x3F<32>
	stop(r0)
	// succ:  l00003DBC_thunk__init
l00003DBC_thunk__init:
	call _init (retsize: 0;)
	return
	// succ:  hexagon_start_main_exit
hexagon_start_main_exit:


